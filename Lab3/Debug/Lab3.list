
Lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c00  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08002d0c  08002d0c  00012d0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002d2c  08002d2c  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08002d2c  08002d2c  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002d2c  08002d2c  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002d2c  08002d2c  00012d2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002d30  08002d30  00012d30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08002d34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ac  2000005c  08002d90  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000108  08002d90  00020108  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000091b4  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a93  00000000  00000000  00029239  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a50  00000000  00000000  0002acd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000950  00000000  00000000  0002b720  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016b69  00000000  00000000  0002c070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b275  00000000  00000000  00042bd9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000822a4  00000000  00000000  0004de4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d00f2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000028d4  00000000  00000000  000d0148  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002cf4 	.word	0x08002cf4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	08002cf4 	.word	0x08002cf4

0800014c <isButton1Pressed>:

int TimerForKey1Press = 300;
int TimerForKey2Press = 300;
int TimerForKey3Press = 300;

int isButton1Pressed(){
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
	if(button1_flag == 1){
 8000150:	4b06      	ldr	r3, [pc, #24]	; (800016c <isButton1Pressed+0x20>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	2b01      	cmp	r3, #1
 8000156:	d104      	bne.n	8000162 <isButton1Pressed+0x16>
		button1_flag = 0;
 8000158:	4b04      	ldr	r3, [pc, #16]	; (800016c <isButton1Pressed+0x20>)
 800015a:	2200      	movs	r2, #0
 800015c:	601a      	str	r2, [r3, #0]
		return 1;
 800015e:	2301      	movs	r3, #1
 8000160:	e000      	b.n	8000164 <isButton1Pressed+0x18>
	}
	return 0;
 8000162:	2300      	movs	r3, #0
}
 8000164:	4618      	mov	r0, r3
 8000166:	46bd      	mov	sp, r7
 8000168:	bc80      	pop	{r7}
 800016a:	4770      	bx	lr
 800016c:	20000078 	.word	0x20000078

08000170 <isButton2Pressed>:
int isButton2Pressed(){
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	if(button2_flag == 1){
 8000174:	4b06      	ldr	r3, [pc, #24]	; (8000190 <isButton2Pressed+0x20>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	2b01      	cmp	r3, #1
 800017a:	d104      	bne.n	8000186 <isButton2Pressed+0x16>
		button2_flag = 0;
 800017c:	4b04      	ldr	r3, [pc, #16]	; (8000190 <isButton2Pressed+0x20>)
 800017e:	2200      	movs	r2, #0
 8000180:	601a      	str	r2, [r3, #0]
		return 1;
 8000182:	2301      	movs	r3, #1
 8000184:	e000      	b.n	8000188 <isButton2Pressed+0x18>
	}
	return 0;
 8000186:	2300      	movs	r3, #0
}
 8000188:	4618      	mov	r0, r3
 800018a:	46bd      	mov	sp, r7
 800018c:	bc80      	pop	{r7}
 800018e:	4770      	bx	lr
 8000190:	2000007c 	.word	0x2000007c

08000194 <subKey1Process>:
		return 1;
	}
	return 0;
}

void subKey1Process(){
 8000194:	b480      	push	{r7}
 8000196:	af00      	add	r7, sp, #0
	button1_flag = 1;
 8000198:	4b03      	ldr	r3, [pc, #12]	; (80001a8 <subKey1Process+0x14>)
 800019a:	2201      	movs	r2, #1
 800019c:	601a      	str	r2, [r3, #0]
}
 800019e:	bf00      	nop
 80001a0:	46bd      	mov	sp, r7
 80001a2:	bc80      	pop	{r7}
 80001a4:	4770      	bx	lr
 80001a6:	bf00      	nop
 80001a8:	20000078 	.word	0x20000078

080001ac <subKey2Process>:
void subKey2Process(){
 80001ac:	b480      	push	{r7}
 80001ae:	af00      	add	r7, sp, #0
	button2_flag = 1;
 80001b0:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <subKey2Process+0x14>)
 80001b2:	2201      	movs	r2, #1
 80001b4:	601a      	str	r2, [r3, #0]
}
 80001b6:	bf00      	nop
 80001b8:	46bd      	mov	sp, r7
 80001ba:	bc80      	pop	{r7}
 80001bc:	4770      	bx	lr
 80001be:	bf00      	nop
 80001c0:	2000007c 	.word	0x2000007c

080001c4 <subKey3Process>:
void subKey3Process(){
 80001c4:	b480      	push	{r7}
 80001c6:	af00      	add	r7, sp, #0
	button3_flag = 1;
 80001c8:	4b03      	ldr	r3, [pc, #12]	; (80001d8 <subKey3Process+0x14>)
 80001ca:	2201      	movs	r2, #1
 80001cc:	601a      	str	r2, [r3, #0]
}
 80001ce:	bf00      	nop
 80001d0:	46bd      	mov	sp, r7
 80001d2:	bc80      	pop	{r7}
 80001d4:	4770      	bx	lr
 80001d6:	bf00      	nop
 80001d8:	20000080 	.word	0x20000080

080001dc <getKey1Input>:
void getKey1Input(){
 80001dc:	b580      	push	{r7, lr}
 80001de:	af00      	add	r7, sp, #0
	Key1Reg0 = Key1Reg1;
 80001e0:	4b1f      	ldr	r3, [pc, #124]	; (8000260 <getKey1Input+0x84>)
 80001e2:	681b      	ldr	r3, [r3, #0]
 80001e4:	4a1f      	ldr	r2, [pc, #124]	; (8000264 <getKey1Input+0x88>)
 80001e6:	6013      	str	r3, [r2, #0]
	Key1Reg1 = Key1Reg2;
 80001e8:	4b1f      	ldr	r3, [pc, #124]	; (8000268 <getKey1Input+0x8c>)
 80001ea:	681b      	ldr	r3, [r3, #0]
 80001ec:	4a1c      	ldr	r2, [pc, #112]	; (8000260 <getKey1Input+0x84>)
 80001ee:	6013      	str	r3, [r2, #0]
	Key1Reg2 = HAL_GPIO_ReadPin(Button1_GPIO_Port, Button1_Pin);
 80001f0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001f4:	481d      	ldr	r0, [pc, #116]	; (800026c <getKey1Input+0x90>)
 80001f6:	f001 fd3d 	bl	8001c74 <HAL_GPIO_ReadPin>
 80001fa:	4603      	mov	r3, r0
 80001fc:	461a      	mov	r2, r3
 80001fe:	4b1a      	ldr	r3, [pc, #104]	; (8000268 <getKey1Input+0x8c>)
 8000200:	601a      	str	r2, [r3, #0]
	if((Key1Reg0 == Key1Reg1) && (Key1Reg1 == Key1Reg2)){
 8000202:	4b18      	ldr	r3, [pc, #96]	; (8000264 <getKey1Input+0x88>)
 8000204:	681a      	ldr	r2, [r3, #0]
 8000206:	4b16      	ldr	r3, [pc, #88]	; (8000260 <getKey1Input+0x84>)
 8000208:	681b      	ldr	r3, [r3, #0]
 800020a:	429a      	cmp	r2, r3
 800020c:	d126      	bne.n	800025c <getKey1Input+0x80>
 800020e:	4b14      	ldr	r3, [pc, #80]	; (8000260 <getKey1Input+0x84>)
 8000210:	681a      	ldr	r2, [r3, #0]
 8000212:	4b15      	ldr	r3, [pc, #84]	; (8000268 <getKey1Input+0x8c>)
 8000214:	681b      	ldr	r3, [r3, #0]
 8000216:	429a      	cmp	r2, r3
 8000218:	d120      	bne.n	800025c <getKey1Input+0x80>
		if(Key1Reg3 != Key1Reg2){
 800021a:	4b15      	ldr	r3, [pc, #84]	; (8000270 <getKey1Input+0x94>)
 800021c:	681a      	ldr	r2, [r3, #0]
 800021e:	4b12      	ldr	r3, [pc, #72]	; (8000268 <getKey1Input+0x8c>)
 8000220:	681b      	ldr	r3, [r3, #0]
 8000222:	429a      	cmp	r2, r3
 8000224:	d00e      	beq.n	8000244 <getKey1Input+0x68>
			Key1Reg3 = Key1Reg2;
 8000226:	4b10      	ldr	r3, [pc, #64]	; (8000268 <getKey1Input+0x8c>)
 8000228:	681b      	ldr	r3, [r3, #0]
 800022a:	4a11      	ldr	r2, [pc, #68]	; (8000270 <getKey1Input+0x94>)
 800022c:	6013      	str	r3, [r2, #0]
			if(Key1Reg2 == PRESSED_STATE){
 800022e:	4b0e      	ldr	r3, [pc, #56]	; (8000268 <getKey1Input+0x8c>)
 8000230:	681b      	ldr	r3, [r3, #0]
 8000232:	2b00      	cmp	r3, #0
 8000234:	d112      	bne.n	800025c <getKey1Input+0x80>
				TimerForKey1Press = 300;
 8000236:	4b0f      	ldr	r3, [pc, #60]	; (8000274 <getKey1Input+0x98>)
 8000238:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800023c:	601a      	str	r2, [r3, #0]
				subKey1Process();
 800023e:	f7ff ffa9 	bl	8000194 <subKey1Process>
			if(TimerForKey1Press == 0){
				Key1Reg3 = NORMAL_STATE;
			}
		}
	}
}
 8000242:	e00b      	b.n	800025c <getKey1Input+0x80>
			TimerForKey1Press--;
 8000244:	4b0b      	ldr	r3, [pc, #44]	; (8000274 <getKey1Input+0x98>)
 8000246:	681b      	ldr	r3, [r3, #0]
 8000248:	3b01      	subs	r3, #1
 800024a:	4a0a      	ldr	r2, [pc, #40]	; (8000274 <getKey1Input+0x98>)
 800024c:	6013      	str	r3, [r2, #0]
			if(TimerForKey1Press == 0){
 800024e:	4b09      	ldr	r3, [pc, #36]	; (8000274 <getKey1Input+0x98>)
 8000250:	681b      	ldr	r3, [r3, #0]
 8000252:	2b00      	cmp	r3, #0
 8000254:	d102      	bne.n	800025c <getKey1Input+0x80>
				Key1Reg3 = NORMAL_STATE;
 8000256:	4b06      	ldr	r3, [pc, #24]	; (8000270 <getKey1Input+0x94>)
 8000258:	2201      	movs	r2, #1
 800025a:	601a      	str	r2, [r3, #0]
}
 800025c:	bf00      	nop
 800025e:	bd80      	pop	{r7, pc}
 8000260:	20000004 	.word	0x20000004
 8000264:	20000000 	.word	0x20000000
 8000268:	20000008 	.word	0x20000008
 800026c:	40011000 	.word	0x40011000
 8000270:	2000000c 	.word	0x2000000c
 8000274:	20000030 	.word	0x20000030

08000278 <getKey2Input>:
void getKey2Input(){
 8000278:	b580      	push	{r7, lr}
 800027a:	af00      	add	r7, sp, #0
	Key2Reg0 = Key2Reg1;
 800027c:	4b1f      	ldr	r3, [pc, #124]	; (80002fc <getKey2Input+0x84>)
 800027e:	681b      	ldr	r3, [r3, #0]
 8000280:	4a1f      	ldr	r2, [pc, #124]	; (8000300 <getKey2Input+0x88>)
 8000282:	6013      	str	r3, [r2, #0]
	Key2Reg1 = Key2Reg2;
 8000284:	4b1f      	ldr	r3, [pc, #124]	; (8000304 <getKey2Input+0x8c>)
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	4a1c      	ldr	r2, [pc, #112]	; (80002fc <getKey2Input+0x84>)
 800028a:	6013      	str	r3, [r2, #0]
	Key2Reg2 = HAL_GPIO_ReadPin(Button2_GPIO_Port, Button2_Pin);
 800028c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000290:	481d      	ldr	r0, [pc, #116]	; (8000308 <getKey2Input+0x90>)
 8000292:	f001 fcef 	bl	8001c74 <HAL_GPIO_ReadPin>
 8000296:	4603      	mov	r3, r0
 8000298:	461a      	mov	r2, r3
 800029a:	4b1a      	ldr	r3, [pc, #104]	; (8000304 <getKey2Input+0x8c>)
 800029c:	601a      	str	r2, [r3, #0]
	if((Key2Reg0 == Key2Reg1) && (Key2Reg1 == Key2Reg2)){
 800029e:	4b18      	ldr	r3, [pc, #96]	; (8000300 <getKey2Input+0x88>)
 80002a0:	681a      	ldr	r2, [r3, #0]
 80002a2:	4b16      	ldr	r3, [pc, #88]	; (80002fc <getKey2Input+0x84>)
 80002a4:	681b      	ldr	r3, [r3, #0]
 80002a6:	429a      	cmp	r2, r3
 80002a8:	d126      	bne.n	80002f8 <getKey2Input+0x80>
 80002aa:	4b14      	ldr	r3, [pc, #80]	; (80002fc <getKey2Input+0x84>)
 80002ac:	681a      	ldr	r2, [r3, #0]
 80002ae:	4b15      	ldr	r3, [pc, #84]	; (8000304 <getKey2Input+0x8c>)
 80002b0:	681b      	ldr	r3, [r3, #0]
 80002b2:	429a      	cmp	r2, r3
 80002b4:	d120      	bne.n	80002f8 <getKey2Input+0x80>
		if(Key2Reg3 != Key2Reg2){
 80002b6:	4b15      	ldr	r3, [pc, #84]	; (800030c <getKey2Input+0x94>)
 80002b8:	681a      	ldr	r2, [r3, #0]
 80002ba:	4b12      	ldr	r3, [pc, #72]	; (8000304 <getKey2Input+0x8c>)
 80002bc:	681b      	ldr	r3, [r3, #0]
 80002be:	429a      	cmp	r2, r3
 80002c0:	d00e      	beq.n	80002e0 <getKey2Input+0x68>
			Key2Reg3 = Key2Reg2;
 80002c2:	4b10      	ldr	r3, [pc, #64]	; (8000304 <getKey2Input+0x8c>)
 80002c4:	681b      	ldr	r3, [r3, #0]
 80002c6:	4a11      	ldr	r2, [pc, #68]	; (800030c <getKey2Input+0x94>)
 80002c8:	6013      	str	r3, [r2, #0]
			if(Key2Reg2 == PRESSED_STATE){
 80002ca:	4b0e      	ldr	r3, [pc, #56]	; (8000304 <getKey2Input+0x8c>)
 80002cc:	681b      	ldr	r3, [r3, #0]
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	d112      	bne.n	80002f8 <getKey2Input+0x80>
				TimerForKey2Press = 300;
 80002d2:	4b0f      	ldr	r3, [pc, #60]	; (8000310 <getKey2Input+0x98>)
 80002d4:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80002d8:	601a      	str	r2, [r3, #0]
				subKey2Process();
 80002da:	f7ff ff67 	bl	80001ac <subKey2Process>
			if(TimerForKey2Press == 0){
				Key2Reg3 = NORMAL_STATE;
			}
		}
	}
}
 80002de:	e00b      	b.n	80002f8 <getKey2Input+0x80>
			TimerForKey2Press--;
 80002e0:	4b0b      	ldr	r3, [pc, #44]	; (8000310 <getKey2Input+0x98>)
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	3b01      	subs	r3, #1
 80002e6:	4a0a      	ldr	r2, [pc, #40]	; (8000310 <getKey2Input+0x98>)
 80002e8:	6013      	str	r3, [r2, #0]
			if(TimerForKey2Press == 0){
 80002ea:	4b09      	ldr	r3, [pc, #36]	; (8000310 <getKey2Input+0x98>)
 80002ec:	681b      	ldr	r3, [r3, #0]
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d102      	bne.n	80002f8 <getKey2Input+0x80>
				Key2Reg3 = NORMAL_STATE;
 80002f2:	4b06      	ldr	r3, [pc, #24]	; (800030c <getKey2Input+0x94>)
 80002f4:	2201      	movs	r2, #1
 80002f6:	601a      	str	r2, [r3, #0]
}
 80002f8:	bf00      	nop
 80002fa:	bd80      	pop	{r7, pc}
 80002fc:	20000014 	.word	0x20000014
 8000300:	20000010 	.word	0x20000010
 8000304:	20000018 	.word	0x20000018
 8000308:	40011000 	.word	0x40011000
 800030c:	2000001c 	.word	0x2000001c
 8000310:	20000034 	.word	0x20000034

08000314 <getKey3Input>:
void getKey3Input(){
 8000314:	b580      	push	{r7, lr}
 8000316:	af00      	add	r7, sp, #0
	Key3Reg0 = Key3Reg1;
 8000318:	4b1f      	ldr	r3, [pc, #124]	; (8000398 <getKey3Input+0x84>)
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	4a1f      	ldr	r2, [pc, #124]	; (800039c <getKey3Input+0x88>)
 800031e:	6013      	str	r3, [r2, #0]
	Key3Reg1 = Key3Reg2;
 8000320:	4b1f      	ldr	r3, [pc, #124]	; (80003a0 <getKey3Input+0x8c>)
 8000322:	681b      	ldr	r3, [r3, #0]
 8000324:	4a1c      	ldr	r2, [pc, #112]	; (8000398 <getKey3Input+0x84>)
 8000326:	6013      	str	r3, [r2, #0]
	Key3Reg2 = HAL_GPIO_ReadPin(Button3_GPIO_Port, Button3_Pin);
 8000328:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800032c:	481d      	ldr	r0, [pc, #116]	; (80003a4 <getKey3Input+0x90>)
 800032e:	f001 fca1 	bl	8001c74 <HAL_GPIO_ReadPin>
 8000332:	4603      	mov	r3, r0
 8000334:	461a      	mov	r2, r3
 8000336:	4b1a      	ldr	r3, [pc, #104]	; (80003a0 <getKey3Input+0x8c>)
 8000338:	601a      	str	r2, [r3, #0]
	if((Key3Reg0 == Key3Reg1) && (Key3Reg1 == Key3Reg2)){
 800033a:	4b18      	ldr	r3, [pc, #96]	; (800039c <getKey3Input+0x88>)
 800033c:	681a      	ldr	r2, [r3, #0]
 800033e:	4b16      	ldr	r3, [pc, #88]	; (8000398 <getKey3Input+0x84>)
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	429a      	cmp	r2, r3
 8000344:	d126      	bne.n	8000394 <getKey3Input+0x80>
 8000346:	4b14      	ldr	r3, [pc, #80]	; (8000398 <getKey3Input+0x84>)
 8000348:	681a      	ldr	r2, [r3, #0]
 800034a:	4b15      	ldr	r3, [pc, #84]	; (80003a0 <getKey3Input+0x8c>)
 800034c:	681b      	ldr	r3, [r3, #0]
 800034e:	429a      	cmp	r2, r3
 8000350:	d120      	bne.n	8000394 <getKey3Input+0x80>
		if(Key3Reg3 != Key3Reg2){
 8000352:	4b15      	ldr	r3, [pc, #84]	; (80003a8 <getKey3Input+0x94>)
 8000354:	681a      	ldr	r2, [r3, #0]
 8000356:	4b12      	ldr	r3, [pc, #72]	; (80003a0 <getKey3Input+0x8c>)
 8000358:	681b      	ldr	r3, [r3, #0]
 800035a:	429a      	cmp	r2, r3
 800035c:	d00e      	beq.n	800037c <getKey3Input+0x68>
			Key3Reg3 = Key3Reg2;
 800035e:	4b10      	ldr	r3, [pc, #64]	; (80003a0 <getKey3Input+0x8c>)
 8000360:	681b      	ldr	r3, [r3, #0]
 8000362:	4a11      	ldr	r2, [pc, #68]	; (80003a8 <getKey3Input+0x94>)
 8000364:	6013      	str	r3, [r2, #0]
			if(Key3Reg2 == PRESSED_STATE){
 8000366:	4b0e      	ldr	r3, [pc, #56]	; (80003a0 <getKey3Input+0x8c>)
 8000368:	681b      	ldr	r3, [r3, #0]
 800036a:	2b00      	cmp	r3, #0
 800036c:	d112      	bne.n	8000394 <getKey3Input+0x80>
				TimerForKey3Press = 300;
 800036e:	4b0f      	ldr	r3, [pc, #60]	; (80003ac <getKey3Input+0x98>)
 8000370:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000374:	601a      	str	r2, [r3, #0]
				subKey3Process();
 8000376:	f7ff ff25 	bl	80001c4 <subKey3Process>
			if(TimerForKey3Press == 0){
				Key3Reg3 = NORMAL_STATE;
			}
		}
	}
}
 800037a:	e00b      	b.n	8000394 <getKey3Input+0x80>
			TimerForKey3Press--;
 800037c:	4b0b      	ldr	r3, [pc, #44]	; (80003ac <getKey3Input+0x98>)
 800037e:	681b      	ldr	r3, [r3, #0]
 8000380:	3b01      	subs	r3, #1
 8000382:	4a0a      	ldr	r2, [pc, #40]	; (80003ac <getKey3Input+0x98>)
 8000384:	6013      	str	r3, [r2, #0]
			if(TimerForKey3Press == 0){
 8000386:	4b09      	ldr	r3, [pc, #36]	; (80003ac <getKey3Input+0x98>)
 8000388:	681b      	ldr	r3, [r3, #0]
 800038a:	2b00      	cmp	r3, #0
 800038c:	d102      	bne.n	8000394 <getKey3Input+0x80>
				Key3Reg3 = NORMAL_STATE;
 800038e:	4b06      	ldr	r3, [pc, #24]	; (80003a8 <getKey3Input+0x94>)
 8000390:	2201      	movs	r2, #1
 8000392:	601a      	str	r2, [r3, #0]
}
 8000394:	bf00      	nop
 8000396:	bd80      	pop	{r7, pc}
 8000398:	20000024 	.word	0x20000024
 800039c:	20000020 	.word	0x20000020
 80003a0:	20000028 	.word	0x20000028
 80003a4:	40011000 	.word	0x40011000
 80003a8:	2000002c 	.word	0x2000002c
 80003ac:	20000038 	.word	0x20000038

080003b0 <changeMode>:

void changeMode(){
 80003b0:	b580      	push	{r7, lr}
 80003b2:	af00      	add	r7, sp, #0
	switch(mode){
 80003b4:	4b98      	ldr	r3, [pc, #608]	; (8000618 <changeMode+0x268>)
 80003b6:	681b      	ldr	r3, [r3, #0]
 80003b8:	3b08      	subs	r3, #8
 80003ba:	2b03      	cmp	r3, #3
 80003bc:	f200 8121 	bhi.w	8000602 <changeMode+0x252>
 80003c0:	a201      	add	r2, pc, #4	; (adr r2, 80003c8 <changeMode+0x18>)
 80003c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003c6:	bf00      	nop
 80003c8:	080003d9 	.word	0x080003d9
 80003cc:	080003f9 	.word	0x080003f9
 80003d0:	080004ab 	.word	0x080004ab
 80003d4:	0800055b 	.word	0x0800055b
	case MODE_1:
		fsm_automatic_run();
 80003d8:	f000 f92c 	bl	8000634 <fsm_automatic_run>
		if(isButton1Pressed()==1){
 80003dc:	f7ff feb6 	bl	800014c <isButton1Pressed>
 80003e0:	4603      	mov	r3, r0
 80003e2:	2b01      	cmp	r3, #1
 80003e4:	f040 810f 	bne.w	8000606 <changeMode+0x256>
			mode = MODE_2;
 80003e8:	4b8b      	ldr	r3, [pc, #556]	; (8000618 <changeMode+0x268>)
 80003ea:	2209      	movs	r2, #9
 80003ec:	601a      	str	r2, [r3, #0]
			setTimer2(500);
 80003ee:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80003f2:	f000 fffd 	bl	80013f0 <setTimer2>
		}
		break;
 80003f6:	e106      	b.n	8000606 <changeMode+0x256>
	case MODE_2:
		if(timer2_flag==1){
 80003f8:	4b88      	ldr	r3, [pc, #544]	; (800061c <changeMode+0x26c>)
 80003fa:	681b      	ldr	r3, [r3, #0]
 80003fc:	2b01      	cmp	r3, #1
 80003fe:	d120      	bne.n	8000442 <changeMode+0x92>
			HAL_GPIO_TogglePin(RED1_GPIO_Port, RED1_Pin);
 8000400:	2108      	movs	r1, #8
 8000402:	4887      	ldr	r0, [pc, #540]	; (8000620 <changeMode+0x270>)
 8000404:	f001 fc65 	bl	8001cd2 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(RED2_GPIO_Port, RED2_Pin);
 8000408:	2140      	movs	r1, #64	; 0x40
 800040a:	4885      	ldr	r0, [pc, #532]	; (8000620 <changeMode+0x270>)
 800040c:	f001 fc61 	bl	8001cd2 <HAL_GPIO_TogglePin>

			HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin, SET);
 8000410:	2201      	movs	r2, #1
 8000412:	2110      	movs	r1, #16
 8000414:	4882      	ldr	r0, [pc, #520]	; (8000620 <changeMode+0x270>)
 8000416:	f001 fc44 	bl	8001ca2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, SET);
 800041a:	2201      	movs	r2, #1
 800041c:	2120      	movs	r1, #32
 800041e:	4880      	ldr	r0, [pc, #512]	; (8000620 <changeMode+0x270>)
 8000420:	f001 fc3f 	bl	8001ca2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(YELLOW2_GPIO_Port, YELLOW2_Pin, SET);
 8000424:	2201      	movs	r2, #1
 8000426:	2180      	movs	r1, #128	; 0x80
 8000428:	487d      	ldr	r0, [pc, #500]	; (8000620 <changeMode+0x270>)
 800042a:	f001 fc3a 	bl	8001ca2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin, SET);
 800042e:	2201      	movs	r2, #1
 8000430:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000434:	487a      	ldr	r0, [pc, #488]	; (8000620 <changeMode+0x270>)
 8000436:	f001 fc34 	bl	8001ca2 <HAL_GPIO_WritePin>
			setTimer2(500);
 800043a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800043e:	f000 ffd7 	bl	80013f0 <setTimer2>
		}
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, RESET);
 8000442:	2200      	movs	r2, #0
 8000444:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000448:	4875      	ldr	r0, [pc, #468]	; (8000620 <changeMode+0x270>)
 800044a:	f001 fc2a 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 800044e:	2201      	movs	r2, #1
 8000450:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000454:	4872      	ldr	r0, [pc, #456]	; (8000620 <changeMode+0x270>)
 8000456:	f001 fc24 	bl	8001ca2 <HAL_GPIO_WritePin>
		display7SEG1(2);
 800045a:	2002      	movs	r0, #2
 800045c:	f000 fa5c 	bl	8000918 <display7SEG1>
		if(isButton2Pressed()==1){
 8000460:	f7ff fe86 	bl	8000170 <isButton2Pressed>
 8000464:	4603      	mov	r3, r0
 8000466:	2b01      	cmp	r3, #1
 8000468:	d104      	bne.n	8000474 <changeMode+0xc4>
			red_count++;
 800046a:	4b6e      	ldr	r3, [pc, #440]	; (8000624 <changeMode+0x274>)
 800046c:	681b      	ldr	r3, [r3, #0]
 800046e:	3301      	adds	r3, #1
 8000470:	4a6c      	ldr	r2, [pc, #432]	; (8000624 <changeMode+0x274>)
 8000472:	6013      	str	r3, [r2, #0]
		}
		if(timer4_flag==1){
 8000474:	4b6c      	ldr	r3, [pc, #432]	; (8000628 <changeMode+0x278>)
 8000476:	681b      	ldr	r3, [r3, #0]
 8000478:	2b01      	cmp	r3, #1
 800047a:	d108      	bne.n	800048e <changeMode+0xde>
			update7SEG2(red_count);
 800047c:	4b69      	ldr	r3, [pc, #420]	; (8000624 <changeMode+0x274>)
 800047e:	681b      	ldr	r3, [r3, #0]
 8000480:	4618      	mov	r0, r3
 8000482:	f000 fe1d 	bl	80010c0 <update7SEG2>
			setTimer4(500);
 8000486:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800048a:	f000 ffe5 	bl	8001458 <setTimer4>
		}
		if(isButton1Pressed()==1){
 800048e:	f7ff fe5d 	bl	800014c <isButton1Pressed>
 8000492:	4603      	mov	r3, r0
 8000494:	2b01      	cmp	r3, #1
 8000496:	f040 80b8 	bne.w	800060a <changeMode+0x25a>
			setTimer2(500);
 800049a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800049e:	f000 ffa7 	bl	80013f0 <setTimer2>
			mode = MODE_3;
 80004a2:	4b5d      	ldr	r3, [pc, #372]	; (8000618 <changeMode+0x268>)
 80004a4:	220a      	movs	r2, #10
 80004a6:	601a      	str	r2, [r3, #0]
		}
		break;
 80004a8:	e0af      	b.n	800060a <changeMode+0x25a>
	case MODE_3:
		if(timer2_flag==1){
 80004aa:	4b5c      	ldr	r3, [pc, #368]	; (800061c <changeMode+0x26c>)
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	2b01      	cmp	r3, #1
 80004b0:	d120      	bne.n	80004f4 <changeMode+0x144>
			HAL_GPIO_TogglePin(YELLOW1_GPIO_Port, YELLOW1_Pin);
 80004b2:	2110      	movs	r1, #16
 80004b4:	485a      	ldr	r0, [pc, #360]	; (8000620 <changeMode+0x270>)
 80004b6:	f001 fc0c 	bl	8001cd2 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(YELLOW2_GPIO_Port, YELLOW2_Pin);
 80004ba:	2180      	movs	r1, #128	; 0x80
 80004bc:	4858      	ldr	r0, [pc, #352]	; (8000620 <changeMode+0x270>)
 80004be:	f001 fc08 	bl	8001cd2 <HAL_GPIO_TogglePin>

			HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, SET);
 80004c2:	2201      	movs	r2, #1
 80004c4:	2108      	movs	r1, #8
 80004c6:	4856      	ldr	r0, [pc, #344]	; (8000620 <changeMode+0x270>)
 80004c8:	f001 fbeb 	bl	8001ca2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, SET);
 80004cc:	2201      	movs	r2, #1
 80004ce:	2120      	movs	r1, #32
 80004d0:	4853      	ldr	r0, [pc, #332]	; (8000620 <changeMode+0x270>)
 80004d2:	f001 fbe6 	bl	8001ca2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, SET);
 80004d6:	2201      	movs	r2, #1
 80004d8:	2140      	movs	r1, #64	; 0x40
 80004da:	4851      	ldr	r0, [pc, #324]	; (8000620 <changeMode+0x270>)
 80004dc:	f001 fbe1 	bl	8001ca2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin, SET);
 80004e0:	2201      	movs	r2, #1
 80004e2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004e6:	484e      	ldr	r0, [pc, #312]	; (8000620 <changeMode+0x270>)
 80004e8:	f001 fbdb 	bl	8001ca2 <HAL_GPIO_WritePin>
			setTimer2(500);
 80004ec:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80004f0:	f000 ff7e 	bl	80013f0 <setTimer2>
		}
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, RESET);
 80004f4:	2200      	movs	r2, #0
 80004f6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004fa:	4849      	ldr	r0, [pc, #292]	; (8000620 <changeMode+0x270>)
 80004fc:	f001 fbd1 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 8000500:	2201      	movs	r2, #1
 8000502:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000506:	4846      	ldr	r0, [pc, #280]	; (8000620 <changeMode+0x270>)
 8000508:	f001 fbcb 	bl	8001ca2 <HAL_GPIO_WritePin>
		display7SEG1(3);
 800050c:	2003      	movs	r0, #3
 800050e:	f000 fa03 	bl	8000918 <display7SEG1>
		if(isButton2Pressed()==1){
 8000512:	f7ff fe2d 	bl	8000170 <isButton2Pressed>
 8000516:	4603      	mov	r3, r0
 8000518:	2b01      	cmp	r3, #1
 800051a:	d104      	bne.n	8000526 <changeMode+0x176>
			yellow_count++;
 800051c:	4b43      	ldr	r3, [pc, #268]	; (800062c <changeMode+0x27c>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	3301      	adds	r3, #1
 8000522:	4a42      	ldr	r2, [pc, #264]	; (800062c <changeMode+0x27c>)
 8000524:	6013      	str	r3, [r2, #0]
		}
		if(timer4_flag==1){
 8000526:	4b40      	ldr	r3, [pc, #256]	; (8000628 <changeMode+0x278>)
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	2b01      	cmp	r3, #1
 800052c:	d108      	bne.n	8000540 <changeMode+0x190>
			update7SEG2(yellow_count);
 800052e:	4b3f      	ldr	r3, [pc, #252]	; (800062c <changeMode+0x27c>)
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	4618      	mov	r0, r3
 8000534:	f000 fdc4 	bl	80010c0 <update7SEG2>
			setTimer4(500);
 8000538:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800053c:	f000 ff8c 	bl	8001458 <setTimer4>
		}
		if(isButton1Pressed()==1){
 8000540:	f7ff fe04 	bl	800014c <isButton1Pressed>
 8000544:	4603      	mov	r3, r0
 8000546:	2b01      	cmp	r3, #1
 8000548:	d161      	bne.n	800060e <changeMode+0x25e>
			setTimer2(500);
 800054a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800054e:	f000 ff4f 	bl	80013f0 <setTimer2>
			mode = MODE_4;
 8000552:	4b31      	ldr	r3, [pc, #196]	; (8000618 <changeMode+0x268>)
 8000554:	220b      	movs	r2, #11
 8000556:	601a      	str	r2, [r3, #0]
		}
		break;
 8000558:	e059      	b.n	800060e <changeMode+0x25e>
	case MODE_4:
		if(timer2_flag==1){
 800055a:	4b30      	ldr	r3, [pc, #192]	; (800061c <changeMode+0x26c>)
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	2b01      	cmp	r3, #1
 8000560:	d120      	bne.n	80005a4 <changeMode+0x1f4>
			HAL_GPIO_TogglePin(GREEN1_GPIO_Port, GREEN1_Pin);
 8000562:	2120      	movs	r1, #32
 8000564:	482e      	ldr	r0, [pc, #184]	; (8000620 <changeMode+0x270>)
 8000566:	f001 fbb4 	bl	8001cd2 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GREEN2_GPIO_Port, GREEN2_Pin);
 800056a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800056e:	482c      	ldr	r0, [pc, #176]	; (8000620 <changeMode+0x270>)
 8000570:	f001 fbaf 	bl	8001cd2 <HAL_GPIO_TogglePin>

			HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, SET);
 8000574:	2201      	movs	r2, #1
 8000576:	2108      	movs	r1, #8
 8000578:	4829      	ldr	r0, [pc, #164]	; (8000620 <changeMode+0x270>)
 800057a:	f001 fb92 	bl	8001ca2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin, SET);
 800057e:	2201      	movs	r2, #1
 8000580:	2110      	movs	r1, #16
 8000582:	4827      	ldr	r0, [pc, #156]	; (8000620 <changeMode+0x270>)
 8000584:	f001 fb8d 	bl	8001ca2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, SET);
 8000588:	2201      	movs	r2, #1
 800058a:	2140      	movs	r1, #64	; 0x40
 800058c:	4824      	ldr	r0, [pc, #144]	; (8000620 <changeMode+0x270>)
 800058e:	f001 fb88 	bl	8001ca2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(YELLOW2_GPIO_Port, YELLOW2_Pin, SET);
 8000592:	2201      	movs	r2, #1
 8000594:	2180      	movs	r1, #128	; 0x80
 8000596:	4822      	ldr	r0, [pc, #136]	; (8000620 <changeMode+0x270>)
 8000598:	f001 fb83 	bl	8001ca2 <HAL_GPIO_WritePin>
			setTimer2(500);
 800059c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80005a0:	f000 ff26 	bl	80013f0 <setTimer2>
		}
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, RESET);
 80005a4:	2200      	movs	r2, #0
 80005a6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005aa:	481d      	ldr	r0, [pc, #116]	; (8000620 <changeMode+0x270>)
 80005ac:	f001 fb79 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 80005b0:	2201      	movs	r2, #1
 80005b2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005b6:	481a      	ldr	r0, [pc, #104]	; (8000620 <changeMode+0x270>)
 80005b8:	f001 fb73 	bl	8001ca2 <HAL_GPIO_WritePin>
		display7SEG1(4);
 80005bc:	2004      	movs	r0, #4
 80005be:	f000 f9ab 	bl	8000918 <display7SEG1>
		if(isButton2Pressed()==1){
 80005c2:	f7ff fdd5 	bl	8000170 <isButton2Pressed>
 80005c6:	4603      	mov	r3, r0
 80005c8:	2b01      	cmp	r3, #1
 80005ca:	d104      	bne.n	80005d6 <changeMode+0x226>
			green_count++;
 80005cc:	4b18      	ldr	r3, [pc, #96]	; (8000630 <changeMode+0x280>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	3301      	adds	r3, #1
 80005d2:	4a17      	ldr	r2, [pc, #92]	; (8000630 <changeMode+0x280>)
 80005d4:	6013      	str	r3, [r2, #0]
		}
		if(timer4_flag==1){
 80005d6:	4b14      	ldr	r3, [pc, #80]	; (8000628 <changeMode+0x278>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	2b01      	cmp	r3, #1
 80005dc:	d108      	bne.n	80005f0 <changeMode+0x240>
			update7SEG2(green_count);
 80005de:	4b14      	ldr	r3, [pc, #80]	; (8000630 <changeMode+0x280>)
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	4618      	mov	r0, r3
 80005e4:	f000 fd6c 	bl	80010c0 <update7SEG2>
			setTimer4(500);
 80005e8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80005ec:	f000 ff34 	bl	8001458 <setTimer4>
		}
		if(isButton1Pressed()==1){
 80005f0:	f7ff fdac 	bl	800014c <isButton1Pressed>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b01      	cmp	r3, #1
 80005f8:	d10b      	bne.n	8000612 <changeMode+0x262>
			mode = MODE_1;
 80005fa:	4b07      	ldr	r3, [pc, #28]	; (8000618 <changeMode+0x268>)
 80005fc:	2208      	movs	r2, #8
 80005fe:	601a      	str	r2, [r3, #0]
		}
		break;
 8000600:	e007      	b.n	8000612 <changeMode+0x262>
	default:
		break;
 8000602:	bf00      	nop
 8000604:	e006      	b.n	8000614 <changeMode+0x264>
		break;
 8000606:	bf00      	nop
 8000608:	e004      	b.n	8000614 <changeMode+0x264>
		break;
 800060a:	bf00      	nop
 800060c:	e002      	b.n	8000614 <changeMode+0x264>
		break;
 800060e:	bf00      	nop
 8000610:	e000      	b.n	8000614 <changeMode+0x264>
		break;
 8000612:	bf00      	nop
	}
}
 8000614:	bf00      	nop
 8000616:	bd80      	pop	{r7, pc}
 8000618:	2000003c 	.word	0x2000003c
 800061c:	200000a8 	.word	0x200000a8
 8000620:	40010800 	.word	0x40010800
 8000624:	20000040 	.word	0x20000040
 8000628:	200000b8 	.word	0x200000b8
 800062c:	20000044 	.word	0x20000044
 8000630:	20000048 	.word	0x20000048

08000634 <fsm_automatic_run>:

int temp = 0;
int temp_red = 0;
int temp_yellow = 0;
int temp_green = 0;
void fsm_automatic_run(){
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
	switch(status){
 8000638:	4bab      	ldr	r3, [pc, #684]	; (80008e8 <fsm_automatic_run+0x2b4>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	3b01      	subs	r3, #1
 800063e:	2b03      	cmp	r3, #3
 8000640:	f200 8149 	bhi.w	80008d6 <fsm_automatic_run+0x2a2>
 8000644:	a201      	add	r2, pc, #4	; (adr r2, 800064c <fsm_automatic_run+0x18>)
 8000646:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800064a:	bf00      	nop
 800064c:	0800065d 	.word	0x0800065d
 8000650:	080006bd 	.word	0x080006bd
 8000654:	08000761 	.word	0x08000761
 8000658:	08000835 	.word	0x08000835
	case INIT:
		HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, SET);
 800065c:	2201      	movs	r2, #1
 800065e:	2108      	movs	r1, #8
 8000660:	48a2      	ldr	r0, [pc, #648]	; (80008ec <fsm_automatic_run+0x2b8>)
 8000662:	f001 fb1e 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin, SET);
 8000666:	2201      	movs	r2, #1
 8000668:	2110      	movs	r1, #16
 800066a:	48a0      	ldr	r0, [pc, #640]	; (80008ec <fsm_automatic_run+0x2b8>)
 800066c:	f001 fb19 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, SET);
 8000670:	2201      	movs	r2, #1
 8000672:	2120      	movs	r1, #32
 8000674:	489d      	ldr	r0, [pc, #628]	; (80008ec <fsm_automatic_run+0x2b8>)
 8000676:	f001 fb14 	bl	8001ca2 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, SET);
 800067a:	2201      	movs	r2, #1
 800067c:	2140      	movs	r1, #64	; 0x40
 800067e:	489b      	ldr	r0, [pc, #620]	; (80008ec <fsm_automatic_run+0x2b8>)
 8000680:	f001 fb0f 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(YELLOW2_GPIO_Port, YELLOW2_Pin, SET);
 8000684:	2201      	movs	r2, #1
 8000686:	2180      	movs	r1, #128	; 0x80
 8000688:	4898      	ldr	r0, [pc, #608]	; (80008ec <fsm_automatic_run+0x2b8>)
 800068a:	f001 fb0a 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin, SET);
 800068e:	2201      	movs	r2, #1
 8000690:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000694:	4895      	ldr	r0, [pc, #596]	; (80008ec <fsm_automatic_run+0x2b8>)
 8000696:	f001 fb04 	bl	8001ca2 <HAL_GPIO_WritePin>


		status = AUTO_RED;
 800069a:	4b93      	ldr	r3, [pc, #588]	; (80008e8 <fsm_automatic_run+0x2b4>)
 800069c:	2202      	movs	r2, #2
 800069e:	601a      	str	r2, [r3, #0]
		temp_red = red_count;
 80006a0:	4b93      	ldr	r3, [pc, #588]	; (80008f0 <fsm_automatic_run+0x2bc>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	4a93      	ldr	r2, [pc, #588]	; (80008f4 <fsm_automatic_run+0x2c0>)
 80006a6:	6013      	str	r3, [r2, #0]
		setTimer1(red_count*1000);
 80006a8:	4b91      	ldr	r3, [pc, #580]	; (80008f0 <fsm_automatic_run+0x2bc>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80006b0:	fb02 f303 	mul.w	r3, r2, r3
 80006b4:	4618      	mov	r0, r3
 80006b6:	f000 fe81 	bl	80013bc <setTimer1>
		break;
 80006ba:	e113      	b.n	80008e4 <fsm_automatic_run+0x2b0>
	case AUTO_RED:
		HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, RESET);
 80006bc:	2200      	movs	r2, #0
 80006be:	2108      	movs	r1, #8
 80006c0:	488a      	ldr	r0, [pc, #552]	; (80008ec <fsm_automatic_run+0x2b8>)
 80006c2:	f001 faee 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin, SET);
 80006c6:	2201      	movs	r2, #1
 80006c8:	2110      	movs	r1, #16
 80006ca:	4888      	ldr	r0, [pc, #544]	; (80008ec <fsm_automatic_run+0x2b8>)
 80006cc:	f001 fae9 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, SET);
 80006d0:	2201      	movs	r2, #1
 80006d2:	2120      	movs	r1, #32
 80006d4:	4885      	ldr	r0, [pc, #532]	; (80008ec <fsm_automatic_run+0x2b8>)
 80006d6:	f001 fae4 	bl	8001ca2 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, SET);
 80006da:	2201      	movs	r2, #1
 80006dc:	2140      	movs	r1, #64	; 0x40
 80006de:	4883      	ldr	r0, [pc, #524]	; (80008ec <fsm_automatic_run+0x2b8>)
 80006e0:	f001 fadf 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(YELLOW2_GPIO_Port, YELLOW2_Pin, SET);
 80006e4:	2201      	movs	r2, #1
 80006e6:	2180      	movs	r1, #128	; 0x80
 80006e8:	4880      	ldr	r0, [pc, #512]	; (80008ec <fsm_automatic_run+0x2b8>)
 80006ea:	f001 fada 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin, RESET);
 80006ee:	2200      	movs	r2, #0
 80006f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006f4:	487d      	ldr	r0, [pc, #500]	; (80008ec <fsm_automatic_run+0x2b8>)
 80006f6:	f001 fad4 	bl	8001ca2 <HAL_GPIO_WritePin>
		if(timer4_flag==1){
 80006fa:	4b7f      	ldr	r3, [pc, #508]	; (80008f8 <fsm_automatic_run+0x2c4>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	2b01      	cmp	r3, #1
 8000700:	d115      	bne.n	800072e <fsm_automatic_run+0xfa>
			update7SEG(temp_red);
 8000702:	4b7c      	ldr	r3, [pc, #496]	; (80008f4 <fsm_automatic_run+0x2c0>)
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	4618      	mov	r0, r3
 8000708:	f000 fc6c 	bl	8000fe4 <update7SEG>
			if(timer3_flag==1){
 800070c:	4b7b      	ldr	r3, [pc, #492]	; (80008fc <fsm_automatic_run+0x2c8>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	2b01      	cmp	r3, #1
 8000712:	d108      	bne.n	8000726 <fsm_automatic_run+0xf2>
				temp_red--;
 8000714:	4b77      	ldr	r3, [pc, #476]	; (80008f4 <fsm_automatic_run+0x2c0>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	3b01      	subs	r3, #1
 800071a:	4a76      	ldr	r2, [pc, #472]	; (80008f4 <fsm_automatic_run+0x2c0>)
 800071c:	6013      	str	r3, [r2, #0]
				setTimer3(1000);
 800071e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000722:	f000 fe7f 	bl	8001424 <setTimer3>
			}
			setTimer4(500);
 8000726:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800072a:	f000 fe95 	bl	8001458 <setTimer4>
		}
		if(timer1_flag == 1){
 800072e:	4b74      	ldr	r3, [pc, #464]	; (8000900 <fsm_automatic_run+0x2cc>)
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	2b01      	cmp	r3, #1
 8000734:	f040 80d1 	bne.w	80008da <fsm_automatic_run+0x2a6>
			status = AUTO_YELLOW;
 8000738:	4b6b      	ldr	r3, [pc, #428]	; (80008e8 <fsm_automatic_run+0x2b4>)
 800073a:	2203      	movs	r2, #3
 800073c:	601a      	str	r2, [r3, #0]
			temp = AUTO_RED;
 800073e:	4b71      	ldr	r3, [pc, #452]	; (8000904 <fsm_automatic_run+0x2d0>)
 8000740:	2202      	movs	r2, #2
 8000742:	601a      	str	r2, [r3, #0]
			temp_yellow = yellow_count;
 8000744:	4b70      	ldr	r3, [pc, #448]	; (8000908 <fsm_automatic_run+0x2d4>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	4a70      	ldr	r2, [pc, #448]	; (800090c <fsm_automatic_run+0x2d8>)
 800074a:	6013      	str	r3, [r2, #0]
			setTimer1(yellow_count*1000);
 800074c:	4b6e      	ldr	r3, [pc, #440]	; (8000908 <fsm_automatic_run+0x2d4>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000754:	fb02 f303 	mul.w	r3, r2, r3
 8000758:	4618      	mov	r0, r3
 800075a:	f000 fe2f 	bl	80013bc <setTimer1>
		}
		break;
 800075e:	e0bc      	b.n	80008da <fsm_automatic_run+0x2a6>
	case AUTO_YELLOW:
		HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, SET);
 8000760:	2201      	movs	r2, #1
 8000762:	2108      	movs	r1, #8
 8000764:	4861      	ldr	r0, [pc, #388]	; (80008ec <fsm_automatic_run+0x2b8>)
 8000766:	f001 fa9c 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin, RESET);
 800076a:	2200      	movs	r2, #0
 800076c:	2110      	movs	r1, #16
 800076e:	485f      	ldr	r0, [pc, #380]	; (80008ec <fsm_automatic_run+0x2b8>)
 8000770:	f001 fa97 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, SET);
 8000774:	2201      	movs	r2, #1
 8000776:	2120      	movs	r1, #32
 8000778:	485c      	ldr	r0, [pc, #368]	; (80008ec <fsm_automatic_run+0x2b8>)
 800077a:	f001 fa92 	bl	8001ca2 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, SET);
 800077e:	2201      	movs	r2, #1
 8000780:	2140      	movs	r1, #64	; 0x40
 8000782:	485a      	ldr	r0, [pc, #360]	; (80008ec <fsm_automatic_run+0x2b8>)
 8000784:	f001 fa8d 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(YELLOW2_GPIO_Port, YELLOW2_Pin, RESET);
 8000788:	2200      	movs	r2, #0
 800078a:	2180      	movs	r1, #128	; 0x80
 800078c:	4857      	ldr	r0, [pc, #348]	; (80008ec <fsm_automatic_run+0x2b8>)
 800078e:	f001 fa88 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin, SET);
 8000792:	2201      	movs	r2, #1
 8000794:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000798:	4854      	ldr	r0, [pc, #336]	; (80008ec <fsm_automatic_run+0x2b8>)
 800079a:	f001 fa82 	bl	8001ca2 <HAL_GPIO_WritePin>

		if(timer4_flag==1){
 800079e:	4b56      	ldr	r3, [pc, #344]	; (80008f8 <fsm_automatic_run+0x2c4>)
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	2b01      	cmp	r3, #1
 80007a4:	d115      	bne.n	80007d2 <fsm_automatic_run+0x19e>
			update7SEG(temp_yellow);
 80007a6:	4b59      	ldr	r3, [pc, #356]	; (800090c <fsm_automatic_run+0x2d8>)
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	4618      	mov	r0, r3
 80007ac:	f000 fc1a 	bl	8000fe4 <update7SEG>

			if(timer3_flag==1){
 80007b0:	4b52      	ldr	r3, [pc, #328]	; (80008fc <fsm_automatic_run+0x2c8>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	2b01      	cmp	r3, #1
 80007b6:	d108      	bne.n	80007ca <fsm_automatic_run+0x196>
				temp_yellow--;
 80007b8:	4b54      	ldr	r3, [pc, #336]	; (800090c <fsm_automatic_run+0x2d8>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	3b01      	subs	r3, #1
 80007be:	4a53      	ldr	r2, [pc, #332]	; (800090c <fsm_automatic_run+0x2d8>)
 80007c0:	6013      	str	r3, [r2, #0]
				setTimer3(1000);
 80007c2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007c6:	f000 fe2d 	bl	8001424 <setTimer3>
			}
			setTimer4(500);
 80007ca:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80007ce:	f000 fe43 	bl	8001458 <setTimer4>
		}
		if(timer1_flag == 1 && temp == AUTO_RED){
 80007d2:	4b4b      	ldr	r3, [pc, #300]	; (8000900 <fsm_automatic_run+0x2cc>)
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	2b01      	cmp	r3, #1
 80007d8:	d113      	bne.n	8000802 <fsm_automatic_run+0x1ce>
 80007da:	4b4a      	ldr	r3, [pc, #296]	; (8000904 <fsm_automatic_run+0x2d0>)
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	2b02      	cmp	r3, #2
 80007e0:	d10f      	bne.n	8000802 <fsm_automatic_run+0x1ce>
			status = AUTO_GREEN;
 80007e2:	4b41      	ldr	r3, [pc, #260]	; (80008e8 <fsm_automatic_run+0x2b4>)
 80007e4:	2204      	movs	r2, #4
 80007e6:	601a      	str	r2, [r3, #0]
			temp_green = green_count;
 80007e8:	4b49      	ldr	r3, [pc, #292]	; (8000910 <fsm_automatic_run+0x2dc>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	4a49      	ldr	r2, [pc, #292]	; (8000914 <fsm_automatic_run+0x2e0>)
 80007ee:	6013      	str	r3, [r2, #0]
			setTimer1(green_count*1000);
 80007f0:	4b47      	ldr	r3, [pc, #284]	; (8000910 <fsm_automatic_run+0x2dc>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80007f8:	fb02 f303 	mul.w	r3, r2, r3
 80007fc:	4618      	mov	r0, r3
 80007fe:	f000 fddd 	bl	80013bc <setTimer1>
		}
		if(timer1_flag == 1 && temp == AUTO_GREEN){
 8000802:	4b3f      	ldr	r3, [pc, #252]	; (8000900 <fsm_automatic_run+0x2cc>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	2b01      	cmp	r3, #1
 8000808:	d169      	bne.n	80008de <fsm_automatic_run+0x2aa>
 800080a:	4b3e      	ldr	r3, [pc, #248]	; (8000904 <fsm_automatic_run+0x2d0>)
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	2b04      	cmp	r3, #4
 8000810:	d165      	bne.n	80008de <fsm_automatic_run+0x2aa>
			status = AUTO_RED;
 8000812:	4b35      	ldr	r3, [pc, #212]	; (80008e8 <fsm_automatic_run+0x2b4>)
 8000814:	2202      	movs	r2, #2
 8000816:	601a      	str	r2, [r3, #0]
			temp_red = red_count;
 8000818:	4b35      	ldr	r3, [pc, #212]	; (80008f0 <fsm_automatic_run+0x2bc>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	4a35      	ldr	r2, [pc, #212]	; (80008f4 <fsm_automatic_run+0x2c0>)
 800081e:	6013      	str	r3, [r2, #0]
			setTimer1(red_count*1000);
 8000820:	4b33      	ldr	r3, [pc, #204]	; (80008f0 <fsm_automatic_run+0x2bc>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000828:	fb02 f303 	mul.w	r3, r2, r3
 800082c:	4618      	mov	r0, r3
 800082e:	f000 fdc5 	bl	80013bc <setTimer1>
		}
		break;
 8000832:	e054      	b.n	80008de <fsm_automatic_run+0x2aa>
	case AUTO_GREEN:
		HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, SET);
 8000834:	2201      	movs	r2, #1
 8000836:	2108      	movs	r1, #8
 8000838:	482c      	ldr	r0, [pc, #176]	; (80008ec <fsm_automatic_run+0x2b8>)
 800083a:	f001 fa32 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin, SET);
 800083e:	2201      	movs	r2, #1
 8000840:	2110      	movs	r1, #16
 8000842:	482a      	ldr	r0, [pc, #168]	; (80008ec <fsm_automatic_run+0x2b8>)
 8000844:	f001 fa2d 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, RESET);
 8000848:	2200      	movs	r2, #0
 800084a:	2120      	movs	r1, #32
 800084c:	4827      	ldr	r0, [pc, #156]	; (80008ec <fsm_automatic_run+0x2b8>)
 800084e:	f001 fa28 	bl	8001ca2 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, RESET);
 8000852:	2200      	movs	r2, #0
 8000854:	2140      	movs	r1, #64	; 0x40
 8000856:	4825      	ldr	r0, [pc, #148]	; (80008ec <fsm_automatic_run+0x2b8>)
 8000858:	f001 fa23 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(YELLOW2_GPIO_Port, YELLOW2_Pin, SET);
 800085c:	2201      	movs	r2, #1
 800085e:	2180      	movs	r1, #128	; 0x80
 8000860:	4822      	ldr	r0, [pc, #136]	; (80008ec <fsm_automatic_run+0x2b8>)
 8000862:	f001 fa1e 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin, SET);
 8000866:	2201      	movs	r2, #1
 8000868:	f44f 7180 	mov.w	r1, #256	; 0x100
 800086c:	481f      	ldr	r0, [pc, #124]	; (80008ec <fsm_automatic_run+0x2b8>)
 800086e:	f001 fa18 	bl	8001ca2 <HAL_GPIO_WritePin>

		if(timer4_flag==1){
 8000872:	4b21      	ldr	r3, [pc, #132]	; (80008f8 <fsm_automatic_run+0x2c4>)
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	2b01      	cmp	r3, #1
 8000878:	d115      	bne.n	80008a6 <fsm_automatic_run+0x272>
			update7SEG(temp_green);
 800087a:	4b26      	ldr	r3, [pc, #152]	; (8000914 <fsm_automatic_run+0x2e0>)
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	4618      	mov	r0, r3
 8000880:	f000 fbb0 	bl	8000fe4 <update7SEG>

			if(timer3_flag==1){
 8000884:	4b1d      	ldr	r3, [pc, #116]	; (80008fc <fsm_automatic_run+0x2c8>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	2b01      	cmp	r3, #1
 800088a:	d108      	bne.n	800089e <fsm_automatic_run+0x26a>
				temp_green--;
 800088c:	4b21      	ldr	r3, [pc, #132]	; (8000914 <fsm_automatic_run+0x2e0>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	3b01      	subs	r3, #1
 8000892:	4a20      	ldr	r2, [pc, #128]	; (8000914 <fsm_automatic_run+0x2e0>)
 8000894:	6013      	str	r3, [r2, #0]
				setTimer3(1000);
 8000896:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800089a:	f000 fdc3 	bl	8001424 <setTimer3>
			}
			setTimer4(500);
 800089e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80008a2:	f000 fdd9 	bl	8001458 <setTimer4>
		}
		if(timer1_flag == 1){
 80008a6:	4b16      	ldr	r3, [pc, #88]	; (8000900 <fsm_automatic_run+0x2cc>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	2b01      	cmp	r3, #1
 80008ac:	d119      	bne.n	80008e2 <fsm_automatic_run+0x2ae>
			status = AUTO_YELLOW;
 80008ae:	4b0e      	ldr	r3, [pc, #56]	; (80008e8 <fsm_automatic_run+0x2b4>)
 80008b0:	2203      	movs	r2, #3
 80008b2:	601a      	str	r2, [r3, #0]
			temp = AUTO_GREEN;
 80008b4:	4b13      	ldr	r3, [pc, #76]	; (8000904 <fsm_automatic_run+0x2d0>)
 80008b6:	2204      	movs	r2, #4
 80008b8:	601a      	str	r2, [r3, #0]
			temp_yellow = yellow_count;
 80008ba:	4b13      	ldr	r3, [pc, #76]	; (8000908 <fsm_automatic_run+0x2d4>)
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	4a13      	ldr	r2, [pc, #76]	; (800090c <fsm_automatic_run+0x2d8>)
 80008c0:	6013      	str	r3, [r2, #0]
			setTimer1(yellow_count*1000);
 80008c2:	4b11      	ldr	r3, [pc, #68]	; (8000908 <fsm_automatic_run+0x2d4>)
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80008ca:	fb02 f303 	mul.w	r3, r2, r3
 80008ce:	4618      	mov	r0, r3
 80008d0:	f000 fd74 	bl	80013bc <setTimer1>
		}
		break;
 80008d4:	e005      	b.n	80008e2 <fsm_automatic_run+0x2ae>
	default:
		break;
 80008d6:	bf00      	nop
 80008d8:	e004      	b.n	80008e4 <fsm_automatic_run+0x2b0>
		break;
 80008da:	bf00      	nop
 80008dc:	e002      	b.n	80008e4 <fsm_automatic_run+0x2b0>
		break;
 80008de:	bf00      	nop
 80008e0:	e000      	b.n	80008e4 <fsm_automatic_run+0x2b0>
		break;
 80008e2:	bf00      	nop
	}
}
 80008e4:	bf00      	nop
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	20000094 	.word	0x20000094
 80008ec:	40010800 	.word	0x40010800
 80008f0:	20000040 	.word	0x20000040
 80008f4:	20000088 	.word	0x20000088
 80008f8:	200000b8 	.word	0x200000b8
 80008fc:	200000b0 	.word	0x200000b0
 8000900:	200000a0 	.word	0x200000a0
 8000904:	20000084 	.word	0x20000084
 8000908:	20000044 	.word	0x20000044
 800090c:	2000008c 	.word	0x2000008c
 8000910:	20000048 	.word	0x20000048
 8000914:	20000090 	.word	0x20000090

08000918 <display7SEG1>:
 *      Author: USER
 */

#include "led.h"

void display7SEG1(int num){
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	2b09      	cmp	r3, #9
 8000924:	f200 8180 	bhi.w	8000c28 <display7SEG1+0x310>
 8000928:	a201      	add	r2, pc, #4	; (adr r2, 8000930 <display7SEG1+0x18>)
 800092a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800092e:	bf00      	nop
 8000930:	08000959 	.word	0x08000959
 8000934:	080009a1 	.word	0x080009a1
 8000938:	080009e9 	.word	0x080009e9
 800093c:	08000a31 	.word	0x08000a31
 8000940:	08000a79 	.word	0x08000a79
 8000944:	08000ac1 	.word	0x08000ac1
 8000948:	08000b09 	.word	0x08000b09
 800094c:	08000b51 	.word	0x08000b51
 8000950:	08000b99 	.word	0x08000b99
 8000954:	08000be1 	.word	0x08000be1
	switch(num){
	case 0:{
		HAL_GPIO_WritePin(CA_GPIO_Port, CA_Pin, 0);
 8000958:	2200      	movs	r2, #0
 800095a:	2101      	movs	r1, #1
 800095c:	48b5      	ldr	r0, [pc, #724]	; (8000c34 <display7SEG1+0x31c>)
 800095e:	f001 f9a0 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(CB_GPIO_Port, CB_Pin, 0);
 8000962:	2200      	movs	r2, #0
 8000964:	2102      	movs	r1, #2
 8000966:	48b3      	ldr	r0, [pc, #716]	; (8000c34 <display7SEG1+0x31c>)
 8000968:	f001 f99b 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(CC_GPIO_Port, CC_Pin, 0);
 800096c:	2200      	movs	r2, #0
 800096e:	2104      	movs	r1, #4
 8000970:	48b0      	ldr	r0, [pc, #704]	; (8000c34 <display7SEG1+0x31c>)
 8000972:	f001 f996 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(CD_GPIO_Port, CD_Pin, 0);
 8000976:	2200      	movs	r2, #0
 8000978:	2108      	movs	r1, #8
 800097a:	48ae      	ldr	r0, [pc, #696]	; (8000c34 <display7SEG1+0x31c>)
 800097c:	f001 f991 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(CE_GPIO_Port, CE_Pin, 0);
 8000980:	2200      	movs	r2, #0
 8000982:	2110      	movs	r1, #16
 8000984:	48ab      	ldr	r0, [pc, #684]	; (8000c34 <display7SEG1+0x31c>)
 8000986:	f001 f98c 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(CF_GPIO_Port, CF_Pin, 0);
 800098a:	2200      	movs	r2, #0
 800098c:	2120      	movs	r1, #32
 800098e:	48a9      	ldr	r0, [pc, #676]	; (8000c34 <display7SEG1+0x31c>)
 8000990:	f001 f987 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(CG_GPIO_Port, CG_Pin, 1);
 8000994:	2201      	movs	r2, #1
 8000996:	2140      	movs	r1, #64	; 0x40
 8000998:	48a6      	ldr	r0, [pc, #664]	; (8000c34 <display7SEG1+0x31c>)
 800099a:	f001 f982 	bl	8001ca2 <HAL_GPIO_WritePin>
		break;
 800099e:	e144      	b.n	8000c2a <display7SEG1+0x312>
	}
	case 1:{
		HAL_GPIO_WritePin(CA_GPIO_Port, CA_Pin, 1);
 80009a0:	2201      	movs	r2, #1
 80009a2:	2101      	movs	r1, #1
 80009a4:	48a3      	ldr	r0, [pc, #652]	; (8000c34 <display7SEG1+0x31c>)
 80009a6:	f001 f97c 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(CB_GPIO_Port, CB_Pin, 0);
 80009aa:	2200      	movs	r2, #0
 80009ac:	2102      	movs	r1, #2
 80009ae:	48a1      	ldr	r0, [pc, #644]	; (8000c34 <display7SEG1+0x31c>)
 80009b0:	f001 f977 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(CC_GPIO_Port, CC_Pin, 0);
 80009b4:	2200      	movs	r2, #0
 80009b6:	2104      	movs	r1, #4
 80009b8:	489e      	ldr	r0, [pc, #632]	; (8000c34 <display7SEG1+0x31c>)
 80009ba:	f001 f972 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(CD_GPIO_Port, CD_Pin, 1);
 80009be:	2201      	movs	r2, #1
 80009c0:	2108      	movs	r1, #8
 80009c2:	489c      	ldr	r0, [pc, #624]	; (8000c34 <display7SEG1+0x31c>)
 80009c4:	f001 f96d 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(CE_GPIO_Port, CE_Pin, 1);
 80009c8:	2201      	movs	r2, #1
 80009ca:	2110      	movs	r1, #16
 80009cc:	4899      	ldr	r0, [pc, #612]	; (8000c34 <display7SEG1+0x31c>)
 80009ce:	f001 f968 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(CF_GPIO_Port, CF_Pin, 1);
 80009d2:	2201      	movs	r2, #1
 80009d4:	2120      	movs	r1, #32
 80009d6:	4897      	ldr	r0, [pc, #604]	; (8000c34 <display7SEG1+0x31c>)
 80009d8:	f001 f963 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(CG_GPIO_Port, CG_Pin, 1);
 80009dc:	2201      	movs	r2, #1
 80009de:	2140      	movs	r1, #64	; 0x40
 80009e0:	4894      	ldr	r0, [pc, #592]	; (8000c34 <display7SEG1+0x31c>)
 80009e2:	f001 f95e 	bl	8001ca2 <HAL_GPIO_WritePin>
		break;
 80009e6:	e120      	b.n	8000c2a <display7SEG1+0x312>
	}
	case 2:{
		HAL_GPIO_WritePin(CA_GPIO_Port, CA_Pin, 0);
 80009e8:	2200      	movs	r2, #0
 80009ea:	2101      	movs	r1, #1
 80009ec:	4891      	ldr	r0, [pc, #580]	; (8000c34 <display7SEG1+0x31c>)
 80009ee:	f001 f958 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(CB_GPIO_Port, CB_Pin, 0);
 80009f2:	2200      	movs	r2, #0
 80009f4:	2102      	movs	r1, #2
 80009f6:	488f      	ldr	r0, [pc, #572]	; (8000c34 <display7SEG1+0x31c>)
 80009f8:	f001 f953 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(CC_GPIO_Port, CC_Pin, 1);
 80009fc:	2201      	movs	r2, #1
 80009fe:	2104      	movs	r1, #4
 8000a00:	488c      	ldr	r0, [pc, #560]	; (8000c34 <display7SEG1+0x31c>)
 8000a02:	f001 f94e 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(CG_GPIO_Port, CG_Pin, 0);
 8000a06:	2200      	movs	r2, #0
 8000a08:	2140      	movs	r1, #64	; 0x40
 8000a0a:	488a      	ldr	r0, [pc, #552]	; (8000c34 <display7SEG1+0x31c>)
 8000a0c:	f001 f949 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(CD_GPIO_Port, CD_Pin, 0);
 8000a10:	2200      	movs	r2, #0
 8000a12:	2108      	movs	r1, #8
 8000a14:	4887      	ldr	r0, [pc, #540]	; (8000c34 <display7SEG1+0x31c>)
 8000a16:	f001 f944 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(CE_GPIO_Port, CE_Pin, 0);
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	2110      	movs	r1, #16
 8000a1e:	4885      	ldr	r0, [pc, #532]	; (8000c34 <display7SEG1+0x31c>)
 8000a20:	f001 f93f 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(CF_GPIO_Port, CF_Pin, 1);
 8000a24:	2201      	movs	r2, #1
 8000a26:	2120      	movs	r1, #32
 8000a28:	4882      	ldr	r0, [pc, #520]	; (8000c34 <display7SEG1+0x31c>)
 8000a2a:	f001 f93a 	bl	8001ca2 <HAL_GPIO_WritePin>
		break;
 8000a2e:	e0fc      	b.n	8000c2a <display7SEG1+0x312>
	}
	case 3:{
		HAL_GPIO_WritePin(CA_GPIO_Port, CA_Pin, 0);
 8000a30:	2200      	movs	r2, #0
 8000a32:	2101      	movs	r1, #1
 8000a34:	487f      	ldr	r0, [pc, #508]	; (8000c34 <display7SEG1+0x31c>)
 8000a36:	f001 f934 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(CB_GPIO_Port, CB_Pin, 0);
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	2102      	movs	r1, #2
 8000a3e:	487d      	ldr	r0, [pc, #500]	; (8000c34 <display7SEG1+0x31c>)
 8000a40:	f001 f92f 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(CC_GPIO_Port, CC_Pin, 0);
 8000a44:	2200      	movs	r2, #0
 8000a46:	2104      	movs	r1, #4
 8000a48:	487a      	ldr	r0, [pc, #488]	; (8000c34 <display7SEG1+0x31c>)
 8000a4a:	f001 f92a 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(CD_GPIO_Port, CD_Pin, 0);
 8000a4e:	2200      	movs	r2, #0
 8000a50:	2108      	movs	r1, #8
 8000a52:	4878      	ldr	r0, [pc, #480]	; (8000c34 <display7SEG1+0x31c>)
 8000a54:	f001 f925 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(CE_GPIO_Port, CE_Pin, 1);
 8000a58:	2201      	movs	r2, #1
 8000a5a:	2110      	movs	r1, #16
 8000a5c:	4875      	ldr	r0, [pc, #468]	; (8000c34 <display7SEG1+0x31c>)
 8000a5e:	f001 f920 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(CF_GPIO_Port, CF_Pin, 1);
 8000a62:	2201      	movs	r2, #1
 8000a64:	2120      	movs	r1, #32
 8000a66:	4873      	ldr	r0, [pc, #460]	; (8000c34 <display7SEG1+0x31c>)
 8000a68:	f001 f91b 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(CG_GPIO_Port, CG_Pin, 0);
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	2140      	movs	r1, #64	; 0x40
 8000a70:	4870      	ldr	r0, [pc, #448]	; (8000c34 <display7SEG1+0x31c>)
 8000a72:	f001 f916 	bl	8001ca2 <HAL_GPIO_WritePin>
		break;
 8000a76:	e0d8      	b.n	8000c2a <display7SEG1+0x312>
	}
	case 4:{
		HAL_GPIO_WritePin(CA_GPIO_Port, CA_Pin, 1);
 8000a78:	2201      	movs	r2, #1
 8000a7a:	2101      	movs	r1, #1
 8000a7c:	486d      	ldr	r0, [pc, #436]	; (8000c34 <display7SEG1+0x31c>)
 8000a7e:	f001 f910 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(CB_GPIO_Port, CB_Pin, 0);
 8000a82:	2200      	movs	r2, #0
 8000a84:	2102      	movs	r1, #2
 8000a86:	486b      	ldr	r0, [pc, #428]	; (8000c34 <display7SEG1+0x31c>)
 8000a88:	f001 f90b 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(CC_GPIO_Port, CC_Pin, 0);
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	2104      	movs	r1, #4
 8000a90:	4868      	ldr	r0, [pc, #416]	; (8000c34 <display7SEG1+0x31c>)
 8000a92:	f001 f906 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(CD_GPIO_Port, CD_Pin, 1);
 8000a96:	2201      	movs	r2, #1
 8000a98:	2108      	movs	r1, #8
 8000a9a:	4866      	ldr	r0, [pc, #408]	; (8000c34 <display7SEG1+0x31c>)
 8000a9c:	f001 f901 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(CE_GPIO_Port, CE_Pin, 1);
 8000aa0:	2201      	movs	r2, #1
 8000aa2:	2110      	movs	r1, #16
 8000aa4:	4863      	ldr	r0, [pc, #396]	; (8000c34 <display7SEG1+0x31c>)
 8000aa6:	f001 f8fc 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(CG_GPIO_Port, CG_Pin, 0);
 8000aaa:	2200      	movs	r2, #0
 8000aac:	2140      	movs	r1, #64	; 0x40
 8000aae:	4861      	ldr	r0, [pc, #388]	; (8000c34 <display7SEG1+0x31c>)
 8000ab0:	f001 f8f7 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(CF_GPIO_Port, CF_Pin, 0);
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	2120      	movs	r1, #32
 8000ab8:	485e      	ldr	r0, [pc, #376]	; (8000c34 <display7SEG1+0x31c>)
 8000aba:	f001 f8f2 	bl	8001ca2 <HAL_GPIO_WritePin>
		break;
 8000abe:	e0b4      	b.n	8000c2a <display7SEG1+0x312>
	}
	case 5:{
		HAL_GPIO_WritePin(CA_GPIO_Port, CA_Pin, 0);
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	2101      	movs	r1, #1
 8000ac4:	485b      	ldr	r0, [pc, #364]	; (8000c34 <display7SEG1+0x31c>)
 8000ac6:	f001 f8ec 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(CB_GPIO_Port, CB_Pin, 1);
 8000aca:	2201      	movs	r2, #1
 8000acc:	2102      	movs	r1, #2
 8000ace:	4859      	ldr	r0, [pc, #356]	; (8000c34 <display7SEG1+0x31c>)
 8000ad0:	f001 f8e7 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(CC_GPIO_Port, CC_Pin, 0);
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	2104      	movs	r1, #4
 8000ad8:	4856      	ldr	r0, [pc, #344]	; (8000c34 <display7SEG1+0x31c>)
 8000ada:	f001 f8e2 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(CD_GPIO_Port, CD_Pin, 0);
 8000ade:	2200      	movs	r2, #0
 8000ae0:	2108      	movs	r1, #8
 8000ae2:	4854      	ldr	r0, [pc, #336]	; (8000c34 <display7SEG1+0x31c>)
 8000ae4:	f001 f8dd 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(CE_GPIO_Port, CE_Pin, 1);
 8000ae8:	2201      	movs	r2, #1
 8000aea:	2110      	movs	r1, #16
 8000aec:	4851      	ldr	r0, [pc, #324]	; (8000c34 <display7SEG1+0x31c>)
 8000aee:	f001 f8d8 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(CG_GPIO_Port, CG_Pin, 0);
 8000af2:	2200      	movs	r2, #0
 8000af4:	2140      	movs	r1, #64	; 0x40
 8000af6:	484f      	ldr	r0, [pc, #316]	; (8000c34 <display7SEG1+0x31c>)
 8000af8:	f001 f8d3 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(CF_GPIO_Port, CF_Pin, 0);
 8000afc:	2200      	movs	r2, #0
 8000afe:	2120      	movs	r1, #32
 8000b00:	484c      	ldr	r0, [pc, #304]	; (8000c34 <display7SEG1+0x31c>)
 8000b02:	f001 f8ce 	bl	8001ca2 <HAL_GPIO_WritePin>
		break;
 8000b06:	e090      	b.n	8000c2a <display7SEG1+0x312>
	}
	case 6:{
		HAL_GPIO_WritePin(CA_GPIO_Port, CA_Pin, 0);
 8000b08:	2200      	movs	r2, #0
 8000b0a:	2101      	movs	r1, #1
 8000b0c:	4849      	ldr	r0, [pc, #292]	; (8000c34 <display7SEG1+0x31c>)
 8000b0e:	f001 f8c8 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(CB_GPIO_Port, CB_Pin, 1);
 8000b12:	2201      	movs	r2, #1
 8000b14:	2102      	movs	r1, #2
 8000b16:	4847      	ldr	r0, [pc, #284]	; (8000c34 <display7SEG1+0x31c>)
 8000b18:	f001 f8c3 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(CG_GPIO_Port, CG_Pin, 0);
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	2140      	movs	r1, #64	; 0x40
 8000b20:	4844      	ldr	r0, [pc, #272]	; (8000c34 <display7SEG1+0x31c>)
 8000b22:	f001 f8be 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(CC_GPIO_Port, CC_Pin, 0);
 8000b26:	2200      	movs	r2, #0
 8000b28:	2104      	movs	r1, #4
 8000b2a:	4842      	ldr	r0, [pc, #264]	; (8000c34 <display7SEG1+0x31c>)
 8000b2c:	f001 f8b9 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(CD_GPIO_Port, CD_Pin, 0);
 8000b30:	2200      	movs	r2, #0
 8000b32:	2108      	movs	r1, #8
 8000b34:	483f      	ldr	r0, [pc, #252]	; (8000c34 <display7SEG1+0x31c>)
 8000b36:	f001 f8b4 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(CE_GPIO_Port, CE_Pin, 0);
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	2110      	movs	r1, #16
 8000b3e:	483d      	ldr	r0, [pc, #244]	; (8000c34 <display7SEG1+0x31c>)
 8000b40:	f001 f8af 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(CF_GPIO_Port, CF_Pin, 0);
 8000b44:	2200      	movs	r2, #0
 8000b46:	2120      	movs	r1, #32
 8000b48:	483a      	ldr	r0, [pc, #232]	; (8000c34 <display7SEG1+0x31c>)
 8000b4a:	f001 f8aa 	bl	8001ca2 <HAL_GPIO_WritePin>
		break;
 8000b4e:	e06c      	b.n	8000c2a <display7SEG1+0x312>
	}
	case 7:{
		HAL_GPIO_WritePin(CA_GPIO_Port, CA_Pin, 0);
 8000b50:	2200      	movs	r2, #0
 8000b52:	2101      	movs	r1, #1
 8000b54:	4837      	ldr	r0, [pc, #220]	; (8000c34 <display7SEG1+0x31c>)
 8000b56:	f001 f8a4 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(CB_GPIO_Port, CB_Pin, 0);
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	2102      	movs	r1, #2
 8000b5e:	4835      	ldr	r0, [pc, #212]	; (8000c34 <display7SEG1+0x31c>)
 8000b60:	f001 f89f 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(CC_GPIO_Port, CC_Pin, 0);
 8000b64:	2200      	movs	r2, #0
 8000b66:	2104      	movs	r1, #4
 8000b68:	4832      	ldr	r0, [pc, #200]	; (8000c34 <display7SEG1+0x31c>)
 8000b6a:	f001 f89a 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(CD_GPIO_Port, CD_Pin, 1);
 8000b6e:	2201      	movs	r2, #1
 8000b70:	2108      	movs	r1, #8
 8000b72:	4830      	ldr	r0, [pc, #192]	; (8000c34 <display7SEG1+0x31c>)
 8000b74:	f001 f895 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(CE_GPIO_Port, CE_Pin, 1);
 8000b78:	2201      	movs	r2, #1
 8000b7a:	2110      	movs	r1, #16
 8000b7c:	482d      	ldr	r0, [pc, #180]	; (8000c34 <display7SEG1+0x31c>)
 8000b7e:	f001 f890 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(CF_GPIO_Port, CF_Pin, 1);
 8000b82:	2201      	movs	r2, #1
 8000b84:	2120      	movs	r1, #32
 8000b86:	482b      	ldr	r0, [pc, #172]	; (8000c34 <display7SEG1+0x31c>)
 8000b88:	f001 f88b 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(CG_GPIO_Port, CG_Pin, 1);
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	2140      	movs	r1, #64	; 0x40
 8000b90:	4828      	ldr	r0, [pc, #160]	; (8000c34 <display7SEG1+0x31c>)
 8000b92:	f001 f886 	bl	8001ca2 <HAL_GPIO_WritePin>
		break;
 8000b96:	e048      	b.n	8000c2a <display7SEG1+0x312>
	}
	case 8:{
		HAL_GPIO_WritePin(CA_GPIO_Port, CA_Pin, 0);
 8000b98:	2200      	movs	r2, #0
 8000b9a:	2101      	movs	r1, #1
 8000b9c:	4825      	ldr	r0, [pc, #148]	; (8000c34 <display7SEG1+0x31c>)
 8000b9e:	f001 f880 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(CB_GPIO_Port, CB_Pin, 0);
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	2102      	movs	r1, #2
 8000ba6:	4823      	ldr	r0, [pc, #140]	; (8000c34 <display7SEG1+0x31c>)
 8000ba8:	f001 f87b 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(CC_GPIO_Port, CC_Pin, 0);
 8000bac:	2200      	movs	r2, #0
 8000bae:	2104      	movs	r1, #4
 8000bb0:	4820      	ldr	r0, [pc, #128]	; (8000c34 <display7SEG1+0x31c>)
 8000bb2:	f001 f876 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(CD_GPIO_Port, CD_Pin, 0);
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	2108      	movs	r1, #8
 8000bba:	481e      	ldr	r0, [pc, #120]	; (8000c34 <display7SEG1+0x31c>)
 8000bbc:	f001 f871 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(CE_GPIO_Port, CE_Pin, 0);
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	2110      	movs	r1, #16
 8000bc4:	481b      	ldr	r0, [pc, #108]	; (8000c34 <display7SEG1+0x31c>)
 8000bc6:	f001 f86c 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(CF_GPIO_Port, CF_Pin, 0);
 8000bca:	2200      	movs	r2, #0
 8000bcc:	2120      	movs	r1, #32
 8000bce:	4819      	ldr	r0, [pc, #100]	; (8000c34 <display7SEG1+0x31c>)
 8000bd0:	f001 f867 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(CG_GPIO_Port, CG_Pin, 0);
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	2140      	movs	r1, #64	; 0x40
 8000bd8:	4816      	ldr	r0, [pc, #88]	; (8000c34 <display7SEG1+0x31c>)
 8000bda:	f001 f862 	bl	8001ca2 <HAL_GPIO_WritePin>
		break;
 8000bde:	e024      	b.n	8000c2a <display7SEG1+0x312>
	}
	case 9:{
		HAL_GPIO_WritePin(CA_GPIO_Port, CA_Pin, 0);
 8000be0:	2200      	movs	r2, #0
 8000be2:	2101      	movs	r1, #1
 8000be4:	4813      	ldr	r0, [pc, #76]	; (8000c34 <display7SEG1+0x31c>)
 8000be6:	f001 f85c 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(CB_GPIO_Port, CB_Pin, 0);
 8000bea:	2200      	movs	r2, #0
 8000bec:	2102      	movs	r1, #2
 8000bee:	4811      	ldr	r0, [pc, #68]	; (8000c34 <display7SEG1+0x31c>)
 8000bf0:	f001 f857 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(CC_GPIO_Port, CC_Pin, 0);
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	2104      	movs	r1, #4
 8000bf8:	480e      	ldr	r0, [pc, #56]	; (8000c34 <display7SEG1+0x31c>)
 8000bfa:	f001 f852 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(CD_GPIO_Port, CD_Pin, 0);
 8000bfe:	2200      	movs	r2, #0
 8000c00:	2108      	movs	r1, #8
 8000c02:	480c      	ldr	r0, [pc, #48]	; (8000c34 <display7SEG1+0x31c>)
 8000c04:	f001 f84d 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(CE_GPIO_Port, CE_Pin, 1);
 8000c08:	2201      	movs	r2, #1
 8000c0a:	2110      	movs	r1, #16
 8000c0c:	4809      	ldr	r0, [pc, #36]	; (8000c34 <display7SEG1+0x31c>)
 8000c0e:	f001 f848 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(CF_GPIO_Port, CF_Pin, 0);
 8000c12:	2200      	movs	r2, #0
 8000c14:	2120      	movs	r1, #32
 8000c16:	4807      	ldr	r0, [pc, #28]	; (8000c34 <display7SEG1+0x31c>)
 8000c18:	f001 f843 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(CG_GPIO_Port, CG_Pin, 0);
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	2140      	movs	r1, #64	; 0x40
 8000c20:	4804      	ldr	r0, [pc, #16]	; (8000c34 <display7SEG1+0x31c>)
 8000c22:	f001 f83e 	bl	8001ca2 <HAL_GPIO_WritePin>
		break;
 8000c26:	e000      	b.n	8000c2a <display7SEG1+0x312>
	}
	default: break;
 8000c28:	bf00      	nop
	}
}
 8000c2a:	bf00      	nop
 8000c2c:	3708      	adds	r7, #8
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	40010c00 	.word	0x40010c00

08000c38 <display7SEG2>:
void display7SEG2(int num){
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	2b09      	cmp	r3, #9
 8000c44:	f200 81c8 	bhi.w	8000fd8 <display7SEG2+0x3a0>
 8000c48:	a201      	add	r2, pc, #4	; (adr r2, 8000c50 <display7SEG2+0x18>)
 8000c4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c4e:	bf00      	nop
 8000c50:	08000c79 	.word	0x08000c79
 8000c54:	08000ccf 	.word	0x08000ccf
 8000c58:	08000d25 	.word	0x08000d25
 8000c5c:	08000d7b 	.word	0x08000d7b
 8000c60:	08000dd1 	.word	0x08000dd1
 8000c64:	08000e27 	.word	0x08000e27
 8000c68:	08000e7d 	.word	0x08000e7d
 8000c6c:	08000ed3 	.word	0x08000ed3
 8000c70:	08000f29 	.word	0x08000f29
 8000c74:	08000f7f 	.word	0x08000f7f
	switch(num){
	case 0:{
		HAL_GPIO_WritePin(BA_GPIO_Port, BA_Pin, 0);
 8000c78:	2200      	movs	r2, #0
 8000c7a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c7e:	48d5      	ldr	r0, [pc, #852]	; (8000fd4 <display7SEG2+0x39c>)
 8000c80:	f001 f80f 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BB_GPIO_Port, BB_Pin, 0);
 8000c84:	2200      	movs	r2, #0
 8000c86:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c8a:	48d2      	ldr	r0, [pc, #840]	; (8000fd4 <display7SEG2+0x39c>)
 8000c8c:	f001 f809 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BC_GPIO_Port, BC_Pin, 0);
 8000c90:	2200      	movs	r2, #0
 8000c92:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c96:	48cf      	ldr	r0, [pc, #828]	; (8000fd4 <display7SEG2+0x39c>)
 8000c98:	f001 f803 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BD_GPIO_Port, BD_Pin, 0);
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ca2:	48cc      	ldr	r0, [pc, #816]	; (8000fd4 <display7SEG2+0x39c>)
 8000ca4:	f000 fffd 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BE_GPIO_Port, BE_Pin, 0);
 8000ca8:	2200      	movs	r2, #0
 8000caa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000cae:	48c9      	ldr	r0, [pc, #804]	; (8000fd4 <display7SEG2+0x39c>)
 8000cb0:	f000 fff7 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BF_GPIO_Port, BF_Pin, 0);
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cba:	48c6      	ldr	r0, [pc, #792]	; (8000fd4 <display7SEG2+0x39c>)
 8000cbc:	f000 fff1 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BG_GPIO_Port, BG_Pin, 1);
 8000cc0:	2201      	movs	r2, #1
 8000cc2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000cc6:	48c3      	ldr	r0, [pc, #780]	; (8000fd4 <display7SEG2+0x39c>)
 8000cc8:	f000 ffeb 	bl	8001ca2 <HAL_GPIO_WritePin>
		break;
 8000ccc:	e185      	b.n	8000fda <display7SEG2+0x3a2>
	}
	case 1:{
		HAL_GPIO_WritePin(BA_GPIO_Port, BA_Pin, 1);
 8000cce:	2201      	movs	r2, #1
 8000cd0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000cd4:	48bf      	ldr	r0, [pc, #764]	; (8000fd4 <display7SEG2+0x39c>)
 8000cd6:	f000 ffe4 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BB_GPIO_Port, BB_Pin, 0);
 8000cda:	2200      	movs	r2, #0
 8000cdc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ce0:	48bc      	ldr	r0, [pc, #752]	; (8000fd4 <display7SEG2+0x39c>)
 8000ce2:	f000 ffde 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BC_GPIO_Port, BC_Pin, 0);
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000cec:	48b9      	ldr	r0, [pc, #740]	; (8000fd4 <display7SEG2+0x39c>)
 8000cee:	f000 ffd8 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BD_GPIO_Port, BD_Pin, 1);
 8000cf2:	2201      	movs	r2, #1
 8000cf4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000cf8:	48b6      	ldr	r0, [pc, #728]	; (8000fd4 <display7SEG2+0x39c>)
 8000cfa:	f000 ffd2 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BE_GPIO_Port, BE_Pin, 1);
 8000cfe:	2201      	movs	r2, #1
 8000d00:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d04:	48b3      	ldr	r0, [pc, #716]	; (8000fd4 <display7SEG2+0x39c>)
 8000d06:	f000 ffcc 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BF_GPIO_Port, BF_Pin, 1);
 8000d0a:	2201      	movs	r2, #1
 8000d0c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d10:	48b0      	ldr	r0, [pc, #704]	; (8000fd4 <display7SEG2+0x39c>)
 8000d12:	f000 ffc6 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BG_GPIO_Port, BG_Pin, 1);
 8000d16:	2201      	movs	r2, #1
 8000d18:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d1c:	48ad      	ldr	r0, [pc, #692]	; (8000fd4 <display7SEG2+0x39c>)
 8000d1e:	f000 ffc0 	bl	8001ca2 <HAL_GPIO_WritePin>
		break;
 8000d22:	e15a      	b.n	8000fda <display7SEG2+0x3a2>
	}
	case 2:{

		HAL_GPIO_WritePin(BA_GPIO_Port, BA_Pin, 0);
 8000d24:	2200      	movs	r2, #0
 8000d26:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d2a:	48aa      	ldr	r0, [pc, #680]	; (8000fd4 <display7SEG2+0x39c>)
 8000d2c:	f000 ffb9 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BB_GPIO_Port, BB_Pin, 0);
 8000d30:	2200      	movs	r2, #0
 8000d32:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d36:	48a7      	ldr	r0, [pc, #668]	; (8000fd4 <display7SEG2+0x39c>)
 8000d38:	f000 ffb3 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BC_GPIO_Port, BC_Pin, 1);
 8000d3c:	2201      	movs	r2, #1
 8000d3e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d42:	48a4      	ldr	r0, [pc, #656]	; (8000fd4 <display7SEG2+0x39c>)
 8000d44:	f000 ffad 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BD_GPIO_Port, BD_Pin, 0);
 8000d48:	2200      	movs	r2, #0
 8000d4a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d4e:	48a1      	ldr	r0, [pc, #644]	; (8000fd4 <display7SEG2+0x39c>)
 8000d50:	f000 ffa7 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BE_GPIO_Port, BE_Pin, 0);
 8000d54:	2200      	movs	r2, #0
 8000d56:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d5a:	489e      	ldr	r0, [pc, #632]	; (8000fd4 <display7SEG2+0x39c>)
 8000d5c:	f000 ffa1 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BF_GPIO_Port, BF_Pin, 1);
 8000d60:	2201      	movs	r2, #1
 8000d62:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d66:	489b      	ldr	r0, [pc, #620]	; (8000fd4 <display7SEG2+0x39c>)
 8000d68:	f000 ff9b 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BG_GPIO_Port, BG_Pin, 0);
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d72:	4898      	ldr	r0, [pc, #608]	; (8000fd4 <display7SEG2+0x39c>)
 8000d74:	f000 ff95 	bl	8001ca2 <HAL_GPIO_WritePin>
		break;
 8000d78:	e12f      	b.n	8000fda <display7SEG2+0x3a2>
	}
	case 3:{

		HAL_GPIO_WritePin(BA_GPIO_Port, BA_Pin, 0);
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d80:	4894      	ldr	r0, [pc, #592]	; (8000fd4 <display7SEG2+0x39c>)
 8000d82:	f000 ff8e 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BB_GPIO_Port, BB_Pin, 0);
 8000d86:	2200      	movs	r2, #0
 8000d88:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d8c:	4891      	ldr	r0, [pc, #580]	; (8000fd4 <display7SEG2+0x39c>)
 8000d8e:	f000 ff88 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BC_GPIO_Port, BC_Pin, 0);
 8000d92:	2200      	movs	r2, #0
 8000d94:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d98:	488e      	ldr	r0, [pc, #568]	; (8000fd4 <display7SEG2+0x39c>)
 8000d9a:	f000 ff82 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BD_GPIO_Port, BD_Pin, 0);
 8000d9e:	2200      	movs	r2, #0
 8000da0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000da4:	488b      	ldr	r0, [pc, #556]	; (8000fd4 <display7SEG2+0x39c>)
 8000da6:	f000 ff7c 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BE_GPIO_Port, BE_Pin, 1);
 8000daa:	2201      	movs	r2, #1
 8000dac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000db0:	4888      	ldr	r0, [pc, #544]	; (8000fd4 <display7SEG2+0x39c>)
 8000db2:	f000 ff76 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BF_GPIO_Port, BF_Pin, 1);
 8000db6:	2201      	movs	r2, #1
 8000db8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000dbc:	4885      	ldr	r0, [pc, #532]	; (8000fd4 <display7SEG2+0x39c>)
 8000dbe:	f000 ff70 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BG_GPIO_Port, BG_Pin, 0);
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000dc8:	4882      	ldr	r0, [pc, #520]	; (8000fd4 <display7SEG2+0x39c>)
 8000dca:	f000 ff6a 	bl	8001ca2 <HAL_GPIO_WritePin>
		break;
 8000dce:	e104      	b.n	8000fda <display7SEG2+0x3a2>
	}
	case 4:{

		HAL_GPIO_WritePin(BA_GPIO_Port, BA_Pin, 1);
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000dd6:	487f      	ldr	r0, [pc, #508]	; (8000fd4 <display7SEG2+0x39c>)
 8000dd8:	f000 ff63 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BB_GPIO_Port, BB_Pin, 0);
 8000ddc:	2200      	movs	r2, #0
 8000dde:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000de2:	487c      	ldr	r0, [pc, #496]	; (8000fd4 <display7SEG2+0x39c>)
 8000de4:	f000 ff5d 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BC_GPIO_Port, BC_Pin, 0);
 8000de8:	2200      	movs	r2, #0
 8000dea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000dee:	4879      	ldr	r0, [pc, #484]	; (8000fd4 <display7SEG2+0x39c>)
 8000df0:	f000 ff57 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BD_GPIO_Port, BD_Pin, 1);
 8000df4:	2201      	movs	r2, #1
 8000df6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000dfa:	4876      	ldr	r0, [pc, #472]	; (8000fd4 <display7SEG2+0x39c>)
 8000dfc:	f000 ff51 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BE_GPIO_Port, BE_Pin, 1);
 8000e00:	2201      	movs	r2, #1
 8000e02:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e06:	4873      	ldr	r0, [pc, #460]	; (8000fd4 <display7SEG2+0x39c>)
 8000e08:	f000 ff4b 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BF_GPIO_Port, BF_Pin, 0);
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e12:	4870      	ldr	r0, [pc, #448]	; (8000fd4 <display7SEG2+0x39c>)
 8000e14:	f000 ff45 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BG_GPIO_Port, BG_Pin, 0);
 8000e18:	2200      	movs	r2, #0
 8000e1a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e1e:	486d      	ldr	r0, [pc, #436]	; (8000fd4 <display7SEG2+0x39c>)
 8000e20:	f000 ff3f 	bl	8001ca2 <HAL_GPIO_WritePin>
		break;
 8000e24:	e0d9      	b.n	8000fda <display7SEG2+0x3a2>
	}
	case 5:{

		HAL_GPIO_WritePin(BA_GPIO_Port, BA_Pin, 0);
 8000e26:	2200      	movs	r2, #0
 8000e28:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e2c:	4869      	ldr	r0, [pc, #420]	; (8000fd4 <display7SEG2+0x39c>)
 8000e2e:	f000 ff38 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BB_GPIO_Port, BB_Pin, 1);
 8000e32:	2201      	movs	r2, #1
 8000e34:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e38:	4866      	ldr	r0, [pc, #408]	; (8000fd4 <display7SEG2+0x39c>)
 8000e3a:	f000 ff32 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BC_GPIO_Port, BC_Pin, 0);
 8000e3e:	2200      	movs	r2, #0
 8000e40:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e44:	4863      	ldr	r0, [pc, #396]	; (8000fd4 <display7SEG2+0x39c>)
 8000e46:	f000 ff2c 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BD_GPIO_Port, BD_Pin, 0);
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e50:	4860      	ldr	r0, [pc, #384]	; (8000fd4 <display7SEG2+0x39c>)
 8000e52:	f000 ff26 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BE_GPIO_Port, BE_Pin, 1);
 8000e56:	2201      	movs	r2, #1
 8000e58:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e5c:	485d      	ldr	r0, [pc, #372]	; (8000fd4 <display7SEG2+0x39c>)
 8000e5e:	f000 ff20 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BF_GPIO_Port, BF_Pin, 0);
 8000e62:	2200      	movs	r2, #0
 8000e64:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e68:	485a      	ldr	r0, [pc, #360]	; (8000fd4 <display7SEG2+0x39c>)
 8000e6a:	f000 ff1a 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BG_GPIO_Port, BG_Pin, 0);
 8000e6e:	2200      	movs	r2, #0
 8000e70:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e74:	4857      	ldr	r0, [pc, #348]	; (8000fd4 <display7SEG2+0x39c>)
 8000e76:	f000 ff14 	bl	8001ca2 <HAL_GPIO_WritePin>
		break;
 8000e7a:	e0ae      	b.n	8000fda <display7SEG2+0x3a2>
	}
	case 6:{

		HAL_GPIO_WritePin(BA_GPIO_Port, BA_Pin, 0);
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e82:	4854      	ldr	r0, [pc, #336]	; (8000fd4 <display7SEG2+0x39c>)
 8000e84:	f000 ff0d 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BB_GPIO_Port, BB_Pin, 1);
 8000e88:	2201      	movs	r2, #1
 8000e8a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e8e:	4851      	ldr	r0, [pc, #324]	; (8000fd4 <display7SEG2+0x39c>)
 8000e90:	f000 ff07 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BC_GPIO_Port, BC_Pin, 0);
 8000e94:	2200      	movs	r2, #0
 8000e96:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e9a:	484e      	ldr	r0, [pc, #312]	; (8000fd4 <display7SEG2+0x39c>)
 8000e9c:	f000 ff01 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BD_GPIO_Port, BD_Pin, 0);
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ea6:	484b      	ldr	r0, [pc, #300]	; (8000fd4 <display7SEG2+0x39c>)
 8000ea8:	f000 fefb 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BE_GPIO_Port, BE_Pin, 0);
 8000eac:	2200      	movs	r2, #0
 8000eae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000eb2:	4848      	ldr	r0, [pc, #288]	; (8000fd4 <display7SEG2+0x39c>)
 8000eb4:	f000 fef5 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BF_GPIO_Port, BF_Pin, 0);
 8000eb8:	2200      	movs	r2, #0
 8000eba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ebe:	4845      	ldr	r0, [pc, #276]	; (8000fd4 <display7SEG2+0x39c>)
 8000ec0:	f000 feef 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BG_GPIO_Port, BG_Pin, 0);
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000eca:	4842      	ldr	r0, [pc, #264]	; (8000fd4 <display7SEG2+0x39c>)
 8000ecc:	f000 fee9 	bl	8001ca2 <HAL_GPIO_WritePin>
		break;
 8000ed0:	e083      	b.n	8000fda <display7SEG2+0x3a2>
	}
	case 7:{
		HAL_GPIO_WritePin(BA_GPIO_Port, BA_Pin, 0);
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ed8:	483e      	ldr	r0, [pc, #248]	; (8000fd4 <display7SEG2+0x39c>)
 8000eda:	f000 fee2 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BB_GPIO_Port, BB_Pin, 0);
 8000ede:	2200      	movs	r2, #0
 8000ee0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ee4:	483b      	ldr	r0, [pc, #236]	; (8000fd4 <display7SEG2+0x39c>)
 8000ee6:	f000 fedc 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BC_GPIO_Port, BC_Pin, 0);
 8000eea:	2200      	movs	r2, #0
 8000eec:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ef0:	4838      	ldr	r0, [pc, #224]	; (8000fd4 <display7SEG2+0x39c>)
 8000ef2:	f000 fed6 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BD_GPIO_Port, BD_Pin, 1);
 8000ef6:	2201      	movs	r2, #1
 8000ef8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000efc:	4835      	ldr	r0, [pc, #212]	; (8000fd4 <display7SEG2+0x39c>)
 8000efe:	f000 fed0 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BE_GPIO_Port, BE_Pin, 1);
 8000f02:	2201      	movs	r2, #1
 8000f04:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f08:	4832      	ldr	r0, [pc, #200]	; (8000fd4 <display7SEG2+0x39c>)
 8000f0a:	f000 feca 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BF_GPIO_Port, BF_Pin, 1);
 8000f0e:	2201      	movs	r2, #1
 8000f10:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f14:	482f      	ldr	r0, [pc, #188]	; (8000fd4 <display7SEG2+0x39c>)
 8000f16:	f000 fec4 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BG_GPIO_Port, BG_Pin, 1);
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f20:	482c      	ldr	r0, [pc, #176]	; (8000fd4 <display7SEG2+0x39c>)
 8000f22:	f000 febe 	bl	8001ca2 <HAL_GPIO_WritePin>
		break;
 8000f26:	e058      	b.n	8000fda <display7SEG2+0x3a2>
	}
	case 8:{

		HAL_GPIO_WritePin(BA_GPIO_Port, BA_Pin, 0);
 8000f28:	2200      	movs	r2, #0
 8000f2a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f2e:	4829      	ldr	r0, [pc, #164]	; (8000fd4 <display7SEG2+0x39c>)
 8000f30:	f000 feb7 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BB_GPIO_Port, BB_Pin, 0);
 8000f34:	2200      	movs	r2, #0
 8000f36:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f3a:	4826      	ldr	r0, [pc, #152]	; (8000fd4 <display7SEG2+0x39c>)
 8000f3c:	f000 feb1 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BC_GPIO_Port, BC_Pin, 0);
 8000f40:	2200      	movs	r2, #0
 8000f42:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f46:	4823      	ldr	r0, [pc, #140]	; (8000fd4 <display7SEG2+0x39c>)
 8000f48:	f000 feab 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BD_GPIO_Port, BD_Pin, 0);
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f52:	4820      	ldr	r0, [pc, #128]	; (8000fd4 <display7SEG2+0x39c>)
 8000f54:	f000 fea5 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BE_GPIO_Port, BE_Pin, 0);
 8000f58:	2200      	movs	r2, #0
 8000f5a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f5e:	481d      	ldr	r0, [pc, #116]	; (8000fd4 <display7SEG2+0x39c>)
 8000f60:	f000 fe9f 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BF_GPIO_Port, BF_Pin, 0);
 8000f64:	2200      	movs	r2, #0
 8000f66:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f6a:	481a      	ldr	r0, [pc, #104]	; (8000fd4 <display7SEG2+0x39c>)
 8000f6c:	f000 fe99 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BG_GPIO_Port, BG_Pin, 0);
 8000f70:	2200      	movs	r2, #0
 8000f72:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f76:	4817      	ldr	r0, [pc, #92]	; (8000fd4 <display7SEG2+0x39c>)
 8000f78:	f000 fe93 	bl	8001ca2 <HAL_GPIO_WritePin>
		break;
 8000f7c:	e02d      	b.n	8000fda <display7SEG2+0x3a2>
	}
	case 9:{

		HAL_GPIO_WritePin(BA_GPIO_Port, BA_Pin, 0);
 8000f7e:	2200      	movs	r2, #0
 8000f80:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f84:	4813      	ldr	r0, [pc, #76]	; (8000fd4 <display7SEG2+0x39c>)
 8000f86:	f000 fe8c 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BB_GPIO_Port, BB_Pin, 0);
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f90:	4810      	ldr	r0, [pc, #64]	; (8000fd4 <display7SEG2+0x39c>)
 8000f92:	f000 fe86 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BC_GPIO_Port, BC_Pin, 0);
 8000f96:	2200      	movs	r2, #0
 8000f98:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f9c:	480d      	ldr	r0, [pc, #52]	; (8000fd4 <display7SEG2+0x39c>)
 8000f9e:	f000 fe80 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BD_GPIO_Port, BD_Pin, 0);
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000fa8:	480a      	ldr	r0, [pc, #40]	; (8000fd4 <display7SEG2+0x39c>)
 8000faa:	f000 fe7a 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BE_GPIO_Port, BE_Pin, 1);
 8000fae:	2201      	movs	r2, #1
 8000fb0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fb4:	4807      	ldr	r0, [pc, #28]	; (8000fd4 <display7SEG2+0x39c>)
 8000fb6:	f000 fe74 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BF_GPIO_Port, BF_Pin, 0);
 8000fba:	2200      	movs	r2, #0
 8000fbc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fc0:	4804      	ldr	r0, [pc, #16]	; (8000fd4 <display7SEG2+0x39c>)
 8000fc2:	f000 fe6e 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BG_GPIO_Port, BG_Pin, 0);
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000fcc:	4801      	ldr	r0, [pc, #4]	; (8000fd4 <display7SEG2+0x39c>)
 8000fce:	f000 fe68 	bl	8001ca2 <HAL_GPIO_WritePin>
		break;
 8000fd2:	e002      	b.n	8000fda <display7SEG2+0x3a2>
 8000fd4:	40010c00 	.word	0x40010c00
	}
	default: break;
 8000fd8:	bf00      	nop
	}
}
 8000fda:	bf00      	nop
 8000fdc:	3708      	adds	r7, #8
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop

08000fe4 <update7SEG>:
void update7SEG ( int index ){
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b084      	sub	sp, #16
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
	int dau = index / 10;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	4a31      	ldr	r2, [pc, #196]	; (80010b4 <update7SEG+0xd0>)
 8000ff0:	fb82 1203 	smull	r1, r2, r2, r3
 8000ff4:	1092      	asrs	r2, r2, #2
 8000ff6:	17db      	asrs	r3, r3, #31
 8000ff8:	1ad3      	subs	r3, r2, r3
 8000ffa:	60fb      	str	r3, [r7, #12]
	int cuoi = index % 10;
 8000ffc:	687a      	ldr	r2, [r7, #4]
 8000ffe:	4b2d      	ldr	r3, [pc, #180]	; (80010b4 <update7SEG+0xd0>)
 8001000:	fb83 1302 	smull	r1, r3, r3, r2
 8001004:	1099      	asrs	r1, r3, #2
 8001006:	17d3      	asrs	r3, r2, #31
 8001008:	1ac9      	subs	r1, r1, r3
 800100a:	460b      	mov	r3, r1
 800100c:	009b      	lsls	r3, r3, #2
 800100e:	440b      	add	r3, r1
 8001010:	005b      	lsls	r3, r3, #1
 8001012:	1ad3      	subs	r3, r2, r3
 8001014:	60bb      	str	r3, [r7, #8]
	switch ( dem ) {
 8001016:	4b28      	ldr	r3, [pc, #160]	; (80010b8 <update7SEG+0xd4>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	2b00      	cmp	r3, #0
 800101c:	d002      	beq.n	8001024 <update7SEG+0x40>
 800101e:	2b01      	cmp	r3, #1
 8001020:	d022      	beq.n	8001068 <update7SEG+0x84>
			display7SEG2(cuoi);
			dem = 0;
			break;
		}
		default :
			break ;
 8001022:	e043      	b.n	80010ac <update7SEG+0xc8>
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, 0);
 8001024:	2200      	movs	r2, #0
 8001026:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800102a:	4824      	ldr	r0, [pc, #144]	; (80010bc <update7SEG+0xd8>)
 800102c:	f000 fe39 	bl	8001ca2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, 1);
 8001030:	2201      	movs	r2, #1
 8001032:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001036:	4821      	ldr	r0, [pc, #132]	; (80010bc <update7SEG+0xd8>)
 8001038:	f000 fe33 	bl	8001ca2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, 0);
 800103c:	2200      	movs	r2, #0
 800103e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001042:	481e      	ldr	r0, [pc, #120]	; (80010bc <update7SEG+0xd8>)
 8001044:	f000 fe2d 	bl	8001ca2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, 1);
 8001048:	2201      	movs	r2, #1
 800104a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800104e:	481b      	ldr	r0, [pc, #108]	; (80010bc <update7SEG+0xd8>)
 8001050:	f000 fe27 	bl	8001ca2 <HAL_GPIO_WritePin>
			display7SEG1(dau);
 8001054:	68f8      	ldr	r0, [r7, #12]
 8001056:	f7ff fc5f 	bl	8000918 <display7SEG1>
			display7SEG2(dau);
 800105a:	68f8      	ldr	r0, [r7, #12]
 800105c:	f7ff fdec 	bl	8000c38 <display7SEG2>
			dem = 1;
 8001060:	4b15      	ldr	r3, [pc, #84]	; (80010b8 <update7SEG+0xd4>)
 8001062:	2201      	movs	r2, #1
 8001064:	601a      	str	r2, [r3, #0]
			break;
 8001066:	e021      	b.n	80010ac <update7SEG+0xc8>
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, 1);
 8001068:	2201      	movs	r2, #1
 800106a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800106e:	4813      	ldr	r0, [pc, #76]	; (80010bc <update7SEG+0xd8>)
 8001070:	f000 fe17 	bl	8001ca2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, 0);
 8001074:	2200      	movs	r2, #0
 8001076:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800107a:	4810      	ldr	r0, [pc, #64]	; (80010bc <update7SEG+0xd8>)
 800107c:	f000 fe11 	bl	8001ca2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, 1);
 8001080:	2201      	movs	r2, #1
 8001082:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001086:	480d      	ldr	r0, [pc, #52]	; (80010bc <update7SEG+0xd8>)
 8001088:	f000 fe0b 	bl	8001ca2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, 0);
 800108c:	2200      	movs	r2, #0
 800108e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001092:	480a      	ldr	r0, [pc, #40]	; (80010bc <update7SEG+0xd8>)
 8001094:	f000 fe05 	bl	8001ca2 <HAL_GPIO_WritePin>
			display7SEG1(cuoi);
 8001098:	68b8      	ldr	r0, [r7, #8]
 800109a:	f7ff fc3d 	bl	8000918 <display7SEG1>
			display7SEG2(cuoi);
 800109e:	68b8      	ldr	r0, [r7, #8]
 80010a0:	f7ff fdca 	bl	8000c38 <display7SEG2>
			dem = 0;
 80010a4:	4b04      	ldr	r3, [pc, #16]	; (80010b8 <update7SEG+0xd4>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	601a      	str	r2, [r3, #0]
			break;
 80010aa:	bf00      	nop
	}
 }
 80010ac:	bf00      	nop
 80010ae:	3710      	adds	r7, #16
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	66666667 	.word	0x66666667
 80010b8:	20000098 	.word	0x20000098
 80010bc:	40010800 	.word	0x40010800

080010c0 <update7SEG2>:
		}
		default :
			break ;
	}
 }
void update7SEG2 ( int index ){
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b084      	sub	sp, #16
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
	int dau = index / 10;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	4a22      	ldr	r2, [pc, #136]	; (8001154 <update7SEG2+0x94>)
 80010cc:	fb82 1203 	smull	r1, r2, r2, r3
 80010d0:	1092      	asrs	r2, r2, #2
 80010d2:	17db      	asrs	r3, r3, #31
 80010d4:	1ad3      	subs	r3, r2, r3
 80010d6:	60fb      	str	r3, [r7, #12]
	int cuoi = index % 10;
 80010d8:	687a      	ldr	r2, [r7, #4]
 80010da:	4b1e      	ldr	r3, [pc, #120]	; (8001154 <update7SEG2+0x94>)
 80010dc:	fb83 1302 	smull	r1, r3, r3, r2
 80010e0:	1099      	asrs	r1, r3, #2
 80010e2:	17d3      	asrs	r3, r2, #31
 80010e4:	1ac9      	subs	r1, r1, r3
 80010e6:	460b      	mov	r3, r1
 80010e8:	009b      	lsls	r3, r3, #2
 80010ea:	440b      	add	r3, r1
 80010ec:	005b      	lsls	r3, r3, #1
 80010ee:	1ad3      	subs	r3, r2, r3
 80010f0:	60bb      	str	r3, [r7, #8]
	switch ( dem ) {
 80010f2:	4b19      	ldr	r3, [pc, #100]	; (8001158 <update7SEG2+0x98>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d002      	beq.n	8001100 <update7SEG2+0x40>
 80010fa:	2b01      	cmp	r3, #1
 80010fc:	d013      	beq.n	8001126 <update7SEG2+0x66>
			display7SEG2(cuoi);
			dem = 0;
			break;
		}
		default :
			break ;
 80010fe:	e025      	b.n	800114c <update7SEG2+0x8c>
			HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, 0);
 8001100:	2200      	movs	r2, #0
 8001102:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001106:	4815      	ldr	r0, [pc, #84]	; (800115c <update7SEG2+0x9c>)
 8001108:	f000 fdcb 	bl	8001ca2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, 1);
 800110c:	2201      	movs	r2, #1
 800110e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001112:	4812      	ldr	r0, [pc, #72]	; (800115c <update7SEG2+0x9c>)
 8001114:	f000 fdc5 	bl	8001ca2 <HAL_GPIO_WritePin>
			display7SEG2(dau);
 8001118:	68f8      	ldr	r0, [r7, #12]
 800111a:	f7ff fd8d 	bl	8000c38 <display7SEG2>
			dem = 1;
 800111e:	4b0e      	ldr	r3, [pc, #56]	; (8001158 <update7SEG2+0x98>)
 8001120:	2201      	movs	r2, #1
 8001122:	601a      	str	r2, [r3, #0]
			break;
 8001124:	e012      	b.n	800114c <update7SEG2+0x8c>
			HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, 1);
 8001126:	2201      	movs	r2, #1
 8001128:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800112c:	480b      	ldr	r0, [pc, #44]	; (800115c <update7SEG2+0x9c>)
 800112e:	f000 fdb8 	bl	8001ca2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, 0);
 8001132:	2200      	movs	r2, #0
 8001134:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001138:	4808      	ldr	r0, [pc, #32]	; (800115c <update7SEG2+0x9c>)
 800113a:	f000 fdb2 	bl	8001ca2 <HAL_GPIO_WritePin>
			display7SEG2(cuoi);
 800113e:	68b8      	ldr	r0, [r7, #8]
 8001140:	f7ff fd7a 	bl	8000c38 <display7SEG2>
			dem = 0;
 8001144:	4b04      	ldr	r3, [pc, #16]	; (8001158 <update7SEG2+0x98>)
 8001146:	2200      	movs	r2, #0
 8001148:	601a      	str	r2, [r3, #0]
			break;
 800114a:	bf00      	nop
	}
 }
 800114c:	bf00      	nop
 800114e:	3710      	adds	r7, #16
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	66666667 	.word	0x66666667
 8001158:	20000098 	.word	0x20000098
 800115c:	40010800 	.word	0x40010800

08001160 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001164:	f000 fa9c 	bl	80016a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001168:	f000 f818 	bl	800119c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800116c:	f000 f89e 	bl	80012ac <MX_GPIO_Init>
  MX_TIM2_Init();
 8001170:	f000 f850 	bl	8001214 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8001174:	4807      	ldr	r0, [pc, #28]	; (8001194 <main+0x34>)
 8001176:	f001 f9fd 	bl	8002574 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  status = 1;
 800117a:	4b07      	ldr	r3, [pc, #28]	; (8001198 <main+0x38>)
 800117c:	2201      	movs	r2, #1
 800117e:	601a      	str	r2, [r3, #0]
  setTimer3(10);
 8001180:	200a      	movs	r0, #10
 8001182:	f000 f94f 	bl	8001424 <setTimer3>
  setTimer4(10);
 8001186:	200a      	movs	r0, #10
 8001188:	f000 f966 	bl	8001458 <setTimer4>
  while (1)
  {
	  changeMode();
 800118c:	f7ff f910 	bl	80003b0 <changeMode>
 8001190:	e7fc      	b.n	800118c <main+0x2c>
 8001192:	bf00      	nop
 8001194:	200000bc 	.word	0x200000bc
 8001198:	20000094 	.word	0x20000094

0800119c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b090      	sub	sp, #64	; 0x40
 80011a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011a2:	f107 0318 	add.w	r3, r7, #24
 80011a6:	2228      	movs	r2, #40	; 0x28
 80011a8:	2100      	movs	r1, #0
 80011aa:	4618      	mov	r0, r3
 80011ac:	f001 fd9a 	bl	8002ce4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011b0:	1d3b      	adds	r3, r7, #4
 80011b2:	2200      	movs	r2, #0
 80011b4:	601a      	str	r2, [r3, #0]
 80011b6:	605a      	str	r2, [r3, #4]
 80011b8:	609a      	str	r2, [r3, #8]
 80011ba:	60da      	str	r2, [r3, #12]
 80011bc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011be:	2302      	movs	r3, #2
 80011c0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011c2:	2301      	movs	r3, #1
 80011c4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011c6:	2310      	movs	r3, #16
 80011c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80011ca:	2300      	movs	r3, #0
 80011cc:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011ce:	f107 0318 	add.w	r3, r7, #24
 80011d2:	4618      	mov	r0, r3
 80011d4:	f000 fd96 	bl	8001d04 <HAL_RCC_OscConfig>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d001      	beq.n	80011e2 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80011de:	f000 f8e7 	bl	80013b0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011e2:	230f      	movs	r3, #15
 80011e4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80011e6:	2300      	movs	r3, #0
 80011e8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011ea:	2300      	movs	r3, #0
 80011ec:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80011ee:	2300      	movs	r3, #0
 80011f0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011f2:	2300      	movs	r3, #0
 80011f4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80011f6:	1d3b      	adds	r3, r7, #4
 80011f8:	2100      	movs	r1, #0
 80011fa:	4618      	mov	r0, r3
 80011fc:	f001 f802 	bl	8002204 <HAL_RCC_ClockConfig>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d001      	beq.n	800120a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001206:	f000 f8d3 	bl	80013b0 <Error_Handler>
  }
}
 800120a:	bf00      	nop
 800120c:	3740      	adds	r7, #64	; 0x40
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
	...

08001214 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b086      	sub	sp, #24
 8001218:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800121a:	f107 0308 	add.w	r3, r7, #8
 800121e:	2200      	movs	r2, #0
 8001220:	601a      	str	r2, [r3, #0]
 8001222:	605a      	str	r2, [r3, #4]
 8001224:	609a      	str	r2, [r3, #8]
 8001226:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001228:	463b      	mov	r3, r7
 800122a:	2200      	movs	r2, #0
 800122c:	601a      	str	r2, [r3, #0]
 800122e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001230:	4b1d      	ldr	r3, [pc, #116]	; (80012a8 <MX_TIM2_Init+0x94>)
 8001232:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001236:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8001238:	4b1b      	ldr	r3, [pc, #108]	; (80012a8 <MX_TIM2_Init+0x94>)
 800123a:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800123e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001240:	4b19      	ldr	r3, [pc, #100]	; (80012a8 <MX_TIM2_Init+0x94>)
 8001242:	2200      	movs	r2, #0
 8001244:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8001246:	4b18      	ldr	r3, [pc, #96]	; (80012a8 <MX_TIM2_Init+0x94>)
 8001248:	2209      	movs	r2, #9
 800124a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800124c:	4b16      	ldr	r3, [pc, #88]	; (80012a8 <MX_TIM2_Init+0x94>)
 800124e:	2200      	movs	r2, #0
 8001250:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001252:	4b15      	ldr	r3, [pc, #84]	; (80012a8 <MX_TIM2_Init+0x94>)
 8001254:	2200      	movs	r2, #0
 8001256:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001258:	4813      	ldr	r0, [pc, #76]	; (80012a8 <MX_TIM2_Init+0x94>)
 800125a:	f001 f93b 	bl	80024d4 <HAL_TIM_Base_Init>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d001      	beq.n	8001268 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001264:	f000 f8a4 	bl	80013b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001268:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800126c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800126e:	f107 0308 	add.w	r3, r7, #8
 8001272:	4619      	mov	r1, r3
 8001274:	480c      	ldr	r0, [pc, #48]	; (80012a8 <MX_TIM2_Init+0x94>)
 8001276:	f001 fad1 	bl	800281c <HAL_TIM_ConfigClockSource>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d001      	beq.n	8001284 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001280:	f000 f896 	bl	80013b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001284:	2300      	movs	r3, #0
 8001286:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001288:	2300      	movs	r3, #0
 800128a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800128c:	463b      	mov	r3, r7
 800128e:	4619      	mov	r1, r3
 8001290:	4805      	ldr	r0, [pc, #20]	; (80012a8 <MX_TIM2_Init+0x94>)
 8001292:	f001 fc99 	bl	8002bc8 <HAL_TIMEx_MasterConfigSynchronization>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d001      	beq.n	80012a0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800129c:	f000 f888 	bl	80013b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80012a0:	bf00      	nop
 80012a2:	3718      	adds	r7, #24
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	200000bc 	.word	0x200000bc

080012ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b088      	sub	sp, #32
 80012b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b2:	f107 0310 	add.w	r3, r7, #16
 80012b6:	2200      	movs	r2, #0
 80012b8:	601a      	str	r2, [r3, #0]
 80012ba:	605a      	str	r2, [r3, #4]
 80012bc:	609a      	str	r2, [r3, #8]
 80012be:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012c0:	4b2f      	ldr	r3, [pc, #188]	; (8001380 <MX_GPIO_Init+0xd4>)
 80012c2:	699b      	ldr	r3, [r3, #24]
 80012c4:	4a2e      	ldr	r2, [pc, #184]	; (8001380 <MX_GPIO_Init+0xd4>)
 80012c6:	f043 0310 	orr.w	r3, r3, #16
 80012ca:	6193      	str	r3, [r2, #24]
 80012cc:	4b2c      	ldr	r3, [pc, #176]	; (8001380 <MX_GPIO_Init+0xd4>)
 80012ce:	699b      	ldr	r3, [r3, #24]
 80012d0:	f003 0310 	and.w	r3, r3, #16
 80012d4:	60fb      	str	r3, [r7, #12]
 80012d6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012d8:	4b29      	ldr	r3, [pc, #164]	; (8001380 <MX_GPIO_Init+0xd4>)
 80012da:	699b      	ldr	r3, [r3, #24]
 80012dc:	4a28      	ldr	r2, [pc, #160]	; (8001380 <MX_GPIO_Init+0xd4>)
 80012de:	f043 0304 	orr.w	r3, r3, #4
 80012e2:	6193      	str	r3, [r2, #24]
 80012e4:	4b26      	ldr	r3, [pc, #152]	; (8001380 <MX_GPIO_Init+0xd4>)
 80012e6:	699b      	ldr	r3, [r3, #24]
 80012e8:	f003 0304 	and.w	r3, r3, #4
 80012ec:	60bb      	str	r3, [r7, #8]
 80012ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012f0:	4b23      	ldr	r3, [pc, #140]	; (8001380 <MX_GPIO_Init+0xd4>)
 80012f2:	699b      	ldr	r3, [r3, #24]
 80012f4:	4a22      	ldr	r2, [pc, #136]	; (8001380 <MX_GPIO_Init+0xd4>)
 80012f6:	f043 0308 	orr.w	r3, r3, #8
 80012fa:	6193      	str	r3, [r2, #24]
 80012fc:	4b20      	ldr	r3, [pc, #128]	; (8001380 <MX_GPIO_Init+0xd4>)
 80012fe:	699b      	ldr	r3, [r3, #24]
 8001300:	f003 0308 	and.w	r3, r3, #8
 8001304:	607b      	str	r3, [r7, #4]
 8001306:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RED1_Pin|YELLOW1_Pin|GREEN1_Pin|RED2_Pin
 8001308:	2200      	movs	r2, #0
 800130a:	f643 51f8 	movw	r1, #15864	; 0x3df8
 800130e:	481d      	ldr	r0, [pc, #116]	; (8001384 <MX_GPIO_Init+0xd8>)
 8001310:	f000 fcc7 	bl	8001ca2 <HAL_GPIO_WritePin>
                          |YELLOW2_Pin|GREEN2_Pin|EN0_Pin|EN1_Pin
                          |EN2_Pin|EN3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CA_Pin|CB_Pin|CC_Pin|BC_Pin
 8001314:	2200      	movs	r2, #0
 8001316:	f647 717f 	movw	r1, #32639	; 0x7f7f
 800131a:	481b      	ldr	r0, [pc, #108]	; (8001388 <MX_GPIO_Init+0xdc>)
 800131c:	f000 fcc1 	bl	8001ca2 <HAL_GPIO_WritePin>
                          |BD_Pin|BE_Pin|BF_Pin|BG_Pin
                          |CD_Pin|CE_Pin|CF_Pin|CG_Pin
                          |BA_Pin|BB_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : Button1_Pin Button2_Pin Button3_Pin */
  GPIO_InitStruct.Pin = Button1_Pin|Button2_Pin|Button3_Pin;
 8001320:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001324:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001326:	2300      	movs	r3, #0
 8001328:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800132a:	2301      	movs	r3, #1
 800132c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800132e:	f107 0310 	add.w	r3, r7, #16
 8001332:	4619      	mov	r1, r3
 8001334:	4815      	ldr	r0, [pc, #84]	; (800138c <MX_GPIO_Init+0xe0>)
 8001336:	f000 fb23 	bl	8001980 <HAL_GPIO_Init>

  /*Configure GPIO pins : RED1_Pin YELLOW1_Pin GREEN1_Pin RED2_Pin
                           YELLOW2_Pin GREEN2_Pin EN0_Pin EN1_Pin
                           EN2_Pin EN3_Pin */
  GPIO_InitStruct.Pin = RED1_Pin|YELLOW1_Pin|GREEN1_Pin|RED2_Pin
 800133a:	f643 53f8 	movw	r3, #15864	; 0x3df8
 800133e:	613b      	str	r3, [r7, #16]
                          |YELLOW2_Pin|GREEN2_Pin|EN0_Pin|EN1_Pin
                          |EN2_Pin|EN3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001340:	2301      	movs	r3, #1
 8001342:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001344:	2300      	movs	r3, #0
 8001346:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001348:	2302      	movs	r3, #2
 800134a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800134c:	f107 0310 	add.w	r3, r7, #16
 8001350:	4619      	mov	r1, r3
 8001352:	480c      	ldr	r0, [pc, #48]	; (8001384 <MX_GPIO_Init+0xd8>)
 8001354:	f000 fb14 	bl	8001980 <HAL_GPIO_Init>

  /*Configure GPIO pins : CA_Pin CB_Pin CC_Pin BC_Pin
                           BD_Pin BE_Pin BF_Pin BG_Pin
                           CD_Pin CE_Pin CF_Pin CG_Pin
                           BA_Pin BB_Pin */
  GPIO_InitStruct.Pin = CA_Pin|CB_Pin|CC_Pin|BC_Pin
 8001358:	f647 737f 	movw	r3, #32639	; 0x7f7f
 800135c:	613b      	str	r3, [r7, #16]
                          |BD_Pin|BE_Pin|BF_Pin|BG_Pin
                          |CD_Pin|CE_Pin|CF_Pin|CG_Pin
                          |BA_Pin|BB_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800135e:	2301      	movs	r3, #1
 8001360:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001362:	2300      	movs	r3, #0
 8001364:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001366:	2302      	movs	r3, #2
 8001368:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800136a:	f107 0310 	add.w	r3, r7, #16
 800136e:	4619      	mov	r1, r3
 8001370:	4805      	ldr	r0, [pc, #20]	; (8001388 <MX_GPIO_Init+0xdc>)
 8001372:	f000 fb05 	bl	8001980 <HAL_GPIO_Init>

}
 8001376:	bf00      	nop
 8001378:	3720      	adds	r7, #32
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	40021000 	.word	0x40021000
 8001384:	40010800 	.word	0x40010800
 8001388:	40010c00 	.word	0x40010c00
 800138c:	40011000 	.word	0x40011000

08001390 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001390:	b580      	push	{r7, lr}
 8001392:	b082      	sub	sp, #8
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
	timerRun();
 8001398:	f000 f878 	bl	800148c <timerRun>
	getKey1Input();
 800139c:	f7fe ff1e 	bl	80001dc <getKey1Input>
	getKey2Input();
 80013a0:	f7fe ff6a 	bl	8000278 <getKey2Input>
	getKey3Input();
 80013a4:	f7fe ffb6 	bl	8000314 <getKey3Input>
}
 80013a8:	bf00      	nop
 80013aa:	3708      	adds	r7, #8
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}

080013b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013b4:	b672      	cpsid	i
}
 80013b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013b8:	e7fe      	b.n	80013b8 <Error_Handler+0x8>
	...

080013bc <setTimer1>:

int timer4_counter = 0;
int timer4_flag = 0;

int time_cycle =10;
void setTimer1(int duration){
 80013bc:	b480      	push	{r7}
 80013be:	b083      	sub	sp, #12
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
	timer1_counter = duration/time_cycle;
 80013c4:	4b07      	ldr	r3, [pc, #28]	; (80013e4 <setTimer1+0x28>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	687a      	ldr	r2, [r7, #4]
 80013ca:	fb92 f3f3 	sdiv	r3, r2, r3
 80013ce:	4a06      	ldr	r2, [pc, #24]	; (80013e8 <setTimer1+0x2c>)
 80013d0:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 80013d2:	4b06      	ldr	r3, [pc, #24]	; (80013ec <setTimer1+0x30>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	601a      	str	r2, [r3, #0]
}
 80013d8:	bf00      	nop
 80013da:	370c      	adds	r7, #12
 80013dc:	46bd      	mov	sp, r7
 80013de:	bc80      	pop	{r7}
 80013e0:	4770      	bx	lr
 80013e2:	bf00      	nop
 80013e4:	2000004c 	.word	0x2000004c
 80013e8:	2000009c 	.word	0x2000009c
 80013ec:	200000a0 	.word	0x200000a0

080013f0 <setTimer2>:

void setTimer2(int duration){
 80013f0:	b480      	push	{r7}
 80013f2:	b083      	sub	sp, #12
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
	timer2_counter = duration/time_cycle;
 80013f8:	4b07      	ldr	r3, [pc, #28]	; (8001418 <setTimer2+0x28>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	687a      	ldr	r2, [r7, #4]
 80013fe:	fb92 f3f3 	sdiv	r3, r2, r3
 8001402:	4a06      	ldr	r2, [pc, #24]	; (800141c <setTimer2+0x2c>)
 8001404:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 8001406:	4b06      	ldr	r3, [pc, #24]	; (8001420 <setTimer2+0x30>)
 8001408:	2200      	movs	r2, #0
 800140a:	601a      	str	r2, [r3, #0]
}
 800140c:	bf00      	nop
 800140e:	370c      	adds	r7, #12
 8001410:	46bd      	mov	sp, r7
 8001412:	bc80      	pop	{r7}
 8001414:	4770      	bx	lr
 8001416:	bf00      	nop
 8001418:	2000004c 	.word	0x2000004c
 800141c:	200000a4 	.word	0x200000a4
 8001420:	200000a8 	.word	0x200000a8

08001424 <setTimer3>:
void setTimer3(int duration){
 8001424:	b480      	push	{r7}
 8001426:	b083      	sub	sp, #12
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
	timer3_counter = duration/time_cycle;
 800142c:	4b07      	ldr	r3, [pc, #28]	; (800144c <setTimer3+0x28>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	687a      	ldr	r2, [r7, #4]
 8001432:	fb92 f3f3 	sdiv	r3, r2, r3
 8001436:	4a06      	ldr	r2, [pc, #24]	; (8001450 <setTimer3+0x2c>)
 8001438:	6013      	str	r3, [r2, #0]
	timer3_flag = 0;
 800143a:	4b06      	ldr	r3, [pc, #24]	; (8001454 <setTimer3+0x30>)
 800143c:	2200      	movs	r2, #0
 800143e:	601a      	str	r2, [r3, #0]
}
 8001440:	bf00      	nop
 8001442:	370c      	adds	r7, #12
 8001444:	46bd      	mov	sp, r7
 8001446:	bc80      	pop	{r7}
 8001448:	4770      	bx	lr
 800144a:	bf00      	nop
 800144c:	2000004c 	.word	0x2000004c
 8001450:	200000ac 	.word	0x200000ac
 8001454:	200000b0 	.word	0x200000b0

08001458 <setTimer4>:
void setTimer4(int duration){
 8001458:	b480      	push	{r7}
 800145a:	b083      	sub	sp, #12
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
	timer4_counter = duration/time_cycle;
 8001460:	4b07      	ldr	r3, [pc, #28]	; (8001480 <setTimer4+0x28>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	687a      	ldr	r2, [r7, #4]
 8001466:	fb92 f3f3 	sdiv	r3, r2, r3
 800146a:	4a06      	ldr	r2, [pc, #24]	; (8001484 <setTimer4+0x2c>)
 800146c:	6013      	str	r3, [r2, #0]
	timer4_flag = 0;
 800146e:	4b06      	ldr	r3, [pc, #24]	; (8001488 <setTimer4+0x30>)
 8001470:	2200      	movs	r2, #0
 8001472:	601a      	str	r2, [r3, #0]
}
 8001474:	bf00      	nop
 8001476:	370c      	adds	r7, #12
 8001478:	46bd      	mov	sp, r7
 800147a:	bc80      	pop	{r7}
 800147c:	4770      	bx	lr
 800147e:	bf00      	nop
 8001480:	2000004c 	.word	0x2000004c
 8001484:	200000b4 	.word	0x200000b4
 8001488:	200000b8 	.word	0x200000b8

0800148c <timerRun>:
void timerRun(){
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0
	if(timer1_counter > 0 ){
 8001490:	4b21      	ldr	r3, [pc, #132]	; (8001518 <timerRun+0x8c>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	2b00      	cmp	r3, #0
 8001496:	dd0b      	ble.n	80014b0 <timerRun+0x24>
		timer1_counter--;
 8001498:	4b1f      	ldr	r3, [pc, #124]	; (8001518 <timerRun+0x8c>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	3b01      	subs	r3, #1
 800149e:	4a1e      	ldr	r2, [pc, #120]	; (8001518 <timerRun+0x8c>)
 80014a0:	6013      	str	r3, [r2, #0]
		if(timer1_counter <= 0 ){
 80014a2:	4b1d      	ldr	r3, [pc, #116]	; (8001518 <timerRun+0x8c>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	dc02      	bgt.n	80014b0 <timerRun+0x24>
			timer1_flag = 1;
 80014aa:	4b1c      	ldr	r3, [pc, #112]	; (800151c <timerRun+0x90>)
 80014ac:	2201      	movs	r2, #1
 80014ae:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer2_counter > 0 ){
 80014b0:	4b1b      	ldr	r3, [pc, #108]	; (8001520 <timerRun+0x94>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	dd0b      	ble.n	80014d0 <timerRun+0x44>
		timer2_counter--;
 80014b8:	4b19      	ldr	r3, [pc, #100]	; (8001520 <timerRun+0x94>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	3b01      	subs	r3, #1
 80014be:	4a18      	ldr	r2, [pc, #96]	; (8001520 <timerRun+0x94>)
 80014c0:	6013      	str	r3, [r2, #0]
		if(timer2_counter <= 0 ){
 80014c2:	4b17      	ldr	r3, [pc, #92]	; (8001520 <timerRun+0x94>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	dc02      	bgt.n	80014d0 <timerRun+0x44>
			timer2_flag = 1;
 80014ca:	4b16      	ldr	r3, [pc, #88]	; (8001524 <timerRun+0x98>)
 80014cc:	2201      	movs	r2, #1
 80014ce:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer3_counter > 0 ){
 80014d0:	4b15      	ldr	r3, [pc, #84]	; (8001528 <timerRun+0x9c>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	dd0b      	ble.n	80014f0 <timerRun+0x64>
		timer3_counter--;
 80014d8:	4b13      	ldr	r3, [pc, #76]	; (8001528 <timerRun+0x9c>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	3b01      	subs	r3, #1
 80014de:	4a12      	ldr	r2, [pc, #72]	; (8001528 <timerRun+0x9c>)
 80014e0:	6013      	str	r3, [r2, #0]
		if(timer3_counter <= 0 ){
 80014e2:	4b11      	ldr	r3, [pc, #68]	; (8001528 <timerRun+0x9c>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	dc02      	bgt.n	80014f0 <timerRun+0x64>
			timer3_flag = 1;
 80014ea:	4b10      	ldr	r3, [pc, #64]	; (800152c <timerRun+0xa0>)
 80014ec:	2201      	movs	r2, #1
 80014ee:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer4_counter > 0 ){
 80014f0:	4b0f      	ldr	r3, [pc, #60]	; (8001530 <timerRun+0xa4>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	dd0b      	ble.n	8001510 <timerRun+0x84>
		timer4_counter--;
 80014f8:	4b0d      	ldr	r3, [pc, #52]	; (8001530 <timerRun+0xa4>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	3b01      	subs	r3, #1
 80014fe:	4a0c      	ldr	r2, [pc, #48]	; (8001530 <timerRun+0xa4>)
 8001500:	6013      	str	r3, [r2, #0]
		if(timer4_counter <= 0 ){
 8001502:	4b0b      	ldr	r3, [pc, #44]	; (8001530 <timerRun+0xa4>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	2b00      	cmp	r3, #0
 8001508:	dc02      	bgt.n	8001510 <timerRun+0x84>
			timer4_flag = 1;
 800150a:	4b0a      	ldr	r3, [pc, #40]	; (8001534 <timerRun+0xa8>)
 800150c:	2201      	movs	r2, #1
 800150e:	601a      	str	r2, [r3, #0]
		}
	}
}
 8001510:	bf00      	nop
 8001512:	46bd      	mov	sp, r7
 8001514:	bc80      	pop	{r7}
 8001516:	4770      	bx	lr
 8001518:	2000009c 	.word	0x2000009c
 800151c:	200000a0 	.word	0x200000a0
 8001520:	200000a4 	.word	0x200000a4
 8001524:	200000a8 	.word	0x200000a8
 8001528:	200000ac 	.word	0x200000ac
 800152c:	200000b0 	.word	0x200000b0
 8001530:	200000b4 	.word	0x200000b4
 8001534:	200000b8 	.word	0x200000b8

08001538 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001538:	b480      	push	{r7}
 800153a:	b085      	sub	sp, #20
 800153c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800153e:	4b15      	ldr	r3, [pc, #84]	; (8001594 <HAL_MspInit+0x5c>)
 8001540:	699b      	ldr	r3, [r3, #24]
 8001542:	4a14      	ldr	r2, [pc, #80]	; (8001594 <HAL_MspInit+0x5c>)
 8001544:	f043 0301 	orr.w	r3, r3, #1
 8001548:	6193      	str	r3, [r2, #24]
 800154a:	4b12      	ldr	r3, [pc, #72]	; (8001594 <HAL_MspInit+0x5c>)
 800154c:	699b      	ldr	r3, [r3, #24]
 800154e:	f003 0301 	and.w	r3, r3, #1
 8001552:	60bb      	str	r3, [r7, #8]
 8001554:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001556:	4b0f      	ldr	r3, [pc, #60]	; (8001594 <HAL_MspInit+0x5c>)
 8001558:	69db      	ldr	r3, [r3, #28]
 800155a:	4a0e      	ldr	r2, [pc, #56]	; (8001594 <HAL_MspInit+0x5c>)
 800155c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001560:	61d3      	str	r3, [r2, #28]
 8001562:	4b0c      	ldr	r3, [pc, #48]	; (8001594 <HAL_MspInit+0x5c>)
 8001564:	69db      	ldr	r3, [r3, #28]
 8001566:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800156a:	607b      	str	r3, [r7, #4]
 800156c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800156e:	4b0a      	ldr	r3, [pc, #40]	; (8001598 <HAL_MspInit+0x60>)
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	60fb      	str	r3, [r7, #12]
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800157a:	60fb      	str	r3, [r7, #12]
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001582:	60fb      	str	r3, [r7, #12]
 8001584:	4a04      	ldr	r2, [pc, #16]	; (8001598 <HAL_MspInit+0x60>)
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800158a:	bf00      	nop
 800158c:	3714      	adds	r7, #20
 800158e:	46bd      	mov	sp, r7
 8001590:	bc80      	pop	{r7}
 8001592:	4770      	bx	lr
 8001594:	40021000 	.word	0x40021000
 8001598:	40010000 	.word	0x40010000

0800159c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b084      	sub	sp, #16
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80015ac:	d113      	bne.n	80015d6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80015ae:	4b0c      	ldr	r3, [pc, #48]	; (80015e0 <HAL_TIM_Base_MspInit+0x44>)
 80015b0:	69db      	ldr	r3, [r3, #28]
 80015b2:	4a0b      	ldr	r2, [pc, #44]	; (80015e0 <HAL_TIM_Base_MspInit+0x44>)
 80015b4:	f043 0301 	orr.w	r3, r3, #1
 80015b8:	61d3      	str	r3, [r2, #28]
 80015ba:	4b09      	ldr	r3, [pc, #36]	; (80015e0 <HAL_TIM_Base_MspInit+0x44>)
 80015bc:	69db      	ldr	r3, [r3, #28]
 80015be:	f003 0301 	and.w	r3, r3, #1
 80015c2:	60fb      	str	r3, [r7, #12]
 80015c4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80015c6:	2200      	movs	r2, #0
 80015c8:	2100      	movs	r1, #0
 80015ca:	201c      	movs	r0, #28
 80015cc:	f000 f9a1 	bl	8001912 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80015d0:	201c      	movs	r0, #28
 80015d2:	f000 f9ba 	bl	800194a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80015d6:	bf00      	nop
 80015d8:	3710      	adds	r7, #16
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	40021000 	.word	0x40021000

080015e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015e8:	e7fe      	b.n	80015e8 <NMI_Handler+0x4>

080015ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015ea:	b480      	push	{r7}
 80015ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015ee:	e7fe      	b.n	80015ee <HardFault_Handler+0x4>

080015f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015f4:	e7fe      	b.n	80015f4 <MemManage_Handler+0x4>

080015f6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015f6:	b480      	push	{r7}
 80015f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015fa:	e7fe      	b.n	80015fa <BusFault_Handler+0x4>

080015fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001600:	e7fe      	b.n	8001600 <UsageFault_Handler+0x4>

08001602 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001602:	b480      	push	{r7}
 8001604:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001606:	bf00      	nop
 8001608:	46bd      	mov	sp, r7
 800160a:	bc80      	pop	{r7}
 800160c:	4770      	bx	lr

0800160e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800160e:	b480      	push	{r7}
 8001610:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001612:	bf00      	nop
 8001614:	46bd      	mov	sp, r7
 8001616:	bc80      	pop	{r7}
 8001618:	4770      	bx	lr

0800161a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800161a:	b480      	push	{r7}
 800161c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800161e:	bf00      	nop
 8001620:	46bd      	mov	sp, r7
 8001622:	bc80      	pop	{r7}
 8001624:	4770      	bx	lr

08001626 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001626:	b580      	push	{r7, lr}
 8001628:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800162a:	f000 f87f 	bl	800172c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800162e:	bf00      	nop
 8001630:	bd80      	pop	{r7, pc}
	...

08001634 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001638:	4802      	ldr	r0, [pc, #8]	; (8001644 <TIM2_IRQHandler+0x10>)
 800163a:	f000 ffe7 	bl	800260c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800163e:	bf00      	nop
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	200000bc 	.word	0x200000bc

08001648 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800164c:	bf00      	nop
 800164e:	46bd      	mov	sp, r7
 8001650:	bc80      	pop	{r7}
 8001652:	4770      	bx	lr

08001654 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001654:	480c      	ldr	r0, [pc, #48]	; (8001688 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001656:	490d      	ldr	r1, [pc, #52]	; (800168c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001658:	4a0d      	ldr	r2, [pc, #52]	; (8001690 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800165a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800165c:	e002      	b.n	8001664 <LoopCopyDataInit>

0800165e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800165e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001660:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001662:	3304      	adds	r3, #4

08001664 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001664:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001666:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001668:	d3f9      	bcc.n	800165e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800166a:	4a0a      	ldr	r2, [pc, #40]	; (8001694 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800166c:	4c0a      	ldr	r4, [pc, #40]	; (8001698 <LoopFillZerobss+0x22>)
  movs r3, #0
 800166e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001670:	e001      	b.n	8001676 <LoopFillZerobss>

08001672 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001672:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001674:	3204      	adds	r2, #4

08001676 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001676:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001678:	d3fb      	bcc.n	8001672 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800167a:	f7ff ffe5 	bl	8001648 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800167e:	f001 fb0d 	bl	8002c9c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001682:	f7ff fd6d 	bl	8001160 <main>
  bx lr
 8001686:	4770      	bx	lr
  ldr r0, =_sdata
 8001688:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800168c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001690:	08002d34 	.word	0x08002d34
  ldr r2, =_sbss
 8001694:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001698:	20000108 	.word	0x20000108

0800169c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800169c:	e7fe      	b.n	800169c <ADC1_2_IRQHandler>
	...

080016a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016a4:	4b08      	ldr	r3, [pc, #32]	; (80016c8 <HAL_Init+0x28>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a07      	ldr	r2, [pc, #28]	; (80016c8 <HAL_Init+0x28>)
 80016aa:	f043 0310 	orr.w	r3, r3, #16
 80016ae:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016b0:	2003      	movs	r0, #3
 80016b2:	f000 f923 	bl	80018fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016b6:	200f      	movs	r0, #15
 80016b8:	f000 f808 	bl	80016cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016bc:	f7ff ff3c 	bl	8001538 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016c0:	2300      	movs	r3, #0
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	40022000 	.word	0x40022000

080016cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b082      	sub	sp, #8
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016d4:	4b12      	ldr	r3, [pc, #72]	; (8001720 <HAL_InitTick+0x54>)
 80016d6:	681a      	ldr	r2, [r3, #0]
 80016d8:	4b12      	ldr	r3, [pc, #72]	; (8001724 <HAL_InitTick+0x58>)
 80016da:	781b      	ldrb	r3, [r3, #0]
 80016dc:	4619      	mov	r1, r3
 80016de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80016e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80016ea:	4618      	mov	r0, r3
 80016ec:	f000 f93b 	bl	8001966 <HAL_SYSTICK_Config>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d001      	beq.n	80016fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016f6:	2301      	movs	r3, #1
 80016f8:	e00e      	b.n	8001718 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	2b0f      	cmp	r3, #15
 80016fe:	d80a      	bhi.n	8001716 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001700:	2200      	movs	r2, #0
 8001702:	6879      	ldr	r1, [r7, #4]
 8001704:	f04f 30ff 	mov.w	r0, #4294967295
 8001708:	f000 f903 	bl	8001912 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800170c:	4a06      	ldr	r2, [pc, #24]	; (8001728 <HAL_InitTick+0x5c>)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001712:	2300      	movs	r3, #0
 8001714:	e000      	b.n	8001718 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001716:	2301      	movs	r3, #1
}
 8001718:	4618      	mov	r0, r3
 800171a:	3708      	adds	r7, #8
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}
 8001720:	20000050 	.word	0x20000050
 8001724:	20000058 	.word	0x20000058
 8001728:	20000054 	.word	0x20000054

0800172c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001730:	4b05      	ldr	r3, [pc, #20]	; (8001748 <HAL_IncTick+0x1c>)
 8001732:	781b      	ldrb	r3, [r3, #0]
 8001734:	461a      	mov	r2, r3
 8001736:	4b05      	ldr	r3, [pc, #20]	; (800174c <HAL_IncTick+0x20>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4413      	add	r3, r2
 800173c:	4a03      	ldr	r2, [pc, #12]	; (800174c <HAL_IncTick+0x20>)
 800173e:	6013      	str	r3, [r2, #0]
}
 8001740:	bf00      	nop
 8001742:	46bd      	mov	sp, r7
 8001744:	bc80      	pop	{r7}
 8001746:	4770      	bx	lr
 8001748:	20000058 	.word	0x20000058
 800174c:	20000104 	.word	0x20000104

08001750 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0
  return uwTick;
 8001754:	4b02      	ldr	r3, [pc, #8]	; (8001760 <HAL_GetTick+0x10>)
 8001756:	681b      	ldr	r3, [r3, #0]
}
 8001758:	4618      	mov	r0, r3
 800175a:	46bd      	mov	sp, r7
 800175c:	bc80      	pop	{r7}
 800175e:	4770      	bx	lr
 8001760:	20000104 	.word	0x20000104

08001764 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001764:	b480      	push	{r7}
 8001766:	b085      	sub	sp, #20
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	f003 0307 	and.w	r3, r3, #7
 8001772:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001774:	4b0c      	ldr	r3, [pc, #48]	; (80017a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001776:	68db      	ldr	r3, [r3, #12]
 8001778:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800177a:	68ba      	ldr	r2, [r7, #8]
 800177c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001780:	4013      	ands	r3, r2
 8001782:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001788:	68bb      	ldr	r3, [r7, #8]
 800178a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800178c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001790:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001794:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001796:	4a04      	ldr	r2, [pc, #16]	; (80017a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001798:	68bb      	ldr	r3, [r7, #8]
 800179a:	60d3      	str	r3, [r2, #12]
}
 800179c:	bf00      	nop
 800179e:	3714      	adds	r7, #20
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bc80      	pop	{r7}
 80017a4:	4770      	bx	lr
 80017a6:	bf00      	nop
 80017a8:	e000ed00 	.word	0xe000ed00

080017ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017b0:	4b04      	ldr	r3, [pc, #16]	; (80017c4 <__NVIC_GetPriorityGrouping+0x18>)
 80017b2:	68db      	ldr	r3, [r3, #12]
 80017b4:	0a1b      	lsrs	r3, r3, #8
 80017b6:	f003 0307 	and.w	r3, r3, #7
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	46bd      	mov	sp, r7
 80017be:	bc80      	pop	{r7}
 80017c0:	4770      	bx	lr
 80017c2:	bf00      	nop
 80017c4:	e000ed00 	.word	0xe000ed00

080017c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b083      	sub	sp, #12
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	4603      	mov	r3, r0
 80017d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	db0b      	blt.n	80017f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017da:	79fb      	ldrb	r3, [r7, #7]
 80017dc:	f003 021f 	and.w	r2, r3, #31
 80017e0:	4906      	ldr	r1, [pc, #24]	; (80017fc <__NVIC_EnableIRQ+0x34>)
 80017e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017e6:	095b      	lsrs	r3, r3, #5
 80017e8:	2001      	movs	r0, #1
 80017ea:	fa00 f202 	lsl.w	r2, r0, r2
 80017ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80017f2:	bf00      	nop
 80017f4:	370c      	adds	r7, #12
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bc80      	pop	{r7}
 80017fa:	4770      	bx	lr
 80017fc:	e000e100 	.word	0xe000e100

08001800 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001800:	b480      	push	{r7}
 8001802:	b083      	sub	sp, #12
 8001804:	af00      	add	r7, sp, #0
 8001806:	4603      	mov	r3, r0
 8001808:	6039      	str	r1, [r7, #0]
 800180a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800180c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001810:	2b00      	cmp	r3, #0
 8001812:	db0a      	blt.n	800182a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	b2da      	uxtb	r2, r3
 8001818:	490c      	ldr	r1, [pc, #48]	; (800184c <__NVIC_SetPriority+0x4c>)
 800181a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800181e:	0112      	lsls	r2, r2, #4
 8001820:	b2d2      	uxtb	r2, r2
 8001822:	440b      	add	r3, r1
 8001824:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001828:	e00a      	b.n	8001840 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	b2da      	uxtb	r2, r3
 800182e:	4908      	ldr	r1, [pc, #32]	; (8001850 <__NVIC_SetPriority+0x50>)
 8001830:	79fb      	ldrb	r3, [r7, #7]
 8001832:	f003 030f 	and.w	r3, r3, #15
 8001836:	3b04      	subs	r3, #4
 8001838:	0112      	lsls	r2, r2, #4
 800183a:	b2d2      	uxtb	r2, r2
 800183c:	440b      	add	r3, r1
 800183e:	761a      	strb	r2, [r3, #24]
}
 8001840:	bf00      	nop
 8001842:	370c      	adds	r7, #12
 8001844:	46bd      	mov	sp, r7
 8001846:	bc80      	pop	{r7}
 8001848:	4770      	bx	lr
 800184a:	bf00      	nop
 800184c:	e000e100 	.word	0xe000e100
 8001850:	e000ed00 	.word	0xe000ed00

08001854 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001854:	b480      	push	{r7}
 8001856:	b089      	sub	sp, #36	; 0x24
 8001858:	af00      	add	r7, sp, #0
 800185a:	60f8      	str	r0, [r7, #12]
 800185c:	60b9      	str	r1, [r7, #8]
 800185e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	f003 0307 	and.w	r3, r3, #7
 8001866:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001868:	69fb      	ldr	r3, [r7, #28]
 800186a:	f1c3 0307 	rsb	r3, r3, #7
 800186e:	2b04      	cmp	r3, #4
 8001870:	bf28      	it	cs
 8001872:	2304      	movcs	r3, #4
 8001874:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001876:	69fb      	ldr	r3, [r7, #28]
 8001878:	3304      	adds	r3, #4
 800187a:	2b06      	cmp	r3, #6
 800187c:	d902      	bls.n	8001884 <NVIC_EncodePriority+0x30>
 800187e:	69fb      	ldr	r3, [r7, #28]
 8001880:	3b03      	subs	r3, #3
 8001882:	e000      	b.n	8001886 <NVIC_EncodePriority+0x32>
 8001884:	2300      	movs	r3, #0
 8001886:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001888:	f04f 32ff 	mov.w	r2, #4294967295
 800188c:	69bb      	ldr	r3, [r7, #24]
 800188e:	fa02 f303 	lsl.w	r3, r2, r3
 8001892:	43da      	mvns	r2, r3
 8001894:	68bb      	ldr	r3, [r7, #8]
 8001896:	401a      	ands	r2, r3
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800189c:	f04f 31ff 	mov.w	r1, #4294967295
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	fa01 f303 	lsl.w	r3, r1, r3
 80018a6:	43d9      	mvns	r1, r3
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018ac:	4313      	orrs	r3, r2
         );
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	3724      	adds	r7, #36	; 0x24
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bc80      	pop	{r7}
 80018b6:	4770      	bx	lr

080018b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b082      	sub	sp, #8
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	3b01      	subs	r3, #1
 80018c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018c8:	d301      	bcc.n	80018ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018ca:	2301      	movs	r3, #1
 80018cc:	e00f      	b.n	80018ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018ce:	4a0a      	ldr	r2, [pc, #40]	; (80018f8 <SysTick_Config+0x40>)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	3b01      	subs	r3, #1
 80018d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018d6:	210f      	movs	r1, #15
 80018d8:	f04f 30ff 	mov.w	r0, #4294967295
 80018dc:	f7ff ff90 	bl	8001800 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018e0:	4b05      	ldr	r3, [pc, #20]	; (80018f8 <SysTick_Config+0x40>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018e6:	4b04      	ldr	r3, [pc, #16]	; (80018f8 <SysTick_Config+0x40>)
 80018e8:	2207      	movs	r2, #7
 80018ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018ec:	2300      	movs	r3, #0
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	3708      	adds	r7, #8
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	e000e010 	.word	0xe000e010

080018fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b082      	sub	sp, #8
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001904:	6878      	ldr	r0, [r7, #4]
 8001906:	f7ff ff2d 	bl	8001764 <__NVIC_SetPriorityGrouping>
}
 800190a:	bf00      	nop
 800190c:	3708      	adds	r7, #8
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}

08001912 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001912:	b580      	push	{r7, lr}
 8001914:	b086      	sub	sp, #24
 8001916:	af00      	add	r7, sp, #0
 8001918:	4603      	mov	r3, r0
 800191a:	60b9      	str	r1, [r7, #8]
 800191c:	607a      	str	r2, [r7, #4]
 800191e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001920:	2300      	movs	r3, #0
 8001922:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001924:	f7ff ff42 	bl	80017ac <__NVIC_GetPriorityGrouping>
 8001928:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800192a:	687a      	ldr	r2, [r7, #4]
 800192c:	68b9      	ldr	r1, [r7, #8]
 800192e:	6978      	ldr	r0, [r7, #20]
 8001930:	f7ff ff90 	bl	8001854 <NVIC_EncodePriority>
 8001934:	4602      	mov	r2, r0
 8001936:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800193a:	4611      	mov	r1, r2
 800193c:	4618      	mov	r0, r3
 800193e:	f7ff ff5f 	bl	8001800 <__NVIC_SetPriority>
}
 8001942:	bf00      	nop
 8001944:	3718      	adds	r7, #24
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}

0800194a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800194a:	b580      	push	{r7, lr}
 800194c:	b082      	sub	sp, #8
 800194e:	af00      	add	r7, sp, #0
 8001950:	4603      	mov	r3, r0
 8001952:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001954:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001958:	4618      	mov	r0, r3
 800195a:	f7ff ff35 	bl	80017c8 <__NVIC_EnableIRQ>
}
 800195e:	bf00      	nop
 8001960:	3708      	adds	r7, #8
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}

08001966 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001966:	b580      	push	{r7, lr}
 8001968:	b082      	sub	sp, #8
 800196a:	af00      	add	r7, sp, #0
 800196c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800196e:	6878      	ldr	r0, [r7, #4]
 8001970:	f7ff ffa2 	bl	80018b8 <SysTick_Config>
 8001974:	4603      	mov	r3, r0
}
 8001976:	4618      	mov	r0, r3
 8001978:	3708      	adds	r7, #8
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}
	...

08001980 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001980:	b480      	push	{r7}
 8001982:	b08b      	sub	sp, #44	; 0x2c
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
 8001988:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800198a:	2300      	movs	r3, #0
 800198c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800198e:	2300      	movs	r3, #0
 8001990:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001992:	e148      	b.n	8001c26 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001994:	2201      	movs	r2, #1
 8001996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001998:	fa02 f303 	lsl.w	r3, r2, r3
 800199c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	69fa      	ldr	r2, [r7, #28]
 80019a4:	4013      	ands	r3, r2
 80019a6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80019a8:	69ba      	ldr	r2, [r7, #24]
 80019aa:	69fb      	ldr	r3, [r7, #28]
 80019ac:	429a      	cmp	r2, r3
 80019ae:	f040 8137 	bne.w	8001c20 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	4aa3      	ldr	r2, [pc, #652]	; (8001c44 <HAL_GPIO_Init+0x2c4>)
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d05e      	beq.n	8001a7a <HAL_GPIO_Init+0xfa>
 80019bc:	4aa1      	ldr	r2, [pc, #644]	; (8001c44 <HAL_GPIO_Init+0x2c4>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d875      	bhi.n	8001aae <HAL_GPIO_Init+0x12e>
 80019c2:	4aa1      	ldr	r2, [pc, #644]	; (8001c48 <HAL_GPIO_Init+0x2c8>)
 80019c4:	4293      	cmp	r3, r2
 80019c6:	d058      	beq.n	8001a7a <HAL_GPIO_Init+0xfa>
 80019c8:	4a9f      	ldr	r2, [pc, #636]	; (8001c48 <HAL_GPIO_Init+0x2c8>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d86f      	bhi.n	8001aae <HAL_GPIO_Init+0x12e>
 80019ce:	4a9f      	ldr	r2, [pc, #636]	; (8001c4c <HAL_GPIO_Init+0x2cc>)
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d052      	beq.n	8001a7a <HAL_GPIO_Init+0xfa>
 80019d4:	4a9d      	ldr	r2, [pc, #628]	; (8001c4c <HAL_GPIO_Init+0x2cc>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d869      	bhi.n	8001aae <HAL_GPIO_Init+0x12e>
 80019da:	4a9d      	ldr	r2, [pc, #628]	; (8001c50 <HAL_GPIO_Init+0x2d0>)
 80019dc:	4293      	cmp	r3, r2
 80019de:	d04c      	beq.n	8001a7a <HAL_GPIO_Init+0xfa>
 80019e0:	4a9b      	ldr	r2, [pc, #620]	; (8001c50 <HAL_GPIO_Init+0x2d0>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d863      	bhi.n	8001aae <HAL_GPIO_Init+0x12e>
 80019e6:	4a9b      	ldr	r2, [pc, #620]	; (8001c54 <HAL_GPIO_Init+0x2d4>)
 80019e8:	4293      	cmp	r3, r2
 80019ea:	d046      	beq.n	8001a7a <HAL_GPIO_Init+0xfa>
 80019ec:	4a99      	ldr	r2, [pc, #612]	; (8001c54 <HAL_GPIO_Init+0x2d4>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d85d      	bhi.n	8001aae <HAL_GPIO_Init+0x12e>
 80019f2:	2b12      	cmp	r3, #18
 80019f4:	d82a      	bhi.n	8001a4c <HAL_GPIO_Init+0xcc>
 80019f6:	2b12      	cmp	r3, #18
 80019f8:	d859      	bhi.n	8001aae <HAL_GPIO_Init+0x12e>
 80019fa:	a201      	add	r2, pc, #4	; (adr r2, 8001a00 <HAL_GPIO_Init+0x80>)
 80019fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a00:	08001a7b 	.word	0x08001a7b
 8001a04:	08001a55 	.word	0x08001a55
 8001a08:	08001a67 	.word	0x08001a67
 8001a0c:	08001aa9 	.word	0x08001aa9
 8001a10:	08001aaf 	.word	0x08001aaf
 8001a14:	08001aaf 	.word	0x08001aaf
 8001a18:	08001aaf 	.word	0x08001aaf
 8001a1c:	08001aaf 	.word	0x08001aaf
 8001a20:	08001aaf 	.word	0x08001aaf
 8001a24:	08001aaf 	.word	0x08001aaf
 8001a28:	08001aaf 	.word	0x08001aaf
 8001a2c:	08001aaf 	.word	0x08001aaf
 8001a30:	08001aaf 	.word	0x08001aaf
 8001a34:	08001aaf 	.word	0x08001aaf
 8001a38:	08001aaf 	.word	0x08001aaf
 8001a3c:	08001aaf 	.word	0x08001aaf
 8001a40:	08001aaf 	.word	0x08001aaf
 8001a44:	08001a5d 	.word	0x08001a5d
 8001a48:	08001a71 	.word	0x08001a71
 8001a4c:	4a82      	ldr	r2, [pc, #520]	; (8001c58 <HAL_GPIO_Init+0x2d8>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d013      	beq.n	8001a7a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001a52:	e02c      	b.n	8001aae <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	68db      	ldr	r3, [r3, #12]
 8001a58:	623b      	str	r3, [r7, #32]
          break;
 8001a5a:	e029      	b.n	8001ab0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	68db      	ldr	r3, [r3, #12]
 8001a60:	3304      	adds	r3, #4
 8001a62:	623b      	str	r3, [r7, #32]
          break;
 8001a64:	e024      	b.n	8001ab0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	68db      	ldr	r3, [r3, #12]
 8001a6a:	3308      	adds	r3, #8
 8001a6c:	623b      	str	r3, [r7, #32]
          break;
 8001a6e:	e01f      	b.n	8001ab0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	68db      	ldr	r3, [r3, #12]
 8001a74:	330c      	adds	r3, #12
 8001a76:	623b      	str	r3, [r7, #32]
          break;
 8001a78:	e01a      	b.n	8001ab0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	689b      	ldr	r3, [r3, #8]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d102      	bne.n	8001a88 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001a82:	2304      	movs	r3, #4
 8001a84:	623b      	str	r3, [r7, #32]
          break;
 8001a86:	e013      	b.n	8001ab0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	689b      	ldr	r3, [r3, #8]
 8001a8c:	2b01      	cmp	r3, #1
 8001a8e:	d105      	bne.n	8001a9c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a90:	2308      	movs	r3, #8
 8001a92:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	69fa      	ldr	r2, [r7, #28]
 8001a98:	611a      	str	r2, [r3, #16]
          break;
 8001a9a:	e009      	b.n	8001ab0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a9c:	2308      	movs	r3, #8
 8001a9e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	69fa      	ldr	r2, [r7, #28]
 8001aa4:	615a      	str	r2, [r3, #20]
          break;
 8001aa6:	e003      	b.n	8001ab0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	623b      	str	r3, [r7, #32]
          break;
 8001aac:	e000      	b.n	8001ab0 <HAL_GPIO_Init+0x130>
          break;
 8001aae:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001ab0:	69bb      	ldr	r3, [r7, #24]
 8001ab2:	2bff      	cmp	r3, #255	; 0xff
 8001ab4:	d801      	bhi.n	8001aba <HAL_GPIO_Init+0x13a>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	e001      	b.n	8001abe <HAL_GPIO_Init+0x13e>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	3304      	adds	r3, #4
 8001abe:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001ac0:	69bb      	ldr	r3, [r7, #24]
 8001ac2:	2bff      	cmp	r3, #255	; 0xff
 8001ac4:	d802      	bhi.n	8001acc <HAL_GPIO_Init+0x14c>
 8001ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac8:	009b      	lsls	r3, r3, #2
 8001aca:	e002      	b.n	8001ad2 <HAL_GPIO_Init+0x152>
 8001acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ace:	3b08      	subs	r3, #8
 8001ad0:	009b      	lsls	r3, r3, #2
 8001ad2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	210f      	movs	r1, #15
 8001ada:	693b      	ldr	r3, [r7, #16]
 8001adc:	fa01 f303 	lsl.w	r3, r1, r3
 8001ae0:	43db      	mvns	r3, r3
 8001ae2:	401a      	ands	r2, r3
 8001ae4:	6a39      	ldr	r1, [r7, #32]
 8001ae6:	693b      	ldr	r3, [r7, #16]
 8001ae8:	fa01 f303 	lsl.w	r3, r1, r3
 8001aec:	431a      	orrs	r2, r3
 8001aee:	697b      	ldr	r3, [r7, #20]
 8001af0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	f000 8090 	beq.w	8001c20 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001b00:	4b56      	ldr	r3, [pc, #344]	; (8001c5c <HAL_GPIO_Init+0x2dc>)
 8001b02:	699b      	ldr	r3, [r3, #24]
 8001b04:	4a55      	ldr	r2, [pc, #340]	; (8001c5c <HAL_GPIO_Init+0x2dc>)
 8001b06:	f043 0301 	orr.w	r3, r3, #1
 8001b0a:	6193      	str	r3, [r2, #24]
 8001b0c:	4b53      	ldr	r3, [pc, #332]	; (8001c5c <HAL_GPIO_Init+0x2dc>)
 8001b0e:	699b      	ldr	r3, [r3, #24]
 8001b10:	f003 0301 	and.w	r3, r3, #1
 8001b14:	60bb      	str	r3, [r7, #8]
 8001b16:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001b18:	4a51      	ldr	r2, [pc, #324]	; (8001c60 <HAL_GPIO_Init+0x2e0>)
 8001b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b1c:	089b      	lsrs	r3, r3, #2
 8001b1e:	3302      	adds	r3, #2
 8001b20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b24:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b28:	f003 0303 	and.w	r3, r3, #3
 8001b2c:	009b      	lsls	r3, r3, #2
 8001b2e:	220f      	movs	r2, #15
 8001b30:	fa02 f303 	lsl.w	r3, r2, r3
 8001b34:	43db      	mvns	r3, r3
 8001b36:	68fa      	ldr	r2, [r7, #12]
 8001b38:	4013      	ands	r3, r2
 8001b3a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	4a49      	ldr	r2, [pc, #292]	; (8001c64 <HAL_GPIO_Init+0x2e4>)
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d00d      	beq.n	8001b60 <HAL_GPIO_Init+0x1e0>
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	4a48      	ldr	r2, [pc, #288]	; (8001c68 <HAL_GPIO_Init+0x2e8>)
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d007      	beq.n	8001b5c <HAL_GPIO_Init+0x1dc>
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	4a47      	ldr	r2, [pc, #284]	; (8001c6c <HAL_GPIO_Init+0x2ec>)
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d101      	bne.n	8001b58 <HAL_GPIO_Init+0x1d8>
 8001b54:	2302      	movs	r3, #2
 8001b56:	e004      	b.n	8001b62 <HAL_GPIO_Init+0x1e2>
 8001b58:	2303      	movs	r3, #3
 8001b5a:	e002      	b.n	8001b62 <HAL_GPIO_Init+0x1e2>
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	e000      	b.n	8001b62 <HAL_GPIO_Init+0x1e2>
 8001b60:	2300      	movs	r3, #0
 8001b62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b64:	f002 0203 	and.w	r2, r2, #3
 8001b68:	0092      	lsls	r2, r2, #2
 8001b6a:	4093      	lsls	r3, r2
 8001b6c:	68fa      	ldr	r2, [r7, #12]
 8001b6e:	4313      	orrs	r3, r2
 8001b70:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001b72:	493b      	ldr	r1, [pc, #236]	; (8001c60 <HAL_GPIO_Init+0x2e0>)
 8001b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b76:	089b      	lsrs	r3, r3, #2
 8001b78:	3302      	adds	r3, #2
 8001b7a:	68fa      	ldr	r2, [r7, #12]
 8001b7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d006      	beq.n	8001b9a <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001b8c:	4b38      	ldr	r3, [pc, #224]	; (8001c70 <HAL_GPIO_Init+0x2f0>)
 8001b8e:	681a      	ldr	r2, [r3, #0]
 8001b90:	4937      	ldr	r1, [pc, #220]	; (8001c70 <HAL_GPIO_Init+0x2f0>)
 8001b92:	69bb      	ldr	r3, [r7, #24]
 8001b94:	4313      	orrs	r3, r2
 8001b96:	600b      	str	r3, [r1, #0]
 8001b98:	e006      	b.n	8001ba8 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001b9a:	4b35      	ldr	r3, [pc, #212]	; (8001c70 <HAL_GPIO_Init+0x2f0>)
 8001b9c:	681a      	ldr	r2, [r3, #0]
 8001b9e:	69bb      	ldr	r3, [r7, #24]
 8001ba0:	43db      	mvns	r3, r3
 8001ba2:	4933      	ldr	r1, [pc, #204]	; (8001c70 <HAL_GPIO_Init+0x2f0>)
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d006      	beq.n	8001bc2 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001bb4:	4b2e      	ldr	r3, [pc, #184]	; (8001c70 <HAL_GPIO_Init+0x2f0>)
 8001bb6:	685a      	ldr	r2, [r3, #4]
 8001bb8:	492d      	ldr	r1, [pc, #180]	; (8001c70 <HAL_GPIO_Init+0x2f0>)
 8001bba:	69bb      	ldr	r3, [r7, #24]
 8001bbc:	4313      	orrs	r3, r2
 8001bbe:	604b      	str	r3, [r1, #4]
 8001bc0:	e006      	b.n	8001bd0 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001bc2:	4b2b      	ldr	r3, [pc, #172]	; (8001c70 <HAL_GPIO_Init+0x2f0>)
 8001bc4:	685a      	ldr	r2, [r3, #4]
 8001bc6:	69bb      	ldr	r3, [r7, #24]
 8001bc8:	43db      	mvns	r3, r3
 8001bca:	4929      	ldr	r1, [pc, #164]	; (8001c70 <HAL_GPIO_Init+0x2f0>)
 8001bcc:	4013      	ands	r3, r2
 8001bce:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d006      	beq.n	8001bea <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001bdc:	4b24      	ldr	r3, [pc, #144]	; (8001c70 <HAL_GPIO_Init+0x2f0>)
 8001bde:	689a      	ldr	r2, [r3, #8]
 8001be0:	4923      	ldr	r1, [pc, #140]	; (8001c70 <HAL_GPIO_Init+0x2f0>)
 8001be2:	69bb      	ldr	r3, [r7, #24]
 8001be4:	4313      	orrs	r3, r2
 8001be6:	608b      	str	r3, [r1, #8]
 8001be8:	e006      	b.n	8001bf8 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001bea:	4b21      	ldr	r3, [pc, #132]	; (8001c70 <HAL_GPIO_Init+0x2f0>)
 8001bec:	689a      	ldr	r2, [r3, #8]
 8001bee:	69bb      	ldr	r3, [r7, #24]
 8001bf0:	43db      	mvns	r3, r3
 8001bf2:	491f      	ldr	r1, [pc, #124]	; (8001c70 <HAL_GPIO_Init+0x2f0>)
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d006      	beq.n	8001c12 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001c04:	4b1a      	ldr	r3, [pc, #104]	; (8001c70 <HAL_GPIO_Init+0x2f0>)
 8001c06:	68da      	ldr	r2, [r3, #12]
 8001c08:	4919      	ldr	r1, [pc, #100]	; (8001c70 <HAL_GPIO_Init+0x2f0>)
 8001c0a:	69bb      	ldr	r3, [r7, #24]
 8001c0c:	4313      	orrs	r3, r2
 8001c0e:	60cb      	str	r3, [r1, #12]
 8001c10:	e006      	b.n	8001c20 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001c12:	4b17      	ldr	r3, [pc, #92]	; (8001c70 <HAL_GPIO_Init+0x2f0>)
 8001c14:	68da      	ldr	r2, [r3, #12]
 8001c16:	69bb      	ldr	r3, [r7, #24]
 8001c18:	43db      	mvns	r3, r3
 8001c1a:	4915      	ldr	r1, [pc, #84]	; (8001c70 <HAL_GPIO_Init+0x2f0>)
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c22:	3301      	adds	r3, #1
 8001c24:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	681a      	ldr	r2, [r3, #0]
 8001c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c2c:	fa22 f303 	lsr.w	r3, r2, r3
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	f47f aeaf 	bne.w	8001994 <HAL_GPIO_Init+0x14>
  }
}
 8001c36:	bf00      	nop
 8001c38:	bf00      	nop
 8001c3a:	372c      	adds	r7, #44	; 0x2c
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bc80      	pop	{r7}
 8001c40:	4770      	bx	lr
 8001c42:	bf00      	nop
 8001c44:	10320000 	.word	0x10320000
 8001c48:	10310000 	.word	0x10310000
 8001c4c:	10220000 	.word	0x10220000
 8001c50:	10210000 	.word	0x10210000
 8001c54:	10120000 	.word	0x10120000
 8001c58:	10110000 	.word	0x10110000
 8001c5c:	40021000 	.word	0x40021000
 8001c60:	40010000 	.word	0x40010000
 8001c64:	40010800 	.word	0x40010800
 8001c68:	40010c00 	.word	0x40010c00
 8001c6c:	40011000 	.word	0x40011000
 8001c70:	40010400 	.word	0x40010400

08001c74 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b085      	sub	sp, #20
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
 8001c7c:	460b      	mov	r3, r1
 8001c7e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	689a      	ldr	r2, [r3, #8]
 8001c84:	887b      	ldrh	r3, [r7, #2]
 8001c86:	4013      	ands	r3, r2
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d002      	beq.n	8001c92 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	73fb      	strb	r3, [r7, #15]
 8001c90:	e001      	b.n	8001c96 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001c92:	2300      	movs	r3, #0
 8001c94:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001c96:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	3714      	adds	r7, #20
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bc80      	pop	{r7}
 8001ca0:	4770      	bx	lr

08001ca2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ca2:	b480      	push	{r7}
 8001ca4:	b083      	sub	sp, #12
 8001ca6:	af00      	add	r7, sp, #0
 8001ca8:	6078      	str	r0, [r7, #4]
 8001caa:	460b      	mov	r3, r1
 8001cac:	807b      	strh	r3, [r7, #2]
 8001cae:	4613      	mov	r3, r2
 8001cb0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001cb2:	787b      	ldrb	r3, [r7, #1]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d003      	beq.n	8001cc0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001cb8:	887a      	ldrh	r2, [r7, #2]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001cbe:	e003      	b.n	8001cc8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001cc0:	887b      	ldrh	r3, [r7, #2]
 8001cc2:	041a      	lsls	r2, r3, #16
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	611a      	str	r2, [r3, #16]
}
 8001cc8:	bf00      	nop
 8001cca:	370c      	adds	r7, #12
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bc80      	pop	{r7}
 8001cd0:	4770      	bx	lr

08001cd2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001cd2:	b480      	push	{r7}
 8001cd4:	b085      	sub	sp, #20
 8001cd6:	af00      	add	r7, sp, #0
 8001cd8:	6078      	str	r0, [r7, #4]
 8001cda:	460b      	mov	r3, r1
 8001cdc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	68db      	ldr	r3, [r3, #12]
 8001ce2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001ce4:	887a      	ldrh	r2, [r7, #2]
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	4013      	ands	r3, r2
 8001cea:	041a      	lsls	r2, r3, #16
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	43d9      	mvns	r1, r3
 8001cf0:	887b      	ldrh	r3, [r7, #2]
 8001cf2:	400b      	ands	r3, r1
 8001cf4:	431a      	orrs	r2, r3
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	611a      	str	r2, [r3, #16]
}
 8001cfa:	bf00      	nop
 8001cfc:	3714      	adds	r7, #20
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bc80      	pop	{r7}
 8001d02:	4770      	bx	lr

08001d04 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b086      	sub	sp, #24
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d101      	bne.n	8001d16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d12:	2301      	movs	r3, #1
 8001d14:	e26c      	b.n	80021f0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f003 0301 	and.w	r3, r3, #1
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	f000 8087 	beq.w	8001e32 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d24:	4b92      	ldr	r3, [pc, #584]	; (8001f70 <HAL_RCC_OscConfig+0x26c>)
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	f003 030c 	and.w	r3, r3, #12
 8001d2c:	2b04      	cmp	r3, #4
 8001d2e:	d00c      	beq.n	8001d4a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001d30:	4b8f      	ldr	r3, [pc, #572]	; (8001f70 <HAL_RCC_OscConfig+0x26c>)
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	f003 030c 	and.w	r3, r3, #12
 8001d38:	2b08      	cmp	r3, #8
 8001d3a:	d112      	bne.n	8001d62 <HAL_RCC_OscConfig+0x5e>
 8001d3c:	4b8c      	ldr	r3, [pc, #560]	; (8001f70 <HAL_RCC_OscConfig+0x26c>)
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d48:	d10b      	bne.n	8001d62 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d4a:	4b89      	ldr	r3, [pc, #548]	; (8001f70 <HAL_RCC_OscConfig+0x26c>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d06c      	beq.n	8001e30 <HAL_RCC_OscConfig+0x12c>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d168      	bne.n	8001e30 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	e246      	b.n	80021f0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d6a:	d106      	bne.n	8001d7a <HAL_RCC_OscConfig+0x76>
 8001d6c:	4b80      	ldr	r3, [pc, #512]	; (8001f70 <HAL_RCC_OscConfig+0x26c>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a7f      	ldr	r2, [pc, #508]	; (8001f70 <HAL_RCC_OscConfig+0x26c>)
 8001d72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d76:	6013      	str	r3, [r2, #0]
 8001d78:	e02e      	b.n	8001dd8 <HAL_RCC_OscConfig+0xd4>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d10c      	bne.n	8001d9c <HAL_RCC_OscConfig+0x98>
 8001d82:	4b7b      	ldr	r3, [pc, #492]	; (8001f70 <HAL_RCC_OscConfig+0x26c>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4a7a      	ldr	r2, [pc, #488]	; (8001f70 <HAL_RCC_OscConfig+0x26c>)
 8001d88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d8c:	6013      	str	r3, [r2, #0]
 8001d8e:	4b78      	ldr	r3, [pc, #480]	; (8001f70 <HAL_RCC_OscConfig+0x26c>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4a77      	ldr	r2, [pc, #476]	; (8001f70 <HAL_RCC_OscConfig+0x26c>)
 8001d94:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d98:	6013      	str	r3, [r2, #0]
 8001d9a:	e01d      	b.n	8001dd8 <HAL_RCC_OscConfig+0xd4>
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001da4:	d10c      	bne.n	8001dc0 <HAL_RCC_OscConfig+0xbc>
 8001da6:	4b72      	ldr	r3, [pc, #456]	; (8001f70 <HAL_RCC_OscConfig+0x26c>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4a71      	ldr	r2, [pc, #452]	; (8001f70 <HAL_RCC_OscConfig+0x26c>)
 8001dac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001db0:	6013      	str	r3, [r2, #0]
 8001db2:	4b6f      	ldr	r3, [pc, #444]	; (8001f70 <HAL_RCC_OscConfig+0x26c>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4a6e      	ldr	r2, [pc, #440]	; (8001f70 <HAL_RCC_OscConfig+0x26c>)
 8001db8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dbc:	6013      	str	r3, [r2, #0]
 8001dbe:	e00b      	b.n	8001dd8 <HAL_RCC_OscConfig+0xd4>
 8001dc0:	4b6b      	ldr	r3, [pc, #428]	; (8001f70 <HAL_RCC_OscConfig+0x26c>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a6a      	ldr	r2, [pc, #424]	; (8001f70 <HAL_RCC_OscConfig+0x26c>)
 8001dc6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dca:	6013      	str	r3, [r2, #0]
 8001dcc:	4b68      	ldr	r3, [pc, #416]	; (8001f70 <HAL_RCC_OscConfig+0x26c>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a67      	ldr	r2, [pc, #412]	; (8001f70 <HAL_RCC_OscConfig+0x26c>)
 8001dd2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001dd6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d013      	beq.n	8001e08 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001de0:	f7ff fcb6 	bl	8001750 <HAL_GetTick>
 8001de4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001de6:	e008      	b.n	8001dfa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001de8:	f7ff fcb2 	bl	8001750 <HAL_GetTick>
 8001dec:	4602      	mov	r2, r0
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	1ad3      	subs	r3, r2, r3
 8001df2:	2b64      	cmp	r3, #100	; 0x64
 8001df4:	d901      	bls.n	8001dfa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001df6:	2303      	movs	r3, #3
 8001df8:	e1fa      	b.n	80021f0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dfa:	4b5d      	ldr	r3, [pc, #372]	; (8001f70 <HAL_RCC_OscConfig+0x26c>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d0f0      	beq.n	8001de8 <HAL_RCC_OscConfig+0xe4>
 8001e06:	e014      	b.n	8001e32 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e08:	f7ff fca2 	bl	8001750 <HAL_GetTick>
 8001e0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e0e:	e008      	b.n	8001e22 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e10:	f7ff fc9e 	bl	8001750 <HAL_GetTick>
 8001e14:	4602      	mov	r2, r0
 8001e16:	693b      	ldr	r3, [r7, #16]
 8001e18:	1ad3      	subs	r3, r2, r3
 8001e1a:	2b64      	cmp	r3, #100	; 0x64
 8001e1c:	d901      	bls.n	8001e22 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001e1e:	2303      	movs	r3, #3
 8001e20:	e1e6      	b.n	80021f0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e22:	4b53      	ldr	r3, [pc, #332]	; (8001f70 <HAL_RCC_OscConfig+0x26c>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d1f0      	bne.n	8001e10 <HAL_RCC_OscConfig+0x10c>
 8001e2e:	e000      	b.n	8001e32 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f003 0302 	and.w	r3, r3, #2
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d063      	beq.n	8001f06 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e3e:	4b4c      	ldr	r3, [pc, #304]	; (8001f70 <HAL_RCC_OscConfig+0x26c>)
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	f003 030c 	and.w	r3, r3, #12
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d00b      	beq.n	8001e62 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001e4a:	4b49      	ldr	r3, [pc, #292]	; (8001f70 <HAL_RCC_OscConfig+0x26c>)
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	f003 030c 	and.w	r3, r3, #12
 8001e52:	2b08      	cmp	r3, #8
 8001e54:	d11c      	bne.n	8001e90 <HAL_RCC_OscConfig+0x18c>
 8001e56:	4b46      	ldr	r3, [pc, #280]	; (8001f70 <HAL_RCC_OscConfig+0x26c>)
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d116      	bne.n	8001e90 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e62:	4b43      	ldr	r3, [pc, #268]	; (8001f70 <HAL_RCC_OscConfig+0x26c>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f003 0302 	and.w	r3, r3, #2
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d005      	beq.n	8001e7a <HAL_RCC_OscConfig+0x176>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	691b      	ldr	r3, [r3, #16]
 8001e72:	2b01      	cmp	r3, #1
 8001e74:	d001      	beq.n	8001e7a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001e76:	2301      	movs	r3, #1
 8001e78:	e1ba      	b.n	80021f0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e7a:	4b3d      	ldr	r3, [pc, #244]	; (8001f70 <HAL_RCC_OscConfig+0x26c>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	695b      	ldr	r3, [r3, #20]
 8001e86:	00db      	lsls	r3, r3, #3
 8001e88:	4939      	ldr	r1, [pc, #228]	; (8001f70 <HAL_RCC_OscConfig+0x26c>)
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e8e:	e03a      	b.n	8001f06 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	691b      	ldr	r3, [r3, #16]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d020      	beq.n	8001eda <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e98:	4b36      	ldr	r3, [pc, #216]	; (8001f74 <HAL_RCC_OscConfig+0x270>)
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e9e:	f7ff fc57 	bl	8001750 <HAL_GetTick>
 8001ea2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ea4:	e008      	b.n	8001eb8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ea6:	f7ff fc53 	bl	8001750 <HAL_GetTick>
 8001eaa:	4602      	mov	r2, r0
 8001eac:	693b      	ldr	r3, [r7, #16]
 8001eae:	1ad3      	subs	r3, r2, r3
 8001eb0:	2b02      	cmp	r3, #2
 8001eb2:	d901      	bls.n	8001eb8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001eb4:	2303      	movs	r3, #3
 8001eb6:	e19b      	b.n	80021f0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001eb8:	4b2d      	ldr	r3, [pc, #180]	; (8001f70 <HAL_RCC_OscConfig+0x26c>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f003 0302 	and.w	r3, r3, #2
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d0f0      	beq.n	8001ea6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ec4:	4b2a      	ldr	r3, [pc, #168]	; (8001f70 <HAL_RCC_OscConfig+0x26c>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	695b      	ldr	r3, [r3, #20]
 8001ed0:	00db      	lsls	r3, r3, #3
 8001ed2:	4927      	ldr	r1, [pc, #156]	; (8001f70 <HAL_RCC_OscConfig+0x26c>)
 8001ed4:	4313      	orrs	r3, r2
 8001ed6:	600b      	str	r3, [r1, #0]
 8001ed8:	e015      	b.n	8001f06 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001eda:	4b26      	ldr	r3, [pc, #152]	; (8001f74 <HAL_RCC_OscConfig+0x270>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ee0:	f7ff fc36 	bl	8001750 <HAL_GetTick>
 8001ee4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ee6:	e008      	b.n	8001efa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ee8:	f7ff fc32 	bl	8001750 <HAL_GetTick>
 8001eec:	4602      	mov	r2, r0
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	1ad3      	subs	r3, r2, r3
 8001ef2:	2b02      	cmp	r3, #2
 8001ef4:	d901      	bls.n	8001efa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001ef6:	2303      	movs	r3, #3
 8001ef8:	e17a      	b.n	80021f0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001efa:	4b1d      	ldr	r3, [pc, #116]	; (8001f70 <HAL_RCC_OscConfig+0x26c>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f003 0302 	and.w	r3, r3, #2
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d1f0      	bne.n	8001ee8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f003 0308 	and.w	r3, r3, #8
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d03a      	beq.n	8001f88 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	699b      	ldr	r3, [r3, #24]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d019      	beq.n	8001f4e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f1a:	4b17      	ldr	r3, [pc, #92]	; (8001f78 <HAL_RCC_OscConfig+0x274>)
 8001f1c:	2201      	movs	r2, #1
 8001f1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f20:	f7ff fc16 	bl	8001750 <HAL_GetTick>
 8001f24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f26:	e008      	b.n	8001f3a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f28:	f7ff fc12 	bl	8001750 <HAL_GetTick>
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	1ad3      	subs	r3, r2, r3
 8001f32:	2b02      	cmp	r3, #2
 8001f34:	d901      	bls.n	8001f3a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001f36:	2303      	movs	r3, #3
 8001f38:	e15a      	b.n	80021f0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f3a:	4b0d      	ldr	r3, [pc, #52]	; (8001f70 <HAL_RCC_OscConfig+0x26c>)
 8001f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f3e:	f003 0302 	and.w	r3, r3, #2
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d0f0      	beq.n	8001f28 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001f46:	2001      	movs	r0, #1
 8001f48:	f000 faa6 	bl	8002498 <RCC_Delay>
 8001f4c:	e01c      	b.n	8001f88 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f4e:	4b0a      	ldr	r3, [pc, #40]	; (8001f78 <HAL_RCC_OscConfig+0x274>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f54:	f7ff fbfc 	bl	8001750 <HAL_GetTick>
 8001f58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f5a:	e00f      	b.n	8001f7c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f5c:	f7ff fbf8 	bl	8001750 <HAL_GetTick>
 8001f60:	4602      	mov	r2, r0
 8001f62:	693b      	ldr	r3, [r7, #16]
 8001f64:	1ad3      	subs	r3, r2, r3
 8001f66:	2b02      	cmp	r3, #2
 8001f68:	d908      	bls.n	8001f7c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001f6a:	2303      	movs	r3, #3
 8001f6c:	e140      	b.n	80021f0 <HAL_RCC_OscConfig+0x4ec>
 8001f6e:	bf00      	nop
 8001f70:	40021000 	.word	0x40021000
 8001f74:	42420000 	.word	0x42420000
 8001f78:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f7c:	4b9e      	ldr	r3, [pc, #632]	; (80021f8 <HAL_RCC_OscConfig+0x4f4>)
 8001f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f80:	f003 0302 	and.w	r3, r3, #2
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d1e9      	bne.n	8001f5c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f003 0304 	and.w	r3, r3, #4
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	f000 80a6 	beq.w	80020e2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f96:	2300      	movs	r3, #0
 8001f98:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f9a:	4b97      	ldr	r3, [pc, #604]	; (80021f8 <HAL_RCC_OscConfig+0x4f4>)
 8001f9c:	69db      	ldr	r3, [r3, #28]
 8001f9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d10d      	bne.n	8001fc2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fa6:	4b94      	ldr	r3, [pc, #592]	; (80021f8 <HAL_RCC_OscConfig+0x4f4>)
 8001fa8:	69db      	ldr	r3, [r3, #28]
 8001faa:	4a93      	ldr	r2, [pc, #588]	; (80021f8 <HAL_RCC_OscConfig+0x4f4>)
 8001fac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fb0:	61d3      	str	r3, [r2, #28]
 8001fb2:	4b91      	ldr	r3, [pc, #580]	; (80021f8 <HAL_RCC_OscConfig+0x4f4>)
 8001fb4:	69db      	ldr	r3, [r3, #28]
 8001fb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fba:	60bb      	str	r3, [r7, #8]
 8001fbc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fc2:	4b8e      	ldr	r3, [pc, #568]	; (80021fc <HAL_RCC_OscConfig+0x4f8>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d118      	bne.n	8002000 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001fce:	4b8b      	ldr	r3, [pc, #556]	; (80021fc <HAL_RCC_OscConfig+0x4f8>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4a8a      	ldr	r2, [pc, #552]	; (80021fc <HAL_RCC_OscConfig+0x4f8>)
 8001fd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fd8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fda:	f7ff fbb9 	bl	8001750 <HAL_GetTick>
 8001fde:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fe0:	e008      	b.n	8001ff4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fe2:	f7ff fbb5 	bl	8001750 <HAL_GetTick>
 8001fe6:	4602      	mov	r2, r0
 8001fe8:	693b      	ldr	r3, [r7, #16]
 8001fea:	1ad3      	subs	r3, r2, r3
 8001fec:	2b64      	cmp	r3, #100	; 0x64
 8001fee:	d901      	bls.n	8001ff4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001ff0:	2303      	movs	r3, #3
 8001ff2:	e0fd      	b.n	80021f0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ff4:	4b81      	ldr	r3, [pc, #516]	; (80021fc <HAL_RCC_OscConfig+0x4f8>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d0f0      	beq.n	8001fe2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	68db      	ldr	r3, [r3, #12]
 8002004:	2b01      	cmp	r3, #1
 8002006:	d106      	bne.n	8002016 <HAL_RCC_OscConfig+0x312>
 8002008:	4b7b      	ldr	r3, [pc, #492]	; (80021f8 <HAL_RCC_OscConfig+0x4f4>)
 800200a:	6a1b      	ldr	r3, [r3, #32]
 800200c:	4a7a      	ldr	r2, [pc, #488]	; (80021f8 <HAL_RCC_OscConfig+0x4f4>)
 800200e:	f043 0301 	orr.w	r3, r3, #1
 8002012:	6213      	str	r3, [r2, #32]
 8002014:	e02d      	b.n	8002072 <HAL_RCC_OscConfig+0x36e>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	68db      	ldr	r3, [r3, #12]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d10c      	bne.n	8002038 <HAL_RCC_OscConfig+0x334>
 800201e:	4b76      	ldr	r3, [pc, #472]	; (80021f8 <HAL_RCC_OscConfig+0x4f4>)
 8002020:	6a1b      	ldr	r3, [r3, #32]
 8002022:	4a75      	ldr	r2, [pc, #468]	; (80021f8 <HAL_RCC_OscConfig+0x4f4>)
 8002024:	f023 0301 	bic.w	r3, r3, #1
 8002028:	6213      	str	r3, [r2, #32]
 800202a:	4b73      	ldr	r3, [pc, #460]	; (80021f8 <HAL_RCC_OscConfig+0x4f4>)
 800202c:	6a1b      	ldr	r3, [r3, #32]
 800202e:	4a72      	ldr	r2, [pc, #456]	; (80021f8 <HAL_RCC_OscConfig+0x4f4>)
 8002030:	f023 0304 	bic.w	r3, r3, #4
 8002034:	6213      	str	r3, [r2, #32]
 8002036:	e01c      	b.n	8002072 <HAL_RCC_OscConfig+0x36e>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	68db      	ldr	r3, [r3, #12]
 800203c:	2b05      	cmp	r3, #5
 800203e:	d10c      	bne.n	800205a <HAL_RCC_OscConfig+0x356>
 8002040:	4b6d      	ldr	r3, [pc, #436]	; (80021f8 <HAL_RCC_OscConfig+0x4f4>)
 8002042:	6a1b      	ldr	r3, [r3, #32]
 8002044:	4a6c      	ldr	r2, [pc, #432]	; (80021f8 <HAL_RCC_OscConfig+0x4f4>)
 8002046:	f043 0304 	orr.w	r3, r3, #4
 800204a:	6213      	str	r3, [r2, #32]
 800204c:	4b6a      	ldr	r3, [pc, #424]	; (80021f8 <HAL_RCC_OscConfig+0x4f4>)
 800204e:	6a1b      	ldr	r3, [r3, #32]
 8002050:	4a69      	ldr	r2, [pc, #420]	; (80021f8 <HAL_RCC_OscConfig+0x4f4>)
 8002052:	f043 0301 	orr.w	r3, r3, #1
 8002056:	6213      	str	r3, [r2, #32]
 8002058:	e00b      	b.n	8002072 <HAL_RCC_OscConfig+0x36e>
 800205a:	4b67      	ldr	r3, [pc, #412]	; (80021f8 <HAL_RCC_OscConfig+0x4f4>)
 800205c:	6a1b      	ldr	r3, [r3, #32]
 800205e:	4a66      	ldr	r2, [pc, #408]	; (80021f8 <HAL_RCC_OscConfig+0x4f4>)
 8002060:	f023 0301 	bic.w	r3, r3, #1
 8002064:	6213      	str	r3, [r2, #32]
 8002066:	4b64      	ldr	r3, [pc, #400]	; (80021f8 <HAL_RCC_OscConfig+0x4f4>)
 8002068:	6a1b      	ldr	r3, [r3, #32]
 800206a:	4a63      	ldr	r2, [pc, #396]	; (80021f8 <HAL_RCC_OscConfig+0x4f4>)
 800206c:	f023 0304 	bic.w	r3, r3, #4
 8002070:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	68db      	ldr	r3, [r3, #12]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d015      	beq.n	80020a6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800207a:	f7ff fb69 	bl	8001750 <HAL_GetTick>
 800207e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002080:	e00a      	b.n	8002098 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002082:	f7ff fb65 	bl	8001750 <HAL_GetTick>
 8002086:	4602      	mov	r2, r0
 8002088:	693b      	ldr	r3, [r7, #16]
 800208a:	1ad3      	subs	r3, r2, r3
 800208c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002090:	4293      	cmp	r3, r2
 8002092:	d901      	bls.n	8002098 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002094:	2303      	movs	r3, #3
 8002096:	e0ab      	b.n	80021f0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002098:	4b57      	ldr	r3, [pc, #348]	; (80021f8 <HAL_RCC_OscConfig+0x4f4>)
 800209a:	6a1b      	ldr	r3, [r3, #32]
 800209c:	f003 0302 	and.w	r3, r3, #2
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d0ee      	beq.n	8002082 <HAL_RCC_OscConfig+0x37e>
 80020a4:	e014      	b.n	80020d0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020a6:	f7ff fb53 	bl	8001750 <HAL_GetTick>
 80020aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020ac:	e00a      	b.n	80020c4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020ae:	f7ff fb4f 	bl	8001750 <HAL_GetTick>
 80020b2:	4602      	mov	r2, r0
 80020b4:	693b      	ldr	r3, [r7, #16]
 80020b6:	1ad3      	subs	r3, r2, r3
 80020b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80020bc:	4293      	cmp	r3, r2
 80020be:	d901      	bls.n	80020c4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80020c0:	2303      	movs	r3, #3
 80020c2:	e095      	b.n	80021f0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020c4:	4b4c      	ldr	r3, [pc, #304]	; (80021f8 <HAL_RCC_OscConfig+0x4f4>)
 80020c6:	6a1b      	ldr	r3, [r3, #32]
 80020c8:	f003 0302 	and.w	r3, r3, #2
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d1ee      	bne.n	80020ae <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80020d0:	7dfb      	ldrb	r3, [r7, #23]
 80020d2:	2b01      	cmp	r3, #1
 80020d4:	d105      	bne.n	80020e2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020d6:	4b48      	ldr	r3, [pc, #288]	; (80021f8 <HAL_RCC_OscConfig+0x4f4>)
 80020d8:	69db      	ldr	r3, [r3, #28]
 80020da:	4a47      	ldr	r2, [pc, #284]	; (80021f8 <HAL_RCC_OscConfig+0x4f4>)
 80020dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020e0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	69db      	ldr	r3, [r3, #28]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	f000 8081 	beq.w	80021ee <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80020ec:	4b42      	ldr	r3, [pc, #264]	; (80021f8 <HAL_RCC_OscConfig+0x4f4>)
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	f003 030c 	and.w	r3, r3, #12
 80020f4:	2b08      	cmp	r3, #8
 80020f6:	d061      	beq.n	80021bc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	69db      	ldr	r3, [r3, #28]
 80020fc:	2b02      	cmp	r3, #2
 80020fe:	d146      	bne.n	800218e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002100:	4b3f      	ldr	r3, [pc, #252]	; (8002200 <HAL_RCC_OscConfig+0x4fc>)
 8002102:	2200      	movs	r2, #0
 8002104:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002106:	f7ff fb23 	bl	8001750 <HAL_GetTick>
 800210a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800210c:	e008      	b.n	8002120 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800210e:	f7ff fb1f 	bl	8001750 <HAL_GetTick>
 8002112:	4602      	mov	r2, r0
 8002114:	693b      	ldr	r3, [r7, #16]
 8002116:	1ad3      	subs	r3, r2, r3
 8002118:	2b02      	cmp	r3, #2
 800211a:	d901      	bls.n	8002120 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800211c:	2303      	movs	r3, #3
 800211e:	e067      	b.n	80021f0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002120:	4b35      	ldr	r3, [pc, #212]	; (80021f8 <HAL_RCC_OscConfig+0x4f4>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002128:	2b00      	cmp	r3, #0
 800212a:	d1f0      	bne.n	800210e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6a1b      	ldr	r3, [r3, #32]
 8002130:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002134:	d108      	bne.n	8002148 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002136:	4b30      	ldr	r3, [pc, #192]	; (80021f8 <HAL_RCC_OscConfig+0x4f4>)
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	689b      	ldr	r3, [r3, #8]
 8002142:	492d      	ldr	r1, [pc, #180]	; (80021f8 <HAL_RCC_OscConfig+0x4f4>)
 8002144:	4313      	orrs	r3, r2
 8002146:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002148:	4b2b      	ldr	r3, [pc, #172]	; (80021f8 <HAL_RCC_OscConfig+0x4f4>)
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6a19      	ldr	r1, [r3, #32]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002158:	430b      	orrs	r3, r1
 800215a:	4927      	ldr	r1, [pc, #156]	; (80021f8 <HAL_RCC_OscConfig+0x4f4>)
 800215c:	4313      	orrs	r3, r2
 800215e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002160:	4b27      	ldr	r3, [pc, #156]	; (8002200 <HAL_RCC_OscConfig+0x4fc>)
 8002162:	2201      	movs	r2, #1
 8002164:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002166:	f7ff faf3 	bl	8001750 <HAL_GetTick>
 800216a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800216c:	e008      	b.n	8002180 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800216e:	f7ff faef 	bl	8001750 <HAL_GetTick>
 8002172:	4602      	mov	r2, r0
 8002174:	693b      	ldr	r3, [r7, #16]
 8002176:	1ad3      	subs	r3, r2, r3
 8002178:	2b02      	cmp	r3, #2
 800217a:	d901      	bls.n	8002180 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800217c:	2303      	movs	r3, #3
 800217e:	e037      	b.n	80021f0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002180:	4b1d      	ldr	r3, [pc, #116]	; (80021f8 <HAL_RCC_OscConfig+0x4f4>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002188:	2b00      	cmp	r3, #0
 800218a:	d0f0      	beq.n	800216e <HAL_RCC_OscConfig+0x46a>
 800218c:	e02f      	b.n	80021ee <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800218e:	4b1c      	ldr	r3, [pc, #112]	; (8002200 <HAL_RCC_OscConfig+0x4fc>)
 8002190:	2200      	movs	r2, #0
 8002192:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002194:	f7ff fadc 	bl	8001750 <HAL_GetTick>
 8002198:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800219a:	e008      	b.n	80021ae <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800219c:	f7ff fad8 	bl	8001750 <HAL_GetTick>
 80021a0:	4602      	mov	r2, r0
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	1ad3      	subs	r3, r2, r3
 80021a6:	2b02      	cmp	r3, #2
 80021a8:	d901      	bls.n	80021ae <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80021aa:	2303      	movs	r3, #3
 80021ac:	e020      	b.n	80021f0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021ae:	4b12      	ldr	r3, [pc, #72]	; (80021f8 <HAL_RCC_OscConfig+0x4f4>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d1f0      	bne.n	800219c <HAL_RCC_OscConfig+0x498>
 80021ba:	e018      	b.n	80021ee <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	69db      	ldr	r3, [r3, #28]
 80021c0:	2b01      	cmp	r3, #1
 80021c2:	d101      	bne.n	80021c8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80021c4:	2301      	movs	r3, #1
 80021c6:	e013      	b.n	80021f0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80021c8:	4b0b      	ldr	r3, [pc, #44]	; (80021f8 <HAL_RCC_OscConfig+0x4f4>)
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6a1b      	ldr	r3, [r3, #32]
 80021d8:	429a      	cmp	r2, r3
 80021da:	d106      	bne.n	80021ea <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021e6:	429a      	cmp	r2, r3
 80021e8:	d001      	beq.n	80021ee <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80021ea:	2301      	movs	r3, #1
 80021ec:	e000      	b.n	80021f0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80021ee:	2300      	movs	r3, #0
}
 80021f0:	4618      	mov	r0, r3
 80021f2:	3718      	adds	r7, #24
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}
 80021f8:	40021000 	.word	0x40021000
 80021fc:	40007000 	.word	0x40007000
 8002200:	42420060 	.word	0x42420060

08002204 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b084      	sub	sp, #16
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
 800220c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d101      	bne.n	8002218 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002214:	2301      	movs	r3, #1
 8002216:	e0d0      	b.n	80023ba <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002218:	4b6a      	ldr	r3, [pc, #424]	; (80023c4 <HAL_RCC_ClockConfig+0x1c0>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f003 0307 	and.w	r3, r3, #7
 8002220:	683a      	ldr	r2, [r7, #0]
 8002222:	429a      	cmp	r2, r3
 8002224:	d910      	bls.n	8002248 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002226:	4b67      	ldr	r3, [pc, #412]	; (80023c4 <HAL_RCC_ClockConfig+0x1c0>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f023 0207 	bic.w	r2, r3, #7
 800222e:	4965      	ldr	r1, [pc, #404]	; (80023c4 <HAL_RCC_ClockConfig+0x1c0>)
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	4313      	orrs	r3, r2
 8002234:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002236:	4b63      	ldr	r3, [pc, #396]	; (80023c4 <HAL_RCC_ClockConfig+0x1c0>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f003 0307 	and.w	r3, r3, #7
 800223e:	683a      	ldr	r2, [r7, #0]
 8002240:	429a      	cmp	r2, r3
 8002242:	d001      	beq.n	8002248 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002244:	2301      	movs	r3, #1
 8002246:	e0b8      	b.n	80023ba <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f003 0302 	and.w	r3, r3, #2
 8002250:	2b00      	cmp	r3, #0
 8002252:	d020      	beq.n	8002296 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f003 0304 	and.w	r3, r3, #4
 800225c:	2b00      	cmp	r3, #0
 800225e:	d005      	beq.n	800226c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002260:	4b59      	ldr	r3, [pc, #356]	; (80023c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	4a58      	ldr	r2, [pc, #352]	; (80023c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002266:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800226a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f003 0308 	and.w	r3, r3, #8
 8002274:	2b00      	cmp	r3, #0
 8002276:	d005      	beq.n	8002284 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002278:	4b53      	ldr	r3, [pc, #332]	; (80023c8 <HAL_RCC_ClockConfig+0x1c4>)
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	4a52      	ldr	r2, [pc, #328]	; (80023c8 <HAL_RCC_ClockConfig+0x1c4>)
 800227e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002282:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002284:	4b50      	ldr	r3, [pc, #320]	; (80023c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	689b      	ldr	r3, [r3, #8]
 8002290:	494d      	ldr	r1, [pc, #308]	; (80023c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002292:	4313      	orrs	r3, r2
 8002294:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f003 0301 	and.w	r3, r3, #1
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d040      	beq.n	8002324 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	2b01      	cmp	r3, #1
 80022a8:	d107      	bne.n	80022ba <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022aa:	4b47      	ldr	r3, [pc, #284]	; (80023c8 <HAL_RCC_ClockConfig+0x1c4>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d115      	bne.n	80022e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022b6:	2301      	movs	r3, #1
 80022b8:	e07f      	b.n	80023ba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	2b02      	cmp	r3, #2
 80022c0:	d107      	bne.n	80022d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022c2:	4b41      	ldr	r3, [pc, #260]	; (80023c8 <HAL_RCC_ClockConfig+0x1c4>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d109      	bne.n	80022e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	e073      	b.n	80023ba <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022d2:	4b3d      	ldr	r3, [pc, #244]	; (80023c8 <HAL_RCC_ClockConfig+0x1c4>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f003 0302 	and.w	r3, r3, #2
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d101      	bne.n	80022e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022de:	2301      	movs	r3, #1
 80022e0:	e06b      	b.n	80023ba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022e2:	4b39      	ldr	r3, [pc, #228]	; (80023c8 <HAL_RCC_ClockConfig+0x1c4>)
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	f023 0203 	bic.w	r2, r3, #3
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	4936      	ldr	r1, [pc, #216]	; (80023c8 <HAL_RCC_ClockConfig+0x1c4>)
 80022f0:	4313      	orrs	r3, r2
 80022f2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022f4:	f7ff fa2c 	bl	8001750 <HAL_GetTick>
 80022f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022fa:	e00a      	b.n	8002312 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022fc:	f7ff fa28 	bl	8001750 <HAL_GetTick>
 8002300:	4602      	mov	r2, r0
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	1ad3      	subs	r3, r2, r3
 8002306:	f241 3288 	movw	r2, #5000	; 0x1388
 800230a:	4293      	cmp	r3, r2
 800230c:	d901      	bls.n	8002312 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800230e:	2303      	movs	r3, #3
 8002310:	e053      	b.n	80023ba <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002312:	4b2d      	ldr	r3, [pc, #180]	; (80023c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	f003 020c 	and.w	r2, r3, #12
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	009b      	lsls	r3, r3, #2
 8002320:	429a      	cmp	r2, r3
 8002322:	d1eb      	bne.n	80022fc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002324:	4b27      	ldr	r3, [pc, #156]	; (80023c4 <HAL_RCC_ClockConfig+0x1c0>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f003 0307 	and.w	r3, r3, #7
 800232c:	683a      	ldr	r2, [r7, #0]
 800232e:	429a      	cmp	r2, r3
 8002330:	d210      	bcs.n	8002354 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002332:	4b24      	ldr	r3, [pc, #144]	; (80023c4 <HAL_RCC_ClockConfig+0x1c0>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f023 0207 	bic.w	r2, r3, #7
 800233a:	4922      	ldr	r1, [pc, #136]	; (80023c4 <HAL_RCC_ClockConfig+0x1c0>)
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	4313      	orrs	r3, r2
 8002340:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002342:	4b20      	ldr	r3, [pc, #128]	; (80023c4 <HAL_RCC_ClockConfig+0x1c0>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f003 0307 	and.w	r3, r3, #7
 800234a:	683a      	ldr	r2, [r7, #0]
 800234c:	429a      	cmp	r2, r3
 800234e:	d001      	beq.n	8002354 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002350:	2301      	movs	r3, #1
 8002352:	e032      	b.n	80023ba <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f003 0304 	and.w	r3, r3, #4
 800235c:	2b00      	cmp	r3, #0
 800235e:	d008      	beq.n	8002372 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002360:	4b19      	ldr	r3, [pc, #100]	; (80023c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	68db      	ldr	r3, [r3, #12]
 800236c:	4916      	ldr	r1, [pc, #88]	; (80023c8 <HAL_RCC_ClockConfig+0x1c4>)
 800236e:	4313      	orrs	r3, r2
 8002370:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f003 0308 	and.w	r3, r3, #8
 800237a:	2b00      	cmp	r3, #0
 800237c:	d009      	beq.n	8002392 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800237e:	4b12      	ldr	r3, [pc, #72]	; (80023c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	691b      	ldr	r3, [r3, #16]
 800238a:	00db      	lsls	r3, r3, #3
 800238c:	490e      	ldr	r1, [pc, #56]	; (80023c8 <HAL_RCC_ClockConfig+0x1c4>)
 800238e:	4313      	orrs	r3, r2
 8002390:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002392:	f000 f821 	bl	80023d8 <HAL_RCC_GetSysClockFreq>
 8002396:	4602      	mov	r2, r0
 8002398:	4b0b      	ldr	r3, [pc, #44]	; (80023c8 <HAL_RCC_ClockConfig+0x1c4>)
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	091b      	lsrs	r3, r3, #4
 800239e:	f003 030f 	and.w	r3, r3, #15
 80023a2:	490a      	ldr	r1, [pc, #40]	; (80023cc <HAL_RCC_ClockConfig+0x1c8>)
 80023a4:	5ccb      	ldrb	r3, [r1, r3]
 80023a6:	fa22 f303 	lsr.w	r3, r2, r3
 80023aa:	4a09      	ldr	r2, [pc, #36]	; (80023d0 <HAL_RCC_ClockConfig+0x1cc>)
 80023ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80023ae:	4b09      	ldr	r3, [pc, #36]	; (80023d4 <HAL_RCC_ClockConfig+0x1d0>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4618      	mov	r0, r3
 80023b4:	f7ff f98a 	bl	80016cc <HAL_InitTick>

  return HAL_OK;
 80023b8:	2300      	movs	r3, #0
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	3710      	adds	r7, #16
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	bf00      	nop
 80023c4:	40022000 	.word	0x40022000
 80023c8:	40021000 	.word	0x40021000
 80023cc:	08002d1c 	.word	0x08002d1c
 80023d0:	20000050 	.word	0x20000050
 80023d4:	20000054 	.word	0x20000054

080023d8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023d8:	b490      	push	{r4, r7}
 80023da:	b08a      	sub	sp, #40	; 0x28
 80023dc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80023de:	4b2a      	ldr	r3, [pc, #168]	; (8002488 <HAL_RCC_GetSysClockFreq+0xb0>)
 80023e0:	1d3c      	adds	r4, r7, #4
 80023e2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80023e4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80023e8:	f240 2301 	movw	r3, #513	; 0x201
 80023ec:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80023ee:	2300      	movs	r3, #0
 80023f0:	61fb      	str	r3, [r7, #28]
 80023f2:	2300      	movs	r3, #0
 80023f4:	61bb      	str	r3, [r7, #24]
 80023f6:	2300      	movs	r3, #0
 80023f8:	627b      	str	r3, [r7, #36]	; 0x24
 80023fa:	2300      	movs	r3, #0
 80023fc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80023fe:	2300      	movs	r3, #0
 8002400:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002402:	4b22      	ldr	r3, [pc, #136]	; (800248c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002408:	69fb      	ldr	r3, [r7, #28]
 800240a:	f003 030c 	and.w	r3, r3, #12
 800240e:	2b04      	cmp	r3, #4
 8002410:	d002      	beq.n	8002418 <HAL_RCC_GetSysClockFreq+0x40>
 8002412:	2b08      	cmp	r3, #8
 8002414:	d003      	beq.n	800241e <HAL_RCC_GetSysClockFreq+0x46>
 8002416:	e02d      	b.n	8002474 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002418:	4b1d      	ldr	r3, [pc, #116]	; (8002490 <HAL_RCC_GetSysClockFreq+0xb8>)
 800241a:	623b      	str	r3, [r7, #32]
      break;
 800241c:	e02d      	b.n	800247a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800241e:	69fb      	ldr	r3, [r7, #28]
 8002420:	0c9b      	lsrs	r3, r3, #18
 8002422:	f003 030f 	and.w	r3, r3, #15
 8002426:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800242a:	4413      	add	r3, r2
 800242c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002430:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002432:	69fb      	ldr	r3, [r7, #28]
 8002434:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002438:	2b00      	cmp	r3, #0
 800243a:	d013      	beq.n	8002464 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800243c:	4b13      	ldr	r3, [pc, #76]	; (800248c <HAL_RCC_GetSysClockFreq+0xb4>)
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	0c5b      	lsrs	r3, r3, #17
 8002442:	f003 0301 	and.w	r3, r3, #1
 8002446:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800244a:	4413      	add	r3, r2
 800244c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002450:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	4a0e      	ldr	r2, [pc, #56]	; (8002490 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002456:	fb02 f203 	mul.w	r2, r2, r3
 800245a:	69bb      	ldr	r3, [r7, #24]
 800245c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002460:	627b      	str	r3, [r7, #36]	; 0x24
 8002462:	e004      	b.n	800246e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	4a0b      	ldr	r2, [pc, #44]	; (8002494 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002468:	fb02 f303 	mul.w	r3, r2, r3
 800246c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800246e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002470:	623b      	str	r3, [r7, #32]
      break;
 8002472:	e002      	b.n	800247a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002474:	4b06      	ldr	r3, [pc, #24]	; (8002490 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002476:	623b      	str	r3, [r7, #32]
      break;
 8002478:	bf00      	nop
    }
  }
  return sysclockfreq;
 800247a:	6a3b      	ldr	r3, [r7, #32]
}
 800247c:	4618      	mov	r0, r3
 800247e:	3728      	adds	r7, #40	; 0x28
 8002480:	46bd      	mov	sp, r7
 8002482:	bc90      	pop	{r4, r7}
 8002484:	4770      	bx	lr
 8002486:	bf00      	nop
 8002488:	08002d0c 	.word	0x08002d0c
 800248c:	40021000 	.word	0x40021000
 8002490:	007a1200 	.word	0x007a1200
 8002494:	003d0900 	.word	0x003d0900

08002498 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002498:	b480      	push	{r7}
 800249a:	b085      	sub	sp, #20
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80024a0:	4b0a      	ldr	r3, [pc, #40]	; (80024cc <RCC_Delay+0x34>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a0a      	ldr	r2, [pc, #40]	; (80024d0 <RCC_Delay+0x38>)
 80024a6:	fba2 2303 	umull	r2, r3, r2, r3
 80024aa:	0a5b      	lsrs	r3, r3, #9
 80024ac:	687a      	ldr	r2, [r7, #4]
 80024ae:	fb02 f303 	mul.w	r3, r2, r3
 80024b2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80024b4:	bf00      	nop
  }
  while (Delay --);
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	1e5a      	subs	r2, r3, #1
 80024ba:	60fa      	str	r2, [r7, #12]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d1f9      	bne.n	80024b4 <RCC_Delay+0x1c>
}
 80024c0:	bf00      	nop
 80024c2:	bf00      	nop
 80024c4:	3714      	adds	r7, #20
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bc80      	pop	{r7}
 80024ca:	4770      	bx	lr
 80024cc:	20000050 	.word	0x20000050
 80024d0:	10624dd3 	.word	0x10624dd3

080024d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b082      	sub	sp, #8
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d101      	bne.n	80024e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80024e2:	2301      	movs	r3, #1
 80024e4:	e041      	b.n	800256a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024ec:	b2db      	uxtb	r3, r3
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d106      	bne.n	8002500 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2200      	movs	r2, #0
 80024f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80024fa:	6878      	ldr	r0, [r7, #4]
 80024fc:	f7ff f84e 	bl	800159c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2202      	movs	r2, #2
 8002504:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681a      	ldr	r2, [r3, #0]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	3304      	adds	r3, #4
 8002510:	4619      	mov	r1, r3
 8002512:	4610      	mov	r0, r2
 8002514:	f000 fa6a 	bl	80029ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2201      	movs	r2, #1
 800251c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2201      	movs	r2, #1
 8002524:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2201      	movs	r2, #1
 800252c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2201      	movs	r2, #1
 8002534:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2201      	movs	r2, #1
 800253c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2201      	movs	r2, #1
 8002544:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2201      	movs	r2, #1
 800254c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2201      	movs	r2, #1
 8002554:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2201      	movs	r2, #1
 800255c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2201      	movs	r2, #1
 8002564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002568:	2300      	movs	r3, #0
}
 800256a:	4618      	mov	r0, r3
 800256c:	3708      	adds	r7, #8
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}
	...

08002574 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002574:	b480      	push	{r7}
 8002576:	b085      	sub	sp, #20
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002582:	b2db      	uxtb	r3, r3
 8002584:	2b01      	cmp	r3, #1
 8002586:	d001      	beq.n	800258c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002588:	2301      	movs	r3, #1
 800258a:	e035      	b.n	80025f8 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2202      	movs	r2, #2
 8002590:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	68da      	ldr	r2, [r3, #12]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f042 0201 	orr.w	r2, r2, #1
 80025a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a16      	ldr	r2, [pc, #88]	; (8002604 <HAL_TIM_Base_Start_IT+0x90>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d009      	beq.n	80025c2 <HAL_TIM_Base_Start_IT+0x4e>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025b6:	d004      	beq.n	80025c2 <HAL_TIM_Base_Start_IT+0x4e>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a12      	ldr	r2, [pc, #72]	; (8002608 <HAL_TIM_Base_Start_IT+0x94>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d111      	bne.n	80025e6 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	689b      	ldr	r3, [r3, #8]
 80025c8:	f003 0307 	and.w	r3, r3, #7
 80025cc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	2b06      	cmp	r3, #6
 80025d2:	d010      	beq.n	80025f6 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	681a      	ldr	r2, [r3, #0]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f042 0201 	orr.w	r2, r2, #1
 80025e2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025e4:	e007      	b.n	80025f6 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	681a      	ldr	r2, [r3, #0]
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f042 0201 	orr.w	r2, r2, #1
 80025f4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80025f6:	2300      	movs	r3, #0
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	3714      	adds	r7, #20
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bc80      	pop	{r7}
 8002600:	4770      	bx	lr
 8002602:	bf00      	nop
 8002604:	40012c00 	.word	0x40012c00
 8002608:	40000400 	.word	0x40000400

0800260c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b082      	sub	sp, #8
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	691b      	ldr	r3, [r3, #16]
 800261a:	f003 0302 	and.w	r3, r3, #2
 800261e:	2b02      	cmp	r3, #2
 8002620:	d122      	bne.n	8002668 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	68db      	ldr	r3, [r3, #12]
 8002628:	f003 0302 	and.w	r3, r3, #2
 800262c:	2b02      	cmp	r3, #2
 800262e:	d11b      	bne.n	8002668 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f06f 0202 	mvn.w	r2, #2
 8002638:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2201      	movs	r2, #1
 800263e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	699b      	ldr	r3, [r3, #24]
 8002646:	f003 0303 	and.w	r3, r3, #3
 800264a:	2b00      	cmp	r3, #0
 800264c:	d003      	beq.n	8002656 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800264e:	6878      	ldr	r0, [r7, #4]
 8002650:	f000 f9b1 	bl	80029b6 <HAL_TIM_IC_CaptureCallback>
 8002654:	e005      	b.n	8002662 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002656:	6878      	ldr	r0, [r7, #4]
 8002658:	f000 f9a4 	bl	80029a4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800265c:	6878      	ldr	r0, [r7, #4]
 800265e:	f000 f9b3 	bl	80029c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2200      	movs	r2, #0
 8002666:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	691b      	ldr	r3, [r3, #16]
 800266e:	f003 0304 	and.w	r3, r3, #4
 8002672:	2b04      	cmp	r3, #4
 8002674:	d122      	bne.n	80026bc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	68db      	ldr	r3, [r3, #12]
 800267c:	f003 0304 	and.w	r3, r3, #4
 8002680:	2b04      	cmp	r3, #4
 8002682:	d11b      	bne.n	80026bc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f06f 0204 	mvn.w	r2, #4
 800268c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2202      	movs	r2, #2
 8002692:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	699b      	ldr	r3, [r3, #24]
 800269a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d003      	beq.n	80026aa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026a2:	6878      	ldr	r0, [r7, #4]
 80026a4:	f000 f987 	bl	80029b6 <HAL_TIM_IC_CaptureCallback>
 80026a8:	e005      	b.n	80026b6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026aa:	6878      	ldr	r0, [r7, #4]
 80026ac:	f000 f97a 	bl	80029a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026b0:	6878      	ldr	r0, [r7, #4]
 80026b2:	f000 f989 	bl	80029c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2200      	movs	r2, #0
 80026ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	691b      	ldr	r3, [r3, #16]
 80026c2:	f003 0308 	and.w	r3, r3, #8
 80026c6:	2b08      	cmp	r3, #8
 80026c8:	d122      	bne.n	8002710 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	68db      	ldr	r3, [r3, #12]
 80026d0:	f003 0308 	and.w	r3, r3, #8
 80026d4:	2b08      	cmp	r3, #8
 80026d6:	d11b      	bne.n	8002710 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f06f 0208 	mvn.w	r2, #8
 80026e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2204      	movs	r2, #4
 80026e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	69db      	ldr	r3, [r3, #28]
 80026ee:	f003 0303 	and.w	r3, r3, #3
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d003      	beq.n	80026fe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026f6:	6878      	ldr	r0, [r7, #4]
 80026f8:	f000 f95d 	bl	80029b6 <HAL_TIM_IC_CaptureCallback>
 80026fc:	e005      	b.n	800270a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026fe:	6878      	ldr	r0, [r7, #4]
 8002700:	f000 f950 	bl	80029a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002704:	6878      	ldr	r0, [r7, #4]
 8002706:	f000 f95f 	bl	80029c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2200      	movs	r2, #0
 800270e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	691b      	ldr	r3, [r3, #16]
 8002716:	f003 0310 	and.w	r3, r3, #16
 800271a:	2b10      	cmp	r3, #16
 800271c:	d122      	bne.n	8002764 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	68db      	ldr	r3, [r3, #12]
 8002724:	f003 0310 	and.w	r3, r3, #16
 8002728:	2b10      	cmp	r3, #16
 800272a:	d11b      	bne.n	8002764 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f06f 0210 	mvn.w	r2, #16
 8002734:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2208      	movs	r2, #8
 800273a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	69db      	ldr	r3, [r3, #28]
 8002742:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002746:	2b00      	cmp	r3, #0
 8002748:	d003      	beq.n	8002752 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800274a:	6878      	ldr	r0, [r7, #4]
 800274c:	f000 f933 	bl	80029b6 <HAL_TIM_IC_CaptureCallback>
 8002750:	e005      	b.n	800275e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002752:	6878      	ldr	r0, [r7, #4]
 8002754:	f000 f926 	bl	80029a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002758:	6878      	ldr	r0, [r7, #4]
 800275a:	f000 f935 	bl	80029c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2200      	movs	r2, #0
 8002762:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	691b      	ldr	r3, [r3, #16]
 800276a:	f003 0301 	and.w	r3, r3, #1
 800276e:	2b01      	cmp	r3, #1
 8002770:	d10e      	bne.n	8002790 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	68db      	ldr	r3, [r3, #12]
 8002778:	f003 0301 	and.w	r3, r3, #1
 800277c:	2b01      	cmp	r3, #1
 800277e:	d107      	bne.n	8002790 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f06f 0201 	mvn.w	r2, #1
 8002788:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800278a:	6878      	ldr	r0, [r7, #4]
 800278c:	f7fe fe00 	bl	8001390 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	691b      	ldr	r3, [r3, #16]
 8002796:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800279a:	2b80      	cmp	r3, #128	; 0x80
 800279c:	d10e      	bne.n	80027bc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	68db      	ldr	r3, [r3, #12]
 80027a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027a8:	2b80      	cmp	r3, #128	; 0x80
 80027aa:	d107      	bne.n	80027bc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80027b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80027b6:	6878      	ldr	r0, [r7, #4]
 80027b8:	f000 fa67 	bl	8002c8a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	691b      	ldr	r3, [r3, #16]
 80027c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027c6:	2b40      	cmp	r3, #64	; 0x40
 80027c8:	d10e      	bne.n	80027e8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	68db      	ldr	r3, [r3, #12]
 80027d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027d4:	2b40      	cmp	r3, #64	; 0x40
 80027d6:	d107      	bne.n	80027e8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80027e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80027e2:	6878      	ldr	r0, [r7, #4]
 80027e4:	f000 f8f9 	bl	80029da <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	691b      	ldr	r3, [r3, #16]
 80027ee:	f003 0320 	and.w	r3, r3, #32
 80027f2:	2b20      	cmp	r3, #32
 80027f4:	d10e      	bne.n	8002814 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	68db      	ldr	r3, [r3, #12]
 80027fc:	f003 0320 	and.w	r3, r3, #32
 8002800:	2b20      	cmp	r3, #32
 8002802:	d107      	bne.n	8002814 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f06f 0220 	mvn.w	r2, #32
 800280c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800280e:	6878      	ldr	r0, [r7, #4]
 8002810:	f000 fa32 	bl	8002c78 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002814:	bf00      	nop
 8002816:	3708      	adds	r7, #8
 8002818:	46bd      	mov	sp, r7
 800281a:	bd80      	pop	{r7, pc}

0800281c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b084      	sub	sp, #16
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
 8002824:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800282c:	2b01      	cmp	r3, #1
 800282e:	d101      	bne.n	8002834 <HAL_TIM_ConfigClockSource+0x18>
 8002830:	2302      	movs	r3, #2
 8002832:	e0b3      	b.n	800299c <HAL_TIM_ConfigClockSource+0x180>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2201      	movs	r2, #1
 8002838:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2202      	movs	r2, #2
 8002840:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	689b      	ldr	r3, [r3, #8]
 800284a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002852:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800285a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	68fa      	ldr	r2, [r7, #12]
 8002862:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800286c:	d03e      	beq.n	80028ec <HAL_TIM_ConfigClockSource+0xd0>
 800286e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002872:	f200 8087 	bhi.w	8002984 <HAL_TIM_ConfigClockSource+0x168>
 8002876:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800287a:	f000 8085 	beq.w	8002988 <HAL_TIM_ConfigClockSource+0x16c>
 800287e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002882:	d87f      	bhi.n	8002984 <HAL_TIM_ConfigClockSource+0x168>
 8002884:	2b70      	cmp	r3, #112	; 0x70
 8002886:	d01a      	beq.n	80028be <HAL_TIM_ConfigClockSource+0xa2>
 8002888:	2b70      	cmp	r3, #112	; 0x70
 800288a:	d87b      	bhi.n	8002984 <HAL_TIM_ConfigClockSource+0x168>
 800288c:	2b60      	cmp	r3, #96	; 0x60
 800288e:	d050      	beq.n	8002932 <HAL_TIM_ConfigClockSource+0x116>
 8002890:	2b60      	cmp	r3, #96	; 0x60
 8002892:	d877      	bhi.n	8002984 <HAL_TIM_ConfigClockSource+0x168>
 8002894:	2b50      	cmp	r3, #80	; 0x50
 8002896:	d03c      	beq.n	8002912 <HAL_TIM_ConfigClockSource+0xf6>
 8002898:	2b50      	cmp	r3, #80	; 0x50
 800289a:	d873      	bhi.n	8002984 <HAL_TIM_ConfigClockSource+0x168>
 800289c:	2b40      	cmp	r3, #64	; 0x40
 800289e:	d058      	beq.n	8002952 <HAL_TIM_ConfigClockSource+0x136>
 80028a0:	2b40      	cmp	r3, #64	; 0x40
 80028a2:	d86f      	bhi.n	8002984 <HAL_TIM_ConfigClockSource+0x168>
 80028a4:	2b30      	cmp	r3, #48	; 0x30
 80028a6:	d064      	beq.n	8002972 <HAL_TIM_ConfigClockSource+0x156>
 80028a8:	2b30      	cmp	r3, #48	; 0x30
 80028aa:	d86b      	bhi.n	8002984 <HAL_TIM_ConfigClockSource+0x168>
 80028ac:	2b20      	cmp	r3, #32
 80028ae:	d060      	beq.n	8002972 <HAL_TIM_ConfigClockSource+0x156>
 80028b0:	2b20      	cmp	r3, #32
 80028b2:	d867      	bhi.n	8002984 <HAL_TIM_ConfigClockSource+0x168>
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d05c      	beq.n	8002972 <HAL_TIM_ConfigClockSource+0x156>
 80028b8:	2b10      	cmp	r3, #16
 80028ba:	d05a      	beq.n	8002972 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80028bc:	e062      	b.n	8002984 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6818      	ldr	r0, [r3, #0]
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	6899      	ldr	r1, [r3, #8]
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	685a      	ldr	r2, [r3, #4]
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	68db      	ldr	r3, [r3, #12]
 80028ce:	f000 f95c 	bl	8002b8a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80028e0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	68fa      	ldr	r2, [r7, #12]
 80028e8:	609a      	str	r2, [r3, #8]
      break;
 80028ea:	e04e      	b.n	800298a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6818      	ldr	r0, [r3, #0]
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	6899      	ldr	r1, [r3, #8]
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	685a      	ldr	r2, [r3, #4]
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	68db      	ldr	r3, [r3, #12]
 80028fc:	f000 f945 	bl	8002b8a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	689a      	ldr	r2, [r3, #8]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800290e:	609a      	str	r2, [r3, #8]
      break;
 8002910:	e03b      	b.n	800298a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6818      	ldr	r0, [r3, #0]
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	6859      	ldr	r1, [r3, #4]
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	68db      	ldr	r3, [r3, #12]
 800291e:	461a      	mov	r2, r3
 8002920:	f000 f8bc 	bl	8002a9c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	2150      	movs	r1, #80	; 0x50
 800292a:	4618      	mov	r0, r3
 800292c:	f000 f913 	bl	8002b56 <TIM_ITRx_SetConfig>
      break;
 8002930:	e02b      	b.n	800298a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6818      	ldr	r0, [r3, #0]
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	6859      	ldr	r1, [r3, #4]
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	68db      	ldr	r3, [r3, #12]
 800293e:	461a      	mov	r2, r3
 8002940:	f000 f8da 	bl	8002af8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	2160      	movs	r1, #96	; 0x60
 800294a:	4618      	mov	r0, r3
 800294c:	f000 f903 	bl	8002b56 <TIM_ITRx_SetConfig>
      break;
 8002950:	e01b      	b.n	800298a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6818      	ldr	r0, [r3, #0]
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	6859      	ldr	r1, [r3, #4]
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	68db      	ldr	r3, [r3, #12]
 800295e:	461a      	mov	r2, r3
 8002960:	f000 f89c 	bl	8002a9c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	2140      	movs	r1, #64	; 0x40
 800296a:	4618      	mov	r0, r3
 800296c:	f000 f8f3 	bl	8002b56 <TIM_ITRx_SetConfig>
      break;
 8002970:	e00b      	b.n	800298a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681a      	ldr	r2, [r3, #0]
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4619      	mov	r1, r3
 800297c:	4610      	mov	r0, r2
 800297e:	f000 f8ea 	bl	8002b56 <TIM_ITRx_SetConfig>
        break;
 8002982:	e002      	b.n	800298a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002984:	bf00      	nop
 8002986:	e000      	b.n	800298a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002988:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2201      	movs	r2, #1
 800298e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2200      	movs	r2, #0
 8002996:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800299a:	2300      	movs	r3, #0
}
 800299c:	4618      	mov	r0, r3
 800299e:	3710      	adds	r7, #16
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bd80      	pop	{r7, pc}

080029a4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b083      	sub	sp, #12
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80029ac:	bf00      	nop
 80029ae:	370c      	adds	r7, #12
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bc80      	pop	{r7}
 80029b4:	4770      	bx	lr

080029b6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80029b6:	b480      	push	{r7}
 80029b8:	b083      	sub	sp, #12
 80029ba:	af00      	add	r7, sp, #0
 80029bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80029be:	bf00      	nop
 80029c0:	370c      	adds	r7, #12
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bc80      	pop	{r7}
 80029c6:	4770      	bx	lr

080029c8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80029c8:	b480      	push	{r7}
 80029ca:	b083      	sub	sp, #12
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80029d0:	bf00      	nop
 80029d2:	370c      	adds	r7, #12
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bc80      	pop	{r7}
 80029d8:	4770      	bx	lr

080029da <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80029da:	b480      	push	{r7}
 80029dc:	b083      	sub	sp, #12
 80029de:	af00      	add	r7, sp, #0
 80029e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80029e2:	bf00      	nop
 80029e4:	370c      	adds	r7, #12
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bc80      	pop	{r7}
 80029ea:	4770      	bx	lr

080029ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b085      	sub	sp, #20
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
 80029f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	4a25      	ldr	r2, [pc, #148]	; (8002a94 <TIM_Base_SetConfig+0xa8>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d007      	beq.n	8002a14 <TIM_Base_SetConfig+0x28>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a0a:	d003      	beq.n	8002a14 <TIM_Base_SetConfig+0x28>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	4a22      	ldr	r2, [pc, #136]	; (8002a98 <TIM_Base_SetConfig+0xac>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d108      	bne.n	8002a26 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a1a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	68fa      	ldr	r2, [r7, #12]
 8002a22:	4313      	orrs	r3, r2
 8002a24:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	4a1a      	ldr	r2, [pc, #104]	; (8002a94 <TIM_Base_SetConfig+0xa8>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d007      	beq.n	8002a3e <TIM_Base_SetConfig+0x52>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a34:	d003      	beq.n	8002a3e <TIM_Base_SetConfig+0x52>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	4a17      	ldr	r2, [pc, #92]	; (8002a98 <TIM_Base_SetConfig+0xac>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d108      	bne.n	8002a50 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a44:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	68db      	ldr	r3, [r3, #12]
 8002a4a:	68fa      	ldr	r2, [r7, #12]
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	695b      	ldr	r3, [r3, #20]
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	68fa      	ldr	r2, [r7, #12]
 8002a62:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	689a      	ldr	r2, [r3, #8]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	681a      	ldr	r2, [r3, #0]
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	4a07      	ldr	r2, [pc, #28]	; (8002a94 <TIM_Base_SetConfig+0xa8>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d103      	bne.n	8002a84 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	691a      	ldr	r2, [r3, #16]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2201      	movs	r2, #1
 8002a88:	615a      	str	r2, [r3, #20]
}
 8002a8a:	bf00      	nop
 8002a8c:	3714      	adds	r7, #20
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bc80      	pop	{r7}
 8002a92:	4770      	bx	lr
 8002a94:	40012c00 	.word	0x40012c00
 8002a98:	40000400 	.word	0x40000400

08002a9c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b087      	sub	sp, #28
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	60f8      	str	r0, [r7, #12]
 8002aa4:	60b9      	str	r1, [r7, #8]
 8002aa6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	6a1b      	ldr	r3, [r3, #32]
 8002aac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	6a1b      	ldr	r3, [r3, #32]
 8002ab2:	f023 0201 	bic.w	r2, r3, #1
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	699b      	ldr	r3, [r3, #24]
 8002abe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002ac0:	693b      	ldr	r3, [r7, #16]
 8002ac2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002ac6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	011b      	lsls	r3, r3, #4
 8002acc:	693a      	ldr	r2, [r7, #16]
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002ad2:	697b      	ldr	r3, [r7, #20]
 8002ad4:	f023 030a 	bic.w	r3, r3, #10
 8002ad8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002ada:	697a      	ldr	r2, [r7, #20]
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	693a      	ldr	r2, [r7, #16]
 8002ae6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	697a      	ldr	r2, [r7, #20]
 8002aec:	621a      	str	r2, [r3, #32]
}
 8002aee:	bf00      	nop
 8002af0:	371c      	adds	r7, #28
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bc80      	pop	{r7}
 8002af6:	4770      	bx	lr

08002af8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b087      	sub	sp, #28
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	60f8      	str	r0, [r7, #12]
 8002b00:	60b9      	str	r1, [r7, #8]
 8002b02:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	6a1b      	ldr	r3, [r3, #32]
 8002b08:	f023 0210 	bic.w	r2, r3, #16
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	699b      	ldr	r3, [r3, #24]
 8002b14:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	6a1b      	ldr	r3, [r3, #32]
 8002b1a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002b22:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	031b      	lsls	r3, r3, #12
 8002b28:	697a      	ldr	r2, [r7, #20]
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002b2e:	693b      	ldr	r3, [r7, #16]
 8002b30:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002b34:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002b36:	68bb      	ldr	r3, [r7, #8]
 8002b38:	011b      	lsls	r3, r3, #4
 8002b3a:	693a      	ldr	r2, [r7, #16]
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	697a      	ldr	r2, [r7, #20]
 8002b44:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	693a      	ldr	r2, [r7, #16]
 8002b4a:	621a      	str	r2, [r3, #32]
}
 8002b4c:	bf00      	nop
 8002b4e:	371c      	adds	r7, #28
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bc80      	pop	{r7}
 8002b54:	4770      	bx	lr

08002b56 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002b56:	b480      	push	{r7}
 8002b58:	b085      	sub	sp, #20
 8002b5a:	af00      	add	r7, sp, #0
 8002b5c:	6078      	str	r0, [r7, #4]
 8002b5e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b6c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002b6e:	683a      	ldr	r2, [r7, #0]
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	4313      	orrs	r3, r2
 8002b74:	f043 0307 	orr.w	r3, r3, #7
 8002b78:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	68fa      	ldr	r2, [r7, #12]
 8002b7e:	609a      	str	r2, [r3, #8]
}
 8002b80:	bf00      	nop
 8002b82:	3714      	adds	r7, #20
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bc80      	pop	{r7}
 8002b88:	4770      	bx	lr

08002b8a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002b8a:	b480      	push	{r7}
 8002b8c:	b087      	sub	sp, #28
 8002b8e:	af00      	add	r7, sp, #0
 8002b90:	60f8      	str	r0, [r7, #12]
 8002b92:	60b9      	str	r1, [r7, #8]
 8002b94:	607a      	str	r2, [r7, #4]
 8002b96:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b9e:	697b      	ldr	r3, [r7, #20]
 8002ba0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002ba4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	021a      	lsls	r2, r3, #8
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	431a      	orrs	r2, r3
 8002bae:	68bb      	ldr	r3, [r7, #8]
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	697a      	ldr	r2, [r7, #20]
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	697a      	ldr	r2, [r7, #20]
 8002bbc:	609a      	str	r2, [r3, #8]
}
 8002bbe:	bf00      	nop
 8002bc0:	371c      	adds	r7, #28
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bc80      	pop	{r7}
 8002bc6:	4770      	bx	lr

08002bc8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b085      	sub	sp, #20
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
 8002bd0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bd8:	2b01      	cmp	r3, #1
 8002bda:	d101      	bne.n	8002be0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002bdc:	2302      	movs	r3, #2
 8002bde:	e041      	b.n	8002c64 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2201      	movs	r2, #1
 8002be4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2202      	movs	r2, #2
 8002bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	689b      	ldr	r3, [r3, #8]
 8002bfe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c06:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	68fa      	ldr	r2, [r7, #12]
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	68fa      	ldr	r2, [r7, #12]
 8002c18:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a14      	ldr	r2, [pc, #80]	; (8002c70 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d009      	beq.n	8002c38 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c2c:	d004      	beq.n	8002c38 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a10      	ldr	r2, [pc, #64]	; (8002c74 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d10c      	bne.n	8002c52 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002c3e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	68ba      	ldr	r2, [r7, #8]
 8002c46:	4313      	orrs	r3, r2
 8002c48:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	68ba      	ldr	r2, [r7, #8]
 8002c50:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2201      	movs	r2, #1
 8002c56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002c62:	2300      	movs	r3, #0
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	3714      	adds	r7, #20
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bc80      	pop	{r7}
 8002c6c:	4770      	bx	lr
 8002c6e:	bf00      	nop
 8002c70:	40012c00 	.word	0x40012c00
 8002c74:	40000400 	.word	0x40000400

08002c78 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b083      	sub	sp, #12
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002c80:	bf00      	nop
 8002c82:	370c      	adds	r7, #12
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bc80      	pop	{r7}
 8002c88:	4770      	bx	lr

08002c8a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002c8a:	b480      	push	{r7}
 8002c8c:	b083      	sub	sp, #12
 8002c8e:	af00      	add	r7, sp, #0
 8002c90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002c92:	bf00      	nop
 8002c94:	370c      	adds	r7, #12
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bc80      	pop	{r7}
 8002c9a:	4770      	bx	lr

08002c9c <__libc_init_array>:
 8002c9c:	b570      	push	{r4, r5, r6, lr}
 8002c9e:	2600      	movs	r6, #0
 8002ca0:	4d0c      	ldr	r5, [pc, #48]	; (8002cd4 <__libc_init_array+0x38>)
 8002ca2:	4c0d      	ldr	r4, [pc, #52]	; (8002cd8 <__libc_init_array+0x3c>)
 8002ca4:	1b64      	subs	r4, r4, r5
 8002ca6:	10a4      	asrs	r4, r4, #2
 8002ca8:	42a6      	cmp	r6, r4
 8002caa:	d109      	bne.n	8002cc0 <__libc_init_array+0x24>
 8002cac:	f000 f822 	bl	8002cf4 <_init>
 8002cb0:	2600      	movs	r6, #0
 8002cb2:	4d0a      	ldr	r5, [pc, #40]	; (8002cdc <__libc_init_array+0x40>)
 8002cb4:	4c0a      	ldr	r4, [pc, #40]	; (8002ce0 <__libc_init_array+0x44>)
 8002cb6:	1b64      	subs	r4, r4, r5
 8002cb8:	10a4      	asrs	r4, r4, #2
 8002cba:	42a6      	cmp	r6, r4
 8002cbc:	d105      	bne.n	8002cca <__libc_init_array+0x2e>
 8002cbe:	bd70      	pop	{r4, r5, r6, pc}
 8002cc0:	f855 3b04 	ldr.w	r3, [r5], #4
 8002cc4:	4798      	blx	r3
 8002cc6:	3601      	adds	r6, #1
 8002cc8:	e7ee      	b.n	8002ca8 <__libc_init_array+0xc>
 8002cca:	f855 3b04 	ldr.w	r3, [r5], #4
 8002cce:	4798      	blx	r3
 8002cd0:	3601      	adds	r6, #1
 8002cd2:	e7f2      	b.n	8002cba <__libc_init_array+0x1e>
 8002cd4:	08002d2c 	.word	0x08002d2c
 8002cd8:	08002d2c 	.word	0x08002d2c
 8002cdc:	08002d2c 	.word	0x08002d2c
 8002ce0:	08002d30 	.word	0x08002d30

08002ce4 <memset>:
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	4402      	add	r2, r0
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d100      	bne.n	8002cee <memset+0xa>
 8002cec:	4770      	bx	lr
 8002cee:	f803 1b01 	strb.w	r1, [r3], #1
 8002cf2:	e7f9      	b.n	8002ce8 <memset+0x4>

08002cf4 <_init>:
 8002cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cf6:	bf00      	nop
 8002cf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002cfa:	bc08      	pop	{r3}
 8002cfc:	469e      	mov	lr, r3
 8002cfe:	4770      	bx	lr

08002d00 <_fini>:
 8002d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d02:	bf00      	nop
 8002d04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d06:	bc08      	pop	{r3}
 8002d08:	469e      	mov	lr, r3
 8002d0a:	4770      	bx	lr
